{"compress":true,"commitItems":[["798bc728-5f86-40b5-9f0b-01d1aac18ba3",1569586037729,"## Java 最常见的 208 道面试题：第十八模块答案\n\n[Java团长](javascript:void(0);) _4月14日_\n\n**十八、Redis**\n\n**179. redis 是什么？都有哪些使用场景？**\n\nRedis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n\nRedis 使用场景：\n\n*   数据高并发的读写\n\n*   海量数据的读写\n\n*   对扩展性要求高的数据\n\n**180. redis 有哪些功能？**\n\n*   数据缓存功能\n\n*   分布式锁的功能\n\n*   支持数据持久化\n\n*   支持事务\n\n*   支持消息队列\n\n**181. redis 和 memecache 有什么区别？**\n\n*   memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型\n\n*   redis的速度比memcached快很多\n\n*   redis可以持久化其数据\n\n**182. redis 为什么是单线程的？**\n\n因为 cpu 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存或者网络带宽。既然单线程容易实现，而且 cpu 又不会成为瓶颈，那就顺理成章地采用单线程的方案了。\n\n关于 Redis 的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。\n\n而且单线程并不代表就慢 nginx 和 nodejs 也都是高性能单线程的代表。\n\n**183. 什么是缓存穿透？怎么解决？**\n\n缓存穿透：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。\n\n解决方案：最简单粗暴的方法如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们就把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。\n\n**184. redis 支持的数据类型有哪些？**\n\nstring、list、hash、set、zset。\n\n**185. redis 支持的 java 客户端都有哪些？**\n\nRedisson、Jedis、lettuce等等，官方推荐使用Redisson。\n\n**186. jedis 和 redisson 有哪些区别？**\n\nJedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持。\n\nRedisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。\n\n**187. 怎么保证缓存和数据库数据的一致性？**\n\n*   合理设置缓存的过期时间。\n\n*   新增、更改、删除数据库操作时同步更新 Redis，可以使用事物机制来保证数据的一致性。\n\n**188. redis 持久化有几种方式？**\n\nRedis 的持久化有两种方式，或者说有两种策略：\n\n*   RDB（Redis Database）：指定的时间间隔能对你的数据进行快照存储。\n\n*   AOF（Append Only File）：每一个收到的写命令都通过write函数追加到文件中。\n\n**189. redis 怎么实现分布式锁？**\n\nRedis 分布式锁其实就是在系统里面占一个“坑”，其他程序也要占“坑”的时候，占用成功了就可以继续执行，失败了就只能放弃或稍后重试。\n\n占坑一般使用 setnx(set if not exists)指令，只允许被一个程序占有，使用完调用 del 释放锁。\n\n**190. redis 分布式锁有什么缺陷？**\n\nRedis 分布式锁不能解决超时的问题，分布式锁有一个超时时间，程序的执行如果超出了锁的超时时间就会出现问题。\n\n**191. redis 如何做内存优化？**\n\n尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。\n\n比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key,而是应该把这个用户的所有信息存储到一张散列表里面。\n\n**192. redis 淘汰策略有哪些？**\n\n*   volatile-lru：从已设置过期时间的数据集（server. db[i]. expires）中挑选最近最少使用的数据淘汰。\n\n*   volatile-ttl：从已设置过期时间的数据集（server. db[i]. expires）中挑选将要过期的数据淘汰。\n\n*   volatile-random：从已设置过期时间的数据集（server. db[i]. expires）中任意选择数据淘汰。\n\n*   allkeys-lru：从数据集（server. db[i]. dict）中挑选最近最少使用的数据淘汰。\n\n*   allkeys-random：从数据集（server. db[i]. dict）中任意选择数据淘汰。\n\n*   no-enviction（驱逐）：禁止驱逐数据。\n\n**193. redis 常见的性能问题有哪些？该如何解决？**\n\n*   主服务器写内存快照，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以主服务器最好不要写内存快照。\n\n*   Redis 主从复制的性能问题，为了主从复制的速度和连接的稳定性，主从库最好在同一个局域网内。",[[1569586015184,["GJX@GJXAIOU",[[-1,31,"[Java团长](javascript:void(0);) _4月14日_\n"]],[30,68],[30,30]]],[1569586016011,["GJX@GJXAIOU",[[-1,0,"#"]],[1,1],[0,0]]],[1569586018216,["GJX@GJXAIOU",[[-1,26,"答案"]],[26,28],[26,26]]],[1569586018537,["GJX@GJXAIOU",[[-1,26,""],[1,26," "],[-1,49," "],[1,50," "],[-1,55," "],[1,56," "],[-1,90," "],[1,91," "],[-1,149," "],[1,150," "],[-1,206," "],[1,207," "],[-1,212," "],[1,213," "],[-1,289," "],[1,290," "],[-1,295," 和 "],[1,298," 和 "],[-1,307," "],[1,308," "],[-1,421," "],[1,422," "],[-1,427," "],[1,428," "],[-1,443," cpu 不是 "],[1,451," cpu 不是 "],[-1,456," "],[1,457," "],[-1,466," "],[1,467," "],[-1,498," cpu "],[1,503," cpu "],[-1,532," "],[1,533," "],[-1,538," "],[1,539," "],[-1,581," "],[1,582," "],[-1,587," 和 "],[1,590," 和 "],[-1,596," "],[1,597," "],[-1,618," "],[1,619," "],[-1,806," "],[1,807," "],[-1,812," "],[1,813," "],[-1,862," "],[1,863," "],[-1,868," 支持的 "],[1,873," 支持的 "],[-1,877," "],[1,878," "],[-1,938," "],[1,939," "],[-1,944," 和 "],[1,947," 和 "],[-1,955," "],[1,956," "],[-1,1152," "],[1,1153," "],[-1,1214," "],[1,1215," "],[-1,1247," "],[1,1248," "],[-1,1253," "],[1,1254," "],[-1,1272," "],[1,1273," "],[-1,1307," "],[1,1308," "],[-1,1354," "],[1,1355," "],[-1,1359," "],[1,1360," "],[-1,1400," "],[1,1401," "],[-1,1406," "],[1,1407," "],[-1,1425," "],[1,1426," "],[-1,1495," "],[1,1496," "],[-1,1505," if not "],[1,1513," if not "],[-1,1539," del "],[1,1544," del "],[-1,1556," "],[1,1557," "],[-1,1562," "],[1,1563," "],[-1,1582," "],[1,1583," "],[-1,1640," "],[1,1641," "],[-1,1646," "],[1,1647," "],[-1,1810," "],[1,1811," "],[-1,1816," "],[1,1817," "],[-1,1866," "],[1,1867," "],[-1,1873," "],[1,1874," "],[-1,1936," "],[1,1937," "],[-1,1943," "],[1,1944," "],[-1,2007," "],[1,2008," "],[-1,2014," "],[1,2015," "],[-1,2063," "],[1,2064," "],[-1,2070," "],[1,2071," "],[-1,2124," "],[1,2125," "],[-1,2131," "],[1,2132," "],[-1,2185," "],[1,2186," "],[-1,2191," "],[1,2192," "],[-1,2291," "],[1,2292," "]],[26,26],[27,27]]],[1569586024422,["GJX@GJXAIOU",[[1,27,"Redis"]],[27,27],[32,32]]],[1569586031669,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569586032401,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1569586034974,["GJX@GJXAIOU",[[-1,68,"**十八、Redis**"]],[68,80],[68,68]]],[1569586035135,["GJX@GJXAIOU",[[-1,69,"\n"]],[68,68],[67,67]]],[1569586035824,["GJX@GJXAIOU",[[-1,68,"\n"]],[67,67],[66,66]]],[1569586037606,["GJX@GJXAIOU",[[1,68,"## "]],[71,71],[99,99]]],[1569586038156,["GJX@GJXAIOU",[[-1,71,"**"],[-1,97,"**"]],[99,99],[71,95]]],[1569586040484,["GJX@GJXAIOU",[[-1,180,"\n"]],[180,180],[179,179]]],[1569586041934,["GJX@GJXAIOU",[[-1,193,"\n"]],[193,193],[192,192]]],[1569586043500,["GJX@GJXAIOU",[[-1,205,"\n"]],[205,205],[204,204]]],[1569586045717,["GJX@GJXAIOU",[[1,221,"## "]],[227,227],[245,245]]],[1569586046189,["GJX@GJXAIOU",[[-1,224,"**"],[-1,243,"**"]],[245,245],[224,241]]],[1569586047637,["GJX@GJXAIOU",[[-1,254,"\n"]],[254,254],[253,253]]],[1569586048381,["GJX@GJXAIOU",[[-1,266,"\n"]],[266,266],[265,265]]],[1569586048956,["GJX@GJXAIOU",[[-1,278,"\n"]],[278,278],[277,277]]],[1569586049532,["GJX@GJXAIOU",[[-1,287,"\n"]],[287,287],[286,286]]],[1569586051453,["GJX@GJXAIOU",[[1,299,"## "]],[305,305],[335,335]]],[1569586054231,["GJX@GJXAIOU",[[-1,302,"**"],[-1,333,"**"]],[335,335],[302,331]]],[1569586056103,["GJX@GJXAIOU",[[-1,383,"\n"]],[383,383],[382,382]]],[1569586057184,["GJX@GJXAIOU",[[-1,409,"\n"]],[409,409],[408,408]]],[1569586058811,["GJX@GJXAIOU",[[1,428,"## "]],[437,437],[455,455]]],[1569586059252,["GJX@GJXAIOU",[[-1,431,"**"],[-1,453,"**"]],[455,455],[431,451]]],[1569586062279,["GJX@GJXAIOU",[[1,624,"## "]],[632,632],[649,649]]],[1569586062887,["GJX@GJXAIOU",[[-1,627,"**"],[-1,647,"**"]],[649,649],[627,645]]],[1569586066685,["GJX@GJXAIOU",[[1,811,"## "]],[816,816],[840,840]]],[1569586067151,["GJX@GJXAIOU",[[-1,814,"**"],[-1,838,"**"]],[840,840],[814,836]]],[1569586069028,["GJX@GJXAIOU",[[1,866,"## "]],[874,874],[901,901]]],[1569586069478,["GJX@GJXAIOU",[[-1,869,"**"],[-1,899,"**"]],[901,901],[869,897]]],[1569586070949,["GJX@GJXAIOU",[[1,941,"## "]],[954,954],[976,976]]],[1569586071419,["GJX@GJXAIOU",[[-1,944,"**"],[-1,974,"**"]],[976,976],[944,972]]],[1569586073740,["GJX@GJXAIOU",[[1,1154,"## "]],[1163,1163],[1183,1183]]],[1569586074184,["GJX@GJXAIOU",[[-1,1157,"**"],[-1,1181,"**"]],[1183,1183],[1157,1179]]],[1569586076316,["GJX@GJXAIOU",[[1,1273,"## ****"]],[1273,1273],[1278,1278]]],[1569586078476,["GJX@GJXAIOU",[[-1,1273,"## ****"]],[1278,1278],[1273,1273]]],[1569586080087,["GJX@GJXAIOU",[[1,1248,"## "]],[1263,1263],[1275,1275]]],[1569586080750,["GJX@GJXAIOU",[[-1,1251,"**"],[-1,1273,"**"]],[1275,1275],[1251,1271]]],[1569586082483,["GJX@GJXAIOU",[[1,1400,"## "]],[1414,1414],[1427,1427]]],[1569586082981,["GJX@GJXAIOU",[[-1,1403,"**"],[-1,1425,"**"]],[1427,1427],[1403,1423]]],[1569586085236,["GJX@GJXAIOU",[[1,1555,"## "]],[1563,1563],[1583,1583]]],[1569586085717,["GJX@GJXAIOU",[[-1,1558,"**"],[-1,1581,"**"]],[1583,1583],[1558,1579]]],[1569586087718,["GJX@GJXAIOU",[[1,1638,"## "]],[1651,1651],[1664,1664]]],[1569586088136,["GJX@GJXAIOU",[[-1,1641,"**"],[-1,1662,"**"]],[1664,1664],[1641,1660]]],[1569586090028,["GJX@GJXAIOU",[[1,1807,"## "]],[1821,1821],[1833,1833]]],[1569586090478,["GJX@GJXAIOU",[[-1,1810,"**"],[-1,1831,"**"]],[1833,1833],[1810,1829]]],[1569586092019,["GJX@GJXAIOU",[[-1,1900,"\n"]],[1900,1900],[1899,1899]]],[1569586093035,["GJX@GJXAIOU",[[-1,1967,"\n"]],[1967,1967],[1966,1966]]],[1569586093619,["GJX@GJXAIOU",[[-1,2034,"\n"]],[2034,2034],[2033,2033]]],[1569586094941,["GJX@GJXAIOU",[[-1,2091,"\n"]],[2091,2091],[2090,2090]]],[1569586095606,["GJX@GJXAIOU",[[-1,2146,"\n"]],[2146,2146],[2145,2145]]],[1569586097590,["GJX@GJXAIOU",[[1,2176,"## "]],[2180,2180],[2211,2211]]],[1569586098003,["GJX@GJXAIOU",[[-1,2179,"**"],[-1,2209,"**"]],[2211,2211],[2179,2207]]],[1569586104532,["GJX@GJXAIOU",[[1,68,"\n"]],[66,66],[67,67]]],[1569586105405,["GJX@GJXAIOU",[[1,67,"@"]],[67,67],[68,68]]],[1569586105860,["GJX@GJXAIOU",[[-1,67,"@"]],[68,68],[67,67]]],[1569586106692,["GJX@GJXAIOU",[[1,67,"2"]],[67,67],[68,68]]],[1569586107293,["GJX@GJXAIOU",[[-1,67,"2"]],[68,68],[67,67]]],[1569586108429,["GJX@GJXAIOU",[[1,67,"@5"]],[67,67],[69,69]]],[1569586110791,["GJX@GJXAIOU",[[-1,68,"5"]],[69,69],[68,68]]],[1569586111317,["GJX@GJXAIOU",[[1,68,"toc"]],[68,68],[71,71]]],[1569586761347,["GJX@GJXAIOU",[[1,173,"**"],[1,183,"**"]],[173,183],[173,187]]],[1569586764543,["GJX@GJXAIOU",[[-1,251,"\n"]],[251,251],[250,250]]],[1569586766219,["GJX@GJXAIOU",[[-1,340,"\n"]],[340,340],[339,339]]],[1569586768267,["GJX@GJXAIOU",[[-1,548,"\n"]],[548,548],[547,547]]],[1569586769043,["GJX@GJXAIOU",[[-1,587,"\n"]],[587,587],[586,586]]],[1569586775107,["GJX@GJXAIOU",[[-1,842,"\n"]],[842,842],[841,841]]],[1569586776262,["GJX@GJXAIOU",[[-1,902,"\n"]],[902,902],[901,901]]],[1569586779531,["GJX@GJXAIOU",[[-1,1201,"\n"]],[1201,1201],[1200,1200]]],[1569586780595,["GJX@GJXAIOU",[[-1,1183,"\n"]],[1183,1183],[1182,1182]]],[1569586781668,["GJX@GJXAIOU",[[-1,1300,"\n"]],[1300,1300],[1299,1299]]],[1569586783012,["GJX@GJXAIOU",[[-1,1345,"\n"]],[1345,1345],[1344,1344]]],[1569586784971,["GJX@GJXAIOU",[[-1,1492,"\n"]],[1492,1492],[1491,1491]]],[1569586790247,["GJX@GJXAIOU",[[-1,2275,"\n"]],[2275,2275],[2274,2274]]]],null,"GJX@GJXAIOU"]]}