{"compress":true,"commitItems":[["3481cc5b-5951-4d76-907e-dfbc2b846c5f",1563097936202,"## Java 最常见的 208 道面试题：第六模块答案\n\n[Java团长](javascript:void(0);) _3月17日_\n\n**Java Web**\n\n**64\\. jsp 和 servlet 有什么区别？**\n\n1.  jsp经编译后就变成了Servlet.（JSP的本质就是Servlet，JVM只能识别java的类，不能识别JSP的代码，Web容器将JSP的代码编译成JVM能够识别的java类）\n\n2.  jsp更擅长表现于页面显示，servlet更擅长于逻辑控制。\n\n3.  Servlet中没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n\n4.  Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。\n\n**65\\. jsp 有哪些内置对象？作用分别是什么？**\n\nJSP有9个内置对象：\n\n*   request：封装客户端的请求，其中包含来自GET或POST请求的参数；\n\n*   response：封装服务器对客户端的响应；\n\n*   pageContext：通过该对象可以获取其他对象；\n\n*   session：封装用户会话的对象；\n\n*   application：封装服务器运行环境的对象；\n\n*   out：输出服务器响应的输出流对象；\n\n*   config：Web应用的配置对象；\n\n*   page：JSP页面本身（相当于Java程序中的this）；\n\n*   exception：封装页面抛出异常的对象。\n\n**66\\. 说一下 jsp 的 4 种作用域？**\n\nJSP中的四种作用域包括page、request、session和application，具体来说：\n\n*   **page**代表与一个页面相关的对象和属性。\n\n*   **request**代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。\n\n*   **session**代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。\n\n*   **application**代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。\n\n**67\\. session 和 cookie 有什么区别？**\n\n*   由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。\n\n*   思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。\n\n*   Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。\n\n**68\\. 说一下 session 的工作原理？**\n\n其实session是一个存在服务器上的类似于一个散列表格的文件。里面存有我们需要的信息，在我们需要用的时候可以从里面取出来。类似于一个大号的map吧，里面的键存储的是用户的sessionid，用户向服务器发送请求的时候会带上这个sessionid。这时就可以从中取出对应的值了。\n\n**69\\. 如果客户端禁止 cookie 能实现 session 还能用吗？**\n\nCookie与 Session，一般认为是两个独立的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。但为什么禁用Cookie就不能得到Session呢？因为Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。\n\n假定用户关闭Cookie的情况下使用Session，其实现途径有以下几种：\n\n1.  设置php.ini配置文件中的“session.use_trans_sid = 1”，或者编译时打开打开了“--enable-trans-sid”选项，让PHP自动跨页传递Session ID。\n\n2.  手动通过URL传值、隐藏表单传递Session ID。\n\n3.  用文件、数据库等形式保存Session ID，在跨页过程中手动调用。\n\n**70\\. spring mvc 和 struts 的区别是什么？**\n\n*   ### 拦截机制的不同\n\nStruts2是类级别的拦截，每次请求就会创建一个Action，和Spring整合时Struts2的ActionBean注入作用域是原型模式prototype，然后通过setter，getter吧request数据注入到属性。Struts2中，一个Action对应一个request，response上下文，在接收参数时，可以通过属性接收，这说明属性参数是让多个方法共享的。Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了，只能设计为多例。\n\nSpringMVC是方法级别的拦截，一个方法对应一个Request上下文，所以方法直接基本上是独立的，独享request，response数据。而每个方法同时又何一个url对应，参数的传递是直接注入到方法中的，是方法所独有的。处理结果通过ModeMap返回给框架。在Spring整合时，SpringMVC的Controller Bean默认单例模式Singleton，所以默认对所有的请求，只会创建一个Controller，有应为没有共享的属性，所以是线程安全的，如果要改变默认的作用域，需要添加@Scope注解修改。\n\nStruts2有自己的拦截Interceptor机制，SpringMVC这是用的是独立的Aop方式，这样导致Struts2的配置文件量还是比SpringMVC大。\n\n*   ### 底层框架的不同\n\nStruts2采用Filter（StrutsPrepareAndExecuteFilter）实现，SpringMVC（DispatcherServlet）则采用Servlet实现。Filter在容器启动之后即初始化；服务停止以后坠毁，晚于Servlet。Servlet在是在调用时初始化，先于Filter调用，服务停止后销毁。\n\n*   ### 性能方面\n\nStruts2是类级别的拦截，每次请求对应实例一个新的Action，需要加载所有的属性值注入，SpringMVC实现了零配置，由于SpringMVC基于方法的拦截，有加载一次单例模式bean注入。所以，SpringMVC开发效率和性能高于Struts2。\n\n*   ### 配置方面\n\nspring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高。\n\n**71\\. 如何避免 sql 注入？**\n\n1.  PreparedStatement（简单又有效的方法）\n\n2.  使用正则表达式过滤传入的参数\n\n3.  字符串过滤\n\n4.  JSP中调用该函数检查是否包函非法字符\n\n5.  JSP页面判断代码\n\n**72\\. 什么是 XSS 攻击，如何避免？**\n\nXSS攻击又称CSS,全称Cross Site Script  （跨站脚本攻击），其原理是攻击者向有XSS漏洞的网站中输入恶意的 HTML 代码，当用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。XSS 攻击类似于 SQL 注入攻击，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。 XSS是 Web 程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式。\n\nXSS防范的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。\n\n**73\\. 什么是 CSRF 攻击，如何避免？**\n\nCSRF（Cross-site request forgery）也被称为 one-click attack或者 session riding，中文全称是叫**跨站请求伪造**。一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。常用于盗取账号、转账、发送虚假消息等。攻击者利用网站对请求的验证漏洞而实现这样的攻击行为，网站能够确认请求来源于用户的浏览器，却不能验证请求是否源于用户的真实意愿下的操作行为。\n\n## 如何避免：\n\n### 1\\. 验证 HTTP Referer 字段\n\n> HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF\n> 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。\n\n### 2\\. 使用验证码\n\n> 关键操作页面加上验证码，后台收到请求后通过判断验证码可以防御CSRF。但这种方法对用户不太友好。\n\n### 3\\. 在请求地址中添加token并验证\n\n> CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。\n> 对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。\n> 而对于 POST 请求来说，要在 form 的最后加上 <input type=\"hidden\" name=\"csrftoken\" value=\"tokenvalue\"/>，这样就把token以参数的形式加入请求了。\n\n### 4\\. 在HTTP 头中自定义属性并验证\n\n> 这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。",[[1563097890219,["GJX@GJXAIOU",[[-1,5346,">"]],[5347,5347],[5346,5346]]],[1563097892841,["GJX@GJXAIOU",[[-1,4745,">"]],[4746,4746],[4745,4745]]],[1563097894378,["GJX@GJXAIOU",[[-1,5136," "]],[5137,5137],[5136,5136]]],[1563097895513,["GJX@GJXAIOU",[[-1,5206,">"]],[5207,5207],[5206,5206]]],[1563097896633,["GJX@GJXAIOU",[[-1,5135,">"]],[5136,5136],[5135,5135]]],[1563097908420,["GJX@GJXAIOU",[[-1,4667,"> "]],[4669,4669],[4667,4667]]],[1563097910793,["GJX@GJXAIOU",[[-1,4600,">"]],[4601,4601],[4600,4600]]],[1563097912421,["GJX@GJXAIOU",[[-1,4519,"> "]],[4521,4521],[4519,4519]]]],null,"GJX@GJXAIOU"],["47feac35-d9e6-4dc0-82e7-664597497fcd",1565073040567,"## Java 最常见的 208 道面试题：第六模块答案\n\n[Java团长](javascript:void(0);) _3月17日_\n\n**Java Web**\n\n**64\\. jsp 和 servlet 有什么区别？**\n\n1.  jsp经编译后就变成了Servlet.（JSP的本质就是Servlet，JVM只能识别java的类，不能识别JSP的代码，Web容器将JSP的代码编译成JVM能够识别的java类）\n\n2.  jsp更擅长表现于页面显示，servlet更擅长于逻辑控制。\n\n3.  Servlet中没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n\n4.  Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。\n\n**65\\. jsp 有哪些内置对象？作用分别是什么？**\n\nJSP有9个内置对象：\n\n*   request：封装客户端的请求，其中包含来自GET或POST请求的参数；\n\n*   response：封装服务器对客户端的响应；\n\n*   pageContext：通过该对象可以获取其他对象；\n\n*   session：封装用户会话的对象；\n\n*   application：封装服务器运行环境的对象；\n\n*   out：输出服务器响应的输出流对象；\n\n*   config：Web应用的配置对象；\n\n*   page：JSP页面本身（相当于Java程序中的this）；\n\n*   exception：封装页面抛出异常的对象。\n\n**66\\. 说一下 jsp 的 4 种作用域？**\n\nJSP中的四种作用域包括page、request、session和application，具体来说：\n\n*   **page**代表与一个页面相关的对象和属性。\n\n*   **request**代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。\n\n*   **session**代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。\n\n*   **application**代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。\n\n**67\\. session 和 cookie 有什么区别？**\n\n*   由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。\n\n*   思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。\n\n*   Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。\n\n**68\\. 说一下 session 的工作原理？**\n\n其实session是一个存在服务器上的类似于一个散列表格的文件。里面存有我们需要的信息，在我们需要用的时候可以从里面取出来。类似于一个大号的map吧，里面的键存储的是用户的sessionid，用户向服务器发送请求的时候会带上这个sessionid。这时就可以从中取出对应的值了。\n\n**69\\. 如果客户端禁止 cookie 能实现 session 还能用吗？**\n\nCookie与 Session，一般认为是两个独立的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。但为什么禁用Cookie就不能得到Session呢？因为Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。\n\n假定用户关闭Cookie的情况下使用Session，其实现途径有以下几种：\n\n1.  设置php.ini配置文件中的“session.use_trans_sid = 1”，或者编译时打开打开了“--enable-trans-sid”选项，让PHP自动跨页传递Session ID。\n\n2.  手动通过URL传值、隐藏表单传递Session ID。\n\n3.  用文件、数据库等形式保存Session ID，在跨页过程中手动调用。\n\n**70\\. spring mvc 和 struts 的区别是什么？**\n\n*   ### 拦截机制的不同\n\nStruts2是类级别的拦截，每次请求就会创建一个Action，和Spring整合时Struts2的ActionBean注入作用域是原型模式prototype，然后通过setter，getter吧request数据注入到属性。Struts2中，一个Action对应一个request，response上下文，在接收参数时，可以通过属性接收，这说明属性参数是让多个方法共享的。Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了，只能设计为多例。\n\nSpringMVC是方法级别的拦截，一个方法对应一个Request上下文，所以方法直接基本上是独立的，独享request，response数据。而每个方法同时又何一个url对应，参数的传递是直接注入到方法中的，是方法所独有的。处理结果通过ModeMap返回给框架。在Spring整合时，SpringMVC的Controller Bean默认单例模式Singleton，所以默认对所有的请求，只会创建一个Controller，有应为没有共享的属性，所以是线程安全的，如果要改变默认的作用域，需要添加@Scope注解修改。\n\nStruts2有自己的拦截Interceptor机制，SpringMVC这是用的是独立的Aop方式，这样导致Struts2的配置文件量还是比SpringMVC大。\n\n*   ### 底层框架的不同\n\nStruts2采用Filter（StrutsPrepareAndExecuteFilter）实现，SpringMVC（DispatcherServlet）则采用Servlet实现。Filter在容器启动之后即初始化；服务停止以后坠毁，晚于Servlet。Servlet在是在调用时初始化，先于Filter调用，服务停止后销毁。\n\n*   ### 性能方面\n\nStruts2是类级别的拦截，每次请求对应实例一个新的Action，需要加载所有的属性值注入，SpringMVC实现了零配置，由于SpringMVC基于方法的拦截，有加载一次单例模式bean注入。所以，SpringMVC开发效率和性能高于Struts2。\n\n*   ### 配置方面\n\nspring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高。\n\n**71\\. 如何避免 sql 注入？**\n\n1.  PreparedStatement（简单又有效的方法）\n\n2.  使用正则表达式过滤传入的参数\n\n3.  字符串过滤\n\n4.  JSP中调用该函数检查是否包函非法字符\n\n5.  JSP页面判断代码\n\n**72\\. 什么是 XSS 攻击，如何避免？**\n\nXSS攻击又称CSS,全称Cross Site Script  （跨站脚本攻击），其原理是攻击者向有XSS漏洞的网站中输入恶意的 HTML 代码，当用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。XSS 攻击类似于 SQL 注入攻击，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。 XSS是 Web 程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式。\n\nXSS防范的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。\n\n**73\\. 什么是 CSRF 攻击，如何避免？**\n\nCSRF（Cross-site request forgery）也被称为 one-click attack或者 session riding，中文全称是叫**跨站请求伪造**。一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。常用于盗取账号、转账、发送虚假消息等。攻击者利用网站对请求的验证漏洞而实现这样的攻击行为，网站能够确认请求来源于用户的浏览器，却不能验证请求是否源于用户的真实意愿下的操作行为。\n\n## 如何避免：\n\n### 1\\. 验证 HTTP Referer 字段\n\nHTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF\n 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。\n\n### 2\\. 使用验证码\n\n关键操作页面加上验证码，后台收到请求后通过判断验证码可以防御CSRF。但这种方法对用户不太友好。\n\n### 3\\. 在请求地址中添加token并验证\n\n CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。\n对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。\n 而对于 POST 请求来说，要在 form 的最后加上 <input type=\"hidden\" name=\"csrftoken\" value=\"tokenvalue\"/>，这样就把token以参数的形式加入请求了。\n\n### 4\\. 在HTTP 头中自定义属性并验证\n\n 这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。",[[1565072982720,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1565072983336,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1565072985705,["GJX@GJXAIOU",[[-1,34,"#"]],[35,35],[34,34]]],[1565072987952,["GJX@GJXAIOU",[[-1,62,"[Java团长](javascript:void(0);) _3月17日_"]],[62,99],[62,62]]],[1565072990407,["GJX@GJXAIOU",[[-1,58,"答案"]],[58,60],[58,58]]],[1565072994064,["GJX@GJXAIOU",[[1,58," "],[-1,3939," "],[1,3940," "]],[58,58],[59,59]]],[1565072995095,["GJX@GJXAIOU",[[1,59,"Java Web"]],[59,59],[67,67]]],[1565073000593,["GJX@GJXAIOU",[[-1,71,"**Java Web**"]],[71,83],[71,71]]],[1565073002217,["GJX@GJXAIOU",[[-1,73,"**"],[-1,100,"**"]],[80,80],[73,98]]],[1565073004672,["GJX@GJXAIOU",[[-1,451,"**"],[-1,478,"**"]],[465,465],[451,476]]],[1565073006551,["GJX@GJXAIOU",[[-1,761,"**"],[-1,785,"**"]],[774,774],[761,783]]],[1565073008079,["GJX@GJXAIOU",[[-1,1105,"**"],[-1,1135,"**"]],[1120,1120],[1105,1133]]],[1565073010095,["GJX@GJXAIOU",[[-1,2050,"**"],[-1,2075,"**"]],[2062,2062],[2050,2073]]],[1565073011224,["GJX@GJXAIOU",[[-1,2216,"**"],[-1,2255,"**"]],[2227,2227],[2216,2253]]],[1565073014025,["GJX@GJXAIOU",[[-1,2681,"**"],[-1,2715,"**"]],[2695,2695],[2681,2713]]],[1565073017514,["GJX@GJXAIOU",[[-1,3724,"**"],[-1,3743,"**"]],[3735,3735],[3724,3741]]],[1565073019807,["GJX@GJXAIOU",[[-1,3847,"**"],[-1,3870,"**"]],[3858,3858],[3847,3868]]],[1565073021106,["GJX@GJXAIOU",[[-1,4157,"**"],[-1,4181,"**"]],[4167,4167],[4157,4179]]],[1565073032360,["GJX@GJXAIOU",[[-1,4159,"\\"],[1,4160," "]],[4159,4160],[4159,4160]]],[1565073033208,["GJX@GJXAIOU",[[-1,4446,"\\"],[1,4447," "]],[4446,4447],[4446,4447]]],[1565073033740,["GJX@GJXAIOU",[[-1,4604,"\\"],[1,4605," "]],[4604,4605],[4604,4605]]],[1565073034220,["GJX@GJXAIOU",[[-1,4669,"\\"],[1,4670," "]],[4669,4670],[4669,4670]]],[1565073034631,["GJX@GJXAIOU",[[-1,5266,"\\"],[1,5267," "]],[5266,5267],[5266,5267]]],[1565073034937,["GJX@GJXAIOU",[[-1,75,"\\"],[1,76," "]],[75,76],[75,76]]],[1565073035171,["GJX@GJXAIOU",[[-1,453,"\\"],[1,454," "]],[453,454],[453,454]]],[1565073035579,["GJX@GJXAIOU",[[-1,763,"\\"],[1,764," "]],[763,764],[763,764]]],[1565073036147,["GJX@GJXAIOU",[[-1,1107,"\\"],[1,1108," "]],[1107,1108],[1107,1108]]],[1565073036655,["GJX@GJXAIOU",[[-1,2052,"\\"],[1,2053," "]],[2052,2053],[2052,2053]]],[1565073037178,["GJX@GJXAIOU",[[-1,2218,"\\"],[1,2219," "]],[2218,2219],[2218,2219]]],[1565073037784,["GJX@GJXAIOU",[[-1,2683,"\\"],[1,2684," "]],[2683,2684],[2683,2684]]],[1565073038436,["GJX@GJXAIOU",[[-1,3726,"\\"],[1,3727," "]],[3726,3727],[3726,3727]]],[1565073038995,["GJX@GJXAIOU",[[-1,3849,"\\"],[1,3850," "]],[3849,3850],[3849,3850]]],[1565073046111,["GJX@GJXAIOU",[[1,73,"## "]],[73,73],[101,101]]],[1565073047847,["GJX@GJXAIOU",[[1,73,"\n"]],[68,68],[69,69]]],[1565073050275,["GJX@GJXAIOU",[[1,69,"@toc"]],[69,69],[73,73]]],[1565073055063,["GJX@GJXAIOU",[[-1,77,"\n"]],[77,77],[76,76]]],[1565073058647,["GJX@GJXAIOU",[[-1,76,"\n"]],[76,76],[75,75]]],[1565073062449,["GJX@GJXAIOU",[[1,457,"## "]],[458,458],[485,485]]],[1565073065329,["GJX@GJXAIOU",[[-1,542,"\n"]],[542,542],[541,541]]],[1565073065976,["GJX@GJXAIOU",[[-1,569,"\n"]],[569,569],[568,568]]],[1565073066873,["GJX@GJXAIOU",[[-1,600,"\n"]],[600,600],[599,599]]],[1565073067498,["GJX@GJXAIOU",[[-1,623,"\n"]],[623,623],[622,622]]],[1565073068119,["GJX@GJXAIOU",[[-1,653,"\n"]],[653,653],[652,652]]],[1565073068712,["GJX@GJXAIOU",[[-1,676,"\n"]],[676,676],[675,675]]],[1565073069303,["GJX@GJXAIOU",[[-1,699,"\n"]],[699,699],[698,698]]],[1565073070712,["GJX@GJXAIOU",[[-1,734,"\n"]],[734,734],[733,733]]],[1565073073079,["GJX@GJXAIOU",[[1,487,"**"],[1,498,"**"]],[487,498],[487,502]]],[1565073076144,["GJX@GJXAIOU",[[1,766,"## "]],[767,767],[791,791]]],[1565073078391,["GJX@GJXAIOU",[[-1,844,"\n"]],[844,844],[843,843]]],[1565073079655,["GJX@GJXAIOU",[[-1,873,"\n"]],[873,873],[872,872]]],[1565073080529,["GJX@GJXAIOU",[[-1,958,"\n"]],[958,958],[957,957]]],[1565073081359,["GJX@GJXAIOU",[[-1,1029,"\n"]],[1029,1029],[1028,1028]]],[1565073083562,["GJX@GJXAIOU",[[1,1109,"## "]],[1111,1111],[1140,1140]]],[1565073088112,["GJX@GJXAIOU",[[1,2081,"## "]],[2081,2081],[2084,2084]]],[1565073090584,["GJX@GJXAIOU",[[-1,2081,"## "]],[2084,2084],[2081,2081]]],[1565073092024,["GJX@GJXAIOU",[[1,2057,"## "]],[2063,2063],[2083,2083]]],[1565073094112,["GJX@GJXAIOU",[[1,2226,"## "]],[2232,2232],[2266,2266]]],[1565073097832,["GJX@GJXAIOU",[[1,2537,"`"]],[2537,2537],[2538,2538]]],[1565073099536,["GJX@GJXAIOU",[[1,2565,"`"]],[2565,2565],[2566,2566]]],[1565073102921,["GJX@GJXAIOU",[[-1,2655,"\n"]],[2655,2655],[2654,2654]]],[1565073103814,["GJX@GJXAIOU",[[-1,2622,"\n"]],[2622,2622],[2621,2621]]],[1565073105471,["GJX@GJXAIOU",[[1,2694,"## "]],[2698,2698],[2729,2729]]],[1565073108799,["GJX@GJXAIOU",[[-1,2734," ### "]],[2734,2739],[2734,2734]]],[1565073110655,["GJX@GJXAIOU",[[-1,2742,"\n"]],[2742,2742],[2741,2741]]],[1565073112760,["GJX@GJXAIOU",[[-1,2733," "]],[2733,2733],[2732,2732]]],[1565073118272,["GJX@GJXAIOU",[[-1,3351,"### "]],[3350,3354],[3350,3350]]],[1565073122488,["GJX@GJXAIOU",[[-1,3528," ### "]],[3528,3533],[3528,3528]]],[1565073125080,["GJX@GJXAIOU",[[-1,3665,"  ### "]],[3665,3671],[3665,3665]]],[1565073130313,["GJX@GJXAIOU",[[1,3718,"## "]],[3722,3722],[3738,3738]]],[1565073132282,["GJX@GJXAIOU",[[-1,3772,"\n"]],[3772,3772],[3771,3771]]],[1565073132977,["GJX@GJXAIOU",[[-1,3791,"\n"]],[3791,3791],[3790,3790]]],[1565073133707,["GJX@GJXAIOU",[[-1,3801,"\n"]],[3801,3801],[3800,3800]]],[1565073134344,["GJX@GJXAIOU",[[-1,3825,"\n"]],[3825,3825],[3824,3824]]],[1565073136472,["GJX@GJXAIOU",[[1,3840,"## "]],[3846,3846],[3864,3864]]],[1565073139563,["GJX@GJXAIOU",[[1,4153,"## "]],[4158,4158],[4178,4178]]],[1565073144312,["GJX@GJXAIOU",[[-1,4430,"## "]],[4430,4433],[4430,4430]]],[1565073147266,["GJX@GJXAIOU",[[1,4430,"**"],[1,4435,"**"]],[4430,4435],[4430,4439]]],[1565073149489,["GJX@GJXAIOU",[[-1,4441,"###"]],[4441,4444],[4441,4441]]],[1565073150266,["GJX@GJXAIOU",[[1,4441,"-"]],[4441,4441],[4442,4442]]],[1565073153074,["GJX@GJXAIOU",[[-1,4443,"1 . "]],[4443,4447],[4443,4443]]],[1565073155723,["GJX@GJXAIOU",[[-1,4593,"### 2 ."],[1,4600,"-"]],[4593,4600],[4594,4594]]],[1565073155954,["GJX@GJXAIOU",[[1,4595," "]],[4594,4594],[4595,4595]]],[1565073158686,["GJX@GJXAIOU",[[-1,4653,"### 3 ."],[1,4660,"-"]],[4653,4660],[4654,4654]]],[1565073159075,["GJX@GJXAIOU",[[1,4655," "]],[4654,4654],[4655,4655]]],[1565073159986,["GJX@GJXAIOU",[[-1,4655," "]],[4655,4655],[4654,4654]]],[1565073165077,["GJX@GJXAIOU",[[-1,5244,"### 4 . "],[1,5252,"-"]],[5244,5252],[5245,5245]]],[1565073165587,["GJX@GJXAIOU",[[1,5245," "]],[5245,5245],[5246,5246]]]],null,"GJX@GJXAIOU"]]}