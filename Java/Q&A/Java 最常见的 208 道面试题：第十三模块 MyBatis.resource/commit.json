{"compress":true,"commitItems":[["cee5d0b6-2457-42d0-832c-bd5ef6db8f46",1563100205802,"## Java 最常见的 208 道面试题：第十三模块答案\n\n[Java团长](javascript:void(0);) _4月6日_\n\n**十三、Mybatis**\n\n**125\\. mybatis 中 #{}和 ${}的区别是什么？**\n\n*   #{}是预编译处理，${}是字符串替换；\n\n*   Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；\n\n*   Mybatis在处理${}时，就是把${}替换成变量的值；\n\n*   使用#{}可以有效的防止SQL注入，提高系统安全性。\n\n**126\\. mybatis 有几种分页方式？**\n\n1.  # 数组分页\n\n2.  # sql分页\n\n3.  # 拦截器分页\n\n4.  # RowBounds分页\n\n**128\\. mybatis 逻辑分页和物理分页的区别是什么？**\n\n*   物理分页速度上并不一定快于逻辑分页，逻辑分页速度上也并不一定快于物理分页。\n\n*   物理分页总是优于逻辑分页：没有必要将属于数据库端的压力加诸到应用端来，就算速度上存在优势,然而其它性能上的优点足以弥补这个缺点。\n\n**129\\. mybatis 是否支持延迟加载？延迟加载的原理是什么？**\n\nMybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。\n\n它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。\n\n当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。\n\n**130\\. 说一下 mybatis 的一级缓存和二级缓存？**\n\n一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。\n\n二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache/> ；\n\n对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。\n\n**131\\. mybatis 和 hibernate 的区别有哪些？**\n\n（1）Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。\n\n（2）Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。 \n\n（3）Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。 \n\n**132\\. mybatis 有哪些执行器（Executor）？**\n\n#### Mybatis有三种基本的执行器（Executor）：\n\n1.  **SimpleExecutor**：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。\n\n2.  **ReuseExecutor**：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。\n\n3.  **BatchExecutor**：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。\n\n**133\\. mybatis 分页插件的实现原理是什么？**\n\n分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。\n\n**134\\. mybatis 如何编写一个自定义插件？**\n\n转自：blog.csdn.net/qq_30051265/article/details/80266434\n\nMybatis自定义插件针对Mybatis四大对象（Executor、StatementHandler 、ParameterHandler 、ResultSetHandler ）进行拦截，具体拦截方式为： \n\n*   Executor：拦截执行器的方法(log记录) \n\n*   StatementHandler ：拦截Sql语法构建的处理 \n\n*   ParameterHandler ：拦截参数的处理 \n\n*   ResultSetHandler ：拦截结果集的处理 \n\nMybatis自定义插件必须实现Interceptor接口：\n\n```\npublic interface Interceptor {\n```\n\n> intercept方法：拦截器具体处理逻辑方法 \n> \n> plugin方法：根据签名signatureMap生成动态代理对象 \n> \n> setProperties方法：设置Properties属性\n\n自定义插件demo：\n\n```\n// ExamplePlugin.java\n```\n\n一个@Intercepts可以配置多个@Signature，@Signature中的参数定义如下： \n\n*   type：表示拦截的类，这里是Executor的实现类；\n\n*   method：表示拦截的方法，这里是拦截Executor的update方法；\n\n*   args：表示方法参数。",[[1563100156361,["GJX@GJXAIOU",[[-1,31,"[Java团长](javascript:void(0);) _4月6日_"]],[31,67],[31,31]]],[1563100166274,["GJX@GJXAIOU",[[1,192,"`"],[-1,1595," "],[1,1596," "],[-1,1670," "],[1,1671," "],[-1,2466," "],[1,2467," "],[-1,2497," "],[1,2498," "],[-1,2534," "],[1,2535," "],[-1,2566," "],[1,2567," "],[-1,2599," "],[1,2600," "],[-1,2699," "],[1,2700," "],[-1,2739," "],[1,2740," "],[-1,2870," "],[1,2871," "]],[192,192],[193,193]]],[1563100167314,["GJX@GJXAIOU",[[1,196,"`"]],[196,196],[197,197]]],[1563100169102,["GJX@GJXAIOU",[[1,202,"`"]],[202,202],[203,203]]],[1563100170045,["GJX@GJXAIOU",[[1,206,"`"]],[206,206],[207,207]]],[1563100175841,["GJX@GJXAIOU",[[-1,288,"\n"]],[288,288],[287,287]]],[1563100176602,["GJX@GJXAIOU",[[-1,300,"\n"]],[300,300],[299,299]]],[1563100177288,["GJX@GJXAIOU",[[-1,312,"\n"]],[312,312],[311,311]]],[1563100179856,["GJX@GJXAIOU",[[-1,276,"\n"]],[276,276],[275,275]]],[1563100191065,["GJX@GJXAIOU",[[-1,280,"#"]],[281,281],[280,280]]],[1563100192010,["GJX@GJXAIOU",[[-1,290,"#"]],[291,291],[290,290]]],[1563100192640,["GJX@GJXAIOU",[[-1,301,"#"]],[302,302],[301,301]]],[1563100193249,["GJX@GJXAIOU",[[-1,312,"#"]],[313,313],[312,312]]],[1563100246434,["GJX@GJXAIOU",[[-1,2564,"\n"]],[2564,2564],[2563,2563]]],[1563100247257,["GJX@GJXAIOU",[[-1,2532,"\n"]],[2532,2532],[2531,2531]]],[1563100247889,["GJX@GJXAIOU",[[-1,2495,"\n"]],[2495,2495],[2494,2494]]],[1563100248579,["GJX@GJXAIOU",[[-1,2464,"\n"]],[2464,2464],[2463,2463]]],[1563100258045,["GJX@GJXAIOU",[[1,2661,"    Object intercept(Invocation invocation) throws Throwable;\n    Object plugin(Object target);\n    void setProperties(Properties properties);\n}\n"]],[2630,2660],[2805,2805]]],[1563100261449,["GJX@GJXAIOU",[[-1,2811,"> "]],[2813,2813],[2811,2811]]],[1563100262264,["GJX@GJXAIOU",[[-1,2836,"> "]],[2838,2838],[2836,2836]]],[1563100262906,["GJX@GJXAIOU",[[-1,2837,">"]],[2838,2838],[2837,2837]]],[1563100263593,["GJX@GJXAIOU",[[-1,2873,">"]],[2874,2874],[2873,2873]]],[1563100264296,["GJX@GJXAIOU",[[-1,2875,">"]],[2876,2876],[2875,2875]]],[1563100264929,["GJX@GJXAIOU",[[-1,2873," "]],[2874,2874],[2873,2873]]],[1563100266945,["GJX@GJXAIOU",[[-1,2836," "]],[2837,2837],[2836,2836]]],[1563100267576,["GJX@GJXAIOU",[[-1,2871,"\n"]],[2871,2871],[2870,2870]]],[1563100268601,["GJX@GJXAIOU",[[-1,2871," "]],[2872,2872],[2871,2871]]],[1563100281098,["GJX@GJXAIOU",[[1,2941,"@Intercepts({@Signature(\n  type= Executor.class,\n  method = \"update\",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  public Object intercept(Invocation invocation) throws Throwable {\n  Object target = invocation.getTarget(); //被代理对象\n  Method method = invocation.getMethod(); //代理方法\n  Object[] args = invocation.getArgs(); //方法参数\n  // do something ...... 方法拦截前执行代码块\n  Object result = invocation.proceed();\n  // do something .......方法拦截后执行代码块\n  return result;\n  }\n  public Object plugin(Object target) {\n    return Plugin.wrap(target, this);\n  }\n  public void setProperties(Properties properties) {\n  }\n}\n"]],[2919,2940],[3599,3599]]],[1563100287066,["GJX@GJXAIOU",[[-1,3734,"\n"]],[3734,3734],[3733,3733]]],[1563100287907,["GJX@GJXAIOU",[[-1,3690,"\n"]],[3690,3690],[3689,3689]]],[1563100288961,["GJX@GJXAIOU",[[-1,3656,"\n"]],[3656,3656],[3655,3655]]]],null,"GJX@GJXAIOU"],["0e5f13af-1ae4-4911-8d4c-0ec55038713d",1569585435277,"## Java 最常见的 208 道面试题：第十三模块答案\n\n\n\n**十三、Mybatis**\n\n**125\\. mybatis 中 #{}和 ${}的区别是什么？**\n\n*   #{}是预编译处理，${}是字符串替换；\n\n*   Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；\n\n*   Mybatis在处理`${}`时，就是把`${}`替换成变量的值；\n\n*   使用#{}可以有效的防止SQL注入，提高系统安全性。\n\n**126\\. mybatis 有几种分页方式？**\n1.   数组分页\n2.   sql分页\n3.   拦截器分页\n4.   RowBounds分页\n\n**128\\. mybatis 逻辑分页和物理分页的区别是什么？**\n\n*   物理分页速度上并不一定快于逻辑分页，逻辑分页速度上也并不一定快于物理分页。\n\n*   物理分页总是优于逻辑分页：没有必要将属于数据库端的压力加诸到应用端来，就算速度上存在优势,然而其它性能上的优点足以弥补这个缺点。\n\n**129\\. mybatis 是否支持延迟加载？延迟加载的原理是什么？**\n\nMybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。\n\n它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。\n\n当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。\n\n**130\\. 说一下 mybatis 的一级缓存和二级缓存？**\n\n一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。\n\n二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache/> ；\n\n对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。\n\n**131\\. mybatis 和 hibernate 的区别有哪些？**\n\n（1）Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。\n\n（2）Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。 \n\n（3）Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。 \n\n**132\\. mybatis 有哪些执行器（Executor）？**\n\n#### Mybatis有三种基本的执行器（Executor）：\n\n1.  **SimpleExecutor**：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。\n\n2.  **ReuseExecutor**：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。\n\n3.  **BatchExecutor**：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。\n\n**133\\. mybatis 分页插件的实现原理是什么？**\n\n分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。\n\n**134\\. mybatis 如何编写一个自定义插件？**\n\n转自：blog.csdn.net/qq_30051265/article/details/80266434\n\nMybatis自定义插件针对Mybatis四大对象（Executor、StatementHandler 、ParameterHandler 、ResultSetHandler ）进行拦截，具体拦截方式为： \n*   Executor：拦截执行器的方法(log记录) \n*   StatementHandler ：拦截Sql语法构建的处理 \n*   ParameterHandler ：拦截参数的处理 \n*   ResultSetHandler ：拦截结果集的处理 \n\nMybatis自定义插件必须实现Interceptor接口：\n\n```\npublic interface Interceptor {\n    Object intercept(Invocation invocation) throws Throwable;\n    Object plugin(Object target);\n    void setProperties(Properties properties);\n}\n```\n\nintercept方法：拦截器具体处理逻辑方法 \nplugin方法：根据签名signatureMap生成动态代理对象 \nsetProperties方法：设置Properties属性\n\n自定义插件demo：\n\n```\n// ExamplePlugin.java\n@Intercepts({@Signature(\n  type= Executor.class,\n  method = \"update\",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  public Object intercept(Invocation invocation) throws Throwable {\n  Object target = invocation.getTarget(); //被代理对象\n  Method method = invocation.getMethod(); //代理方法\n  Object[] args = invocation.getArgs(); //方法参数\n  // do something ...... 方法拦截前执行代码块\n  Object result = invocation.proceed();\n  // do something .......方法拦截后执行代码块\n  return result;\n  }\n  public Object plugin(Object target) {\n    return Plugin.wrap(target, this);\n  }\n  public void setProperties(Properties properties) {\n  }\n}\n```\n\n一个@Intercepts可以配置多个@Signature，@Signature中的参数定义如下： \n*   type：表示拦截的类，这里是Executor的实现类；\n*   method：表示拦截的方法，这里是拦截Executor的update方法；\n*   args：表示方法参数。",[[1569585434749,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569585435533,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1569585437845,["GJX@GJXAIOU",[[1,33,"\n"]],[33,33],[34,34]]],[1569585438686,["GJX@GJXAIOU",[[-1,35,"#"]],[35,35],[34,34]]],[1569585440781,["GJX@GJXAIOU",[[1,66,"\n"]],[63,63],[64,64]]],[1569585442502,["GJX@GJXAIOU",[[1,64,"@toc"]],[64,64],[68,68]]],[1569585453109,["GJX@GJXAIOU",[[-1,60,"答案"]],[60,62],[60,60]]],[1569585454582,["GJX@GJXAIOU",[[1,60," Myb"]],[60,60],[64,64]]],[1569585455168,["GJX@GJXAIOU",[[-1,63,"b"]],[64,64],[63,63]]],[1569585456302,["GJX@GJXAIOU",[[1,63,"Batis"]],[63,63],[68,68]]],[1569585459513,["GJX@GJXAIOU",[[-1,79,"十三、Mybatis**\n\n**"]],[75,91],[75,75]]],[1569585467206,["GJX@GJXAIOU",[[-1,82,"\\"],[1,83," "]],[82,83],[82,83]]],[1569585467790,["GJX@GJXAIOU",[[-1,282,"\\"],[1,283," "]],[282,283],[282,283]]],[1569585468343,["GJX@GJXAIOU",[[-1,359,"\\"],[1,360," "]],[359,360],[359,360]]],[1569585468797,["GJX@GJXAIOU",[[-1,508,"\\"],[1,509," "]],[508,509],[508,509]]],[1569585469296,["GJX@GJXAIOU",[[-1,941,"\\"],[1,942," "]],[941,942],[941,942]]],[1569585469732,["GJX@GJXAIOU",[[-1,1370,"\\"],[1,1371," "]],[1370,1371],[1370,1371]]],[1569585470001,["GJX@GJXAIOU",[[-1,1702,"\\"],[1,1703," "]],[1702,1703],[1702,1703]]],[1569585470242,["GJX@GJXAIOU",[[-1,2178,"\\"],[1,2179," "]],[2178,2179],[2178,2179]]],[1569585470801,["GJX@GJXAIOU",[[-1,2306,"\\"],[1,2307," "]],[2306,2307],[2306,2307]]],[1569585476501,["GJX@GJXAIOU",[[1,77,"## "]],[86,86],[115,115]]],[1569585477327,["GJX@GJXAIOU",[[-1,80,"**"],[-1,113,"**"]],[115,115],[80,111]]],[1569585479200,["GJX@GJXAIOU",[[-1,276,"**"],[-1,300,"**"]],[291,291],[276,298]]],[1569585479698,["GJX@GJXAIOU",[[1,276,"## "]],[276,298],[301,301]]],[1569585481709,["GJX@GJXAIOU",[[-1,352,"**"],[-1,384,"**"]],[369,369],[352,382]]],[1569585482189,["GJX@GJXAIOU",[[1,352,"## "]],[352,382],[385,385]]],[1569585484645,["GJX@GJXAIOU",[[-1,138,"\n"]],[138,138],[137,137]]],[1569585486105,["GJX@GJXAIOU",[[-1,203,"\n"]],[203,203],[202,202]]],[1569585488349,["GJX@GJXAIOU",[[-1,241,"\n"]],[241,241],[240,240]]],[1569585497936,["GJX@GJXAIOU",[[-1,331,"4.   "]],[331,336],[331,331]]],[1569585498979,["GJX@GJXAIOU",[[-1,320,"3.   "]],[320,325],[320,320]]],[1569585500230,["GJX@GJXAIOU",[[-1,309,"2.  "]],[309,313],[309,309]]],[1569585501398,["GJX@GJXAIOU",[[-1,299,"1.  "]],[299,303],[299,299]]],[1569585502214,["GJX@GJXAIOU",[[-1,305," "]],[306,306],[305,305]]],[1569585502964,["GJX@GJXAIOU",[[-1,299," "]],[300,300],[299,299]]],[1569585504972,["GJX@GJXAIOU",[[1,299,"* "],[1,304,"* "],[1,310,"* "],[1,316,"* "]],[299,327],[301,335]]],[1569585508533,["GJX@GJXAIOU",[[-1,414,"\n"]],[414,414],[413,413]]],[1569585511317,["GJX@GJXAIOU",[[1,484,"## "]],[495,495],[525,525]]],[1569585511780,["GJX@GJXAIOU",[[-1,487,"**"],[-1,523,"**"]],[525,525],[487,521]]],[1569585515236,["GJX@GJXAIOU",[[-1,916,"**"],[-1,947,"**"]],[929,929],[916,945]]],[1569585515780,["GJX@GJXAIOU",[[1,916,"## "]],[916,945],[948,948]]],[1569585518198,["GJX@GJXAIOU",[[-1,1344,"**"],[-1,1379,"**"]],[1361,1361],[1344,1377]]],[1569585518614,["GJX@GJXAIOU",[[1,1344,"## "]],[1344,1377],[1380,1380]]],[1569585521283,["GJX@GJXAIOU",[[-1,1675,"**"],[-1,1708,"**"]],[1693,1693],[1675,1706]]],[1569585521740,["GJX@GJXAIOU",[[1,1675,"## "]],[1675,1706],[1709,1709]]],[1569585526645,["GJX@GJXAIOU",[[-1,1711,"####"]],[1711,1715],[1711,1711]]],[1569585532516,["GJX@GJXAIOU",[[-1,2146,"**"],[-1,2175,"**"]],[2160,2160],[2146,2173]]],[1569585533044,["GJX@GJXAIOU",[[1,2146,"## "]],[2146,2173],[2176,2176]]],[1569585535431,["GJX@GJXAIOU",[[-1,2273,"**"],[-1,2301,"**"]],[2287,2287],[2273,2299]]],[1569585535967,["GJX@GJXAIOU",[[1,2273,"## "]],[2273,2299],[2302,2302]]],[1569585542495,["GJX@GJXAIOU",[[-1,2304,"转自：blog.csdn.net/qq_30051265/article/details/80266434"]],[2304,2357],[2304,2304]]],[1569585544021,["GJX@GJXAIOU",[[-1,2305,"\n"]],[2305,2305],[2304,2304]]],[1569585544155,["GJX@GJXAIOU",[[-1,2304,"\n"]],[2304,2304],[2303,2303]]],[1569585549779,["GJX@GJXAIOU",[[-1,2858,"\n"]],[2858,2858],[2857,2857]]]],null,"GJX@GJXAIOU"]]}