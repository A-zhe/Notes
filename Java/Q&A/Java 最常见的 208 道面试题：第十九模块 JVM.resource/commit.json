{"compress":true,"commitItems":[["99e694b7-ab7a-453c-a95b-73df784adbea",1563100607655,"## Java 最常见的 208 道面试题：第十九模块答案\n\n[Java团长](javascript:void(0);) _4月14日_\n\n**十九、JVM**\n\n**194. 说一下 jvm 的主要组成部分？及其作用？**\n\n*   类加载器（ClassLoader）\n\n*   运行时数据区（Runtime Data Area）\n\n*   执行引擎（Execution Engine）\n\n*   本地库接口（Native Interface）\n\n组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\n\n**195. 说一下 jvm 运行时数据区？**\n\n*   程序计数器\n\n*   虚拟机栈\n\n*   本地方法栈\n\n*   堆\n\n*   方法区\n\n有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户进程的启动和结束而创建和销毁。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPZAzOTEq0Uds38t1AIc0XWGJp9eRCibzdb8QibHBVibg5mAgP7XAWXq8tCxhQ14WN6mPKSBNzZHFBYg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**196. 说一下堆栈的区别？**\n\n1\\. 栈内存存储的是局部变量而堆内存存储的是实体；\n\n2\\. 栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；\n\n3\\. 栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。\n\n**197. 队列和栈是什么？有什么区别？**\n\n*   队列和栈都是被用来预存储数据的。\n\n*   队列允许先进先出检索元素，但也有例外的情况，Deque 接口允许从两端检索元素。\n\n*   栈和队列很相似，但它运行对元素进行后进先出进行检索。\n\n**198. 什么是双亲委派模型？**\n\n在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。\n\n类加载器分类：\n\n*   启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分，用来加载Java_HOME/lib/目录中的，或者被 -Xbootclasspath 参数所指定的路径中并且被虚拟机识别的类库；\n\n*   其他类加载器：\n\n*   扩展类加载器（Extension ClassLoader）：负责加载<java_home style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; outline: 0px !important;\">\\lib\\ext目录或Java. ext. dirs系统变量指定的路径中的所有类库；</java_home>\n\n*   应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。\n\n双亲委派模型：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，这样所有的加载请求都会被传送到顶层的启动类加载器中，只有当父加载无法完成加载请求（它的搜索范围中没找到所需的类）时，子加载器才会尝试去加载类。\n\n**199. 说一下类加载的执行过程？**\n\n类加载分为以下 5 个步骤：\n\n1.  加载：根据查找路径找到相应的 class 文件然后导入；\n\n2.  检查：检查加载的 class 文件的正确性；\n\n3.  准备：给类中的静态变量分配内存空间；\n\n4.  解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；\n\n5.  初始化：对静态变量和静态代码块执行初始化工作。\n\n**200. 怎么判断对象是否可以被回收？**\n\n一般有两种方法来判断：\n\n*   引用计数器：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；\n\n*   可达性分析：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。\n\n**201. java 中都有哪些引用类型？**\n\n*   强引用\n\n*   软引用\n\n*   弱引用\n\n*   虚引用（幽灵引用/幻影引用）\n\n**202. 说一下 jvm 有哪些垃圾回收算法？**\n\n*   标记-清除算法\n\n*   标记-整理算法\n\n*   复制算法\n\n*   分代算法\n\n**203. 说一下 jvm 有哪些垃圾回收器？**\n\n*   Serial：最早的单线程串行垃圾回收器。\n\n*   Serial Old：Serial 垃圾回收器的老年版本，同样也是单线程的，可以作为 CMS 垃圾回收器的备选预案。\n\n*   ParNew：是 Serial 的多线程版本。\n\n*   Parallel 和 ParNew 收集器类似是多线程的，但 Parallel 是吞吐量优先的收集器，可以牺牲等待时间换取系统的吞吐量。\n\n*   Parallel Old 是 Parallel 老生代版本，Parallel 使用的是复制的内存回收算法，Parallel Old 使用的是标记-整理的内存回收算法。\n\n*   CMS：一种以获得最短停顿时间为目标的收集器，非常适用 B/S 系统。\n\n*   G1：一种兼顾吞吐量和停顿时间的 GC 实现，是 JDK 9 以后的默认 GC 选项。\n\n**204. 详细介绍一下 CMS 垃圾回收器？**\n\nCMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。\n\nCMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。\n\n**205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？**\n\n*   新生代回收器：Serial、ParNew、Parallel Scavenge\n\n*   老年代回收器：Serial Old、Parallel Old、CMS\n\n*   整堆回收器：G1\n\n新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。\n\n**206. 简述分代垃圾回收器是怎么工作的？**\n\n分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。\n\n新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下：\n\n*   把 Eden + From Survivor 存活的对象放入 To Survivor 区；\n\n*   清空 Eden 和 From Survivor 分区；\n\n*   From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。\n\n每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。\n\n老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。\n\n**207. 说一下 jvm 调优的工具？**\n\nJDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 jconsole 和 jvisualvm 这两款视图监控工具。\n\n*   jconsole：用于对 JVM 中的内存、线程和类等进行监控；\n\n*   jvisualvm：JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。\n\n**208. 常用的 jvm 调优的参数都有哪些？**\n\n*   -Xms2g：初始化推大小为 2g；\n\n*   -Xmx2g：堆最大内存为 2g；\n\n*   -XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；\n\n*   -XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；\n\n*   –XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；\n\n*   -XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；\n\n*   -XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；\n\n*   -XX:+PrintGC：开启打印 gc 信息；\n\n*   -XX:+PrintGCDetails：打印 gc 详细信息。",[[1563100582465,["GJX@GJXAIOU",[[-1,136,"\n"]],[136,136],[135,135]]],[1563100584137,["GJX@GJXAIOU",[[-1,166,"\n"]],[166,166],[165,165]]],[1563100584857,["GJX@GJXAIOU",[[-1,193,"\n"]],[193,193],[192,192]]],[1563100585952,["GJX@GJXAIOU",[[-1,113,"\n"]],[113,113],[112,112]]],[1563100591699,["GJX@GJXAIOU",[[-1,490,"\n"]],[490,490],[489,489]]],[1563100592529,["GJX@GJXAIOU",[[-1,499,"\n"]],[499,499],[498,498]]],[1563100593241,["GJX@GJXAIOU",[[-1,509,"\n"]],[509,509],[508,508]]],[1563100593859,["GJX@GJXAIOU",[[-1,515,"\n"]],[515,515],[514,514]]],[1563100607441,["GJX@GJXAIOU",[[-1,767,"\\"]],[768,768],[767,767]]],[1563100610161,["GJX@GJXAIOU",[[-1,794,"\\"]],[795,795],[794,794]]],[1563100613626,["GJX@GJXAIOU",[[-1,792,"\n"]],[792,792],[791,791]]],[1563100615985,["GJX@GJXAIOU",[[-1,825,"\n"]],[825,825],[824,824]]],[1563100623050,["GJX@GJXAIOU",[[-1,826,"\\"]],[827,827],[826,826]]],[1563100629738,["GJX@GJXAIOU",[[-1,922,"\n"]],[922,922],[921,921]]],[1563100631785,["GJX@GJXAIOU",[[-1,967,"\n"]],[967,967],[966,966]]],[1563100663324,["GJX@GJXAIOU",[[-1,1881,"\n"]],[1881,1881],[1880,1880]]],[1563100665859,["GJX@GJXAIOU",[[-1,1908,"\n"]],[1908,1908],[1907,1907]]],[1563100669866,["GJX@GJXAIOU",[[-1,1931,"\n"]],[1931,1931],[1930,1930]]],[1563100673537,["GJX@GJXAIOU",[[-1,1993,"\n"]],[1993,1993],[1992,1992]]],[1563100681201,["GJX@GJXAIOU",[[-1,2264,"\n"]],[2264,2264],[2263,2263]]],[1563100681985,["GJX@GJXAIOU",[[-1,2272,"\n"]],[2272,2272],[2271,2271]]],[1563100682826,["GJX@GJXAIOU",[[-1,2280,"\n"]],[2280,2280],[2279,2279]]],[1563100684569,["GJX@GJXAIOU",[[-1,2255,"\n"]],[2255,2255],[2254,2254]]],[1563100685969,["GJX@GJXAIOU",[[-1,2327,"\n"]],[2327,2327],[2326,2326]]],[1563100687105,["GJX@GJXAIOU",[[-1,2339,"\n"]],[2339,2339],[2338,2338]]],[1563100687817,["GJX@GJXAIOU",[[-1,2351,"\n"]],[2351,2351],[2350,2350]]],[1563100688577,["GJX@GJXAIOU",[[-1,2360,"\n"]],[2360,2360],[2359,2359]]],[1563100694554,["GJX@GJXAIOU",[[-1,2397,"\n"]],[2397,2397],[2396,2396]]],[1563100695154,["GJX@GJXAIOU",[[-1,2423,"\n"]],[2423,2423],[2422,2422]]],[1563100696145,["GJX@GJXAIOU",[[-1,2486,"\n"]],[2486,2486],[2485,2485]]],[1563100696827,["GJX@GJXAIOU",[[-1,2514,"\n"]],[2514,2514],[2513,2513]]],[1563100698242,["GJX@GJXAIOU",[[-1,2587,"\n"]],[2587,2587],[2586,2586]]],[1563100699026,["GJX@GJXAIOU",[[-1,2675,"\n"]],[2675,2675],[2674,2674]]],[1563100699812,["GJX@GJXAIOU",[[-1,2715,"\n"]],[2715,2715],[2714,2714]]],[1563100703098,["GJX@GJXAIOU",[[-1,3153,"\n"]],[3153,3153],[3152,3152]]],[1563100703898,["GJX@GJXAIOU",[[-1,3109,"\n"]],[3109,3109],[3108,3108]]],[1563100704794,["GJX@GJXAIOU",[[-1,3191,"\n"]],[3191,3191],[3190,3190]]],[1563100709012,["GJX@GJXAIOU",[[-1,3436,"\n"]],[3436,3436],[3435,3435]]],[1563100710249,["GJX@GJXAIOU",[[-1,3486,"\n"]],[3486,3486],[3485,3485]]],[1563100710937,["GJX@GJXAIOU",[[-1,3518,"\n"]],[3518,3518],[3517,3517]]],[1563100713340,["GJX@GJXAIOU",[[-1,3871,"\n"]],[3871,3871],[3870,3870]]],[1563100714017,["GJX@GJXAIOU",[[-1,3908,"\n"]],[3908,3908],[3907,3907]]],[1563100715632,["GJX@GJXAIOU",[[-1,4001,"\n"]],[4001,4001],[4000,4000]]],[1563100716419,["GJX@GJXAIOU",[[-1,4024,"\n"]],[4024,4024],[4023,4023]]],[1563100717011,["GJX@GJXAIOU",[[-1,4046,"\n"]],[4046,4046],[4045,4045]]],[1563100717601,["GJX@GJXAIOU",[[-1,4086,"\n"]],[4086,4086],[4085,4085]]],[1563100718564,["GJX@GJXAIOU",[[-1,4141,"\n"]],[4141,4141],[4140,4140]]],[1563100719361,["GJX@GJXAIOU",[[-1,4196,"\n"]],[4196,4196],[4195,4195]]],[1563100720082,["GJX@GJXAIOU",[[-1,4256,"\n"]],[4256,4256],[4255,4255]]],[1563100721738,["GJX@GJXAIOU",[[-1,4315,"\n"]],[4315,4315],[4314,4314]]],[1563100722579,["GJX@GJXAIOU",[[-1,4344,"\n"]],[4344,4344],[4343,4343]]]],null,"GJX@GJXAIOU"],["e6787ab3-052e-4571-bb99-505a25d3b6c7",1569585615887,"## Java 最常见的 208 道面试题：第十九模块答案\n\n[Java团长](javascript:void(0);) _4月14日_\n\n**十九、JVM**\n\n**194. 说一下 jvm 的主要组成部分？及其作用？**\n*   类加载器（ClassLoader）\n*   运行时数据区（Runtime Data Area）\n*   执行引擎（Execution Engine）\n*   本地库接口（Native Interface）\n\n组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\n\n**195. 说一下 jvm 运行时数据区？**\n\n*   程序计数器\n*   虚拟机栈\n*   本地方法栈\n*   堆\n*   方法区\n\n有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户进程的启动和结束而创建和销毁。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPZAzOTEq0Uds38t1AIc0XWGJp9eRCibzdb8QibHBVibg5mAgP7XAWXq8tCxhQ14WN6mPKSBNzZHFBYg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**196. 说一下堆栈的区别？**\n\n1. 栈内存存储的是局部变量而堆内存存储的是实体；\n2. 栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；\n3. 栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。\n\n**197. 队列和栈是什么？有什么区别？**\n\n*   队列和栈都是被用来预存储数据的。\n*   队列允许先进先出检索元素，但也有例外的情况，Deque 接口允许从两端检索元素。\n*   栈和队列很相似，但它运行对元素进行后进先出进行检索。\n\n**198. 什么是双亲委派模型？**\n\n在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。\n\n类加载器分类：\n\n*   启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分，用来加载Java_HOME/lib/目录中的，或者被 -Xbootclasspath 参数所指定的路径中并且被虚拟机识别的类库；\n\n*   其他类加载器：\n\n*   扩展类加载器（Extension ClassLoader）：负责加载<java_home style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; outline: 0px !important;\">\\lib\\ext目录或Java. ext. dirs系统变量指定的路径中的所有类库；</java_home>\n\n*   应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。\n\n双亲委派模型：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，这样所有的加载请求都会被传送到顶层的启动类加载器中，只有当父加载无法完成加载请求（它的搜索范围中没找到所需的类）时，子加载器才会尝试去加载类。\n\n**199. 说一下类加载的执行过程？**\n\n类加载分为以下 5 个步骤：\n\n1.  加载：根据查找路径找到相应的 class 文件然后导入；\n2.  检查：检查加载的 class 文件的正确性；\n3.  准备：给类中的静态变量分配内存空间；\n4.  解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；\n5.  初始化：对静态变量和静态代码块执行初始化工作。\n\n**200. 怎么判断对象是否可以被回收？**\n\n一般有两种方法来判断：\n\n*   引用计数器：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；\n\n*   可达性分析：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。\n\n**201. java 中都有哪些引用类型？**\n*   强引用\n*   软引用\n*   弱引用\n*   虚引用（幽灵引用/幻影引用）\n\n**202. 说一下 jvm 有哪些垃圾回收算法？**\n*   标记-清除算法\n*   标记-整理算法\n*   复制算法\n*   分代算法\n\n**203. 说一下 jvm 有哪些垃圾回收器？**\n*   Serial：最早的单线程串行垃圾回收器。\n*   Serial Old：Serial 垃圾回收器的老年版本，同样也是单线程的，可以作为 CMS 垃圾回收器的备选预案。\n*   ParNew：是 Serial 的多线程版本。\n*   Parallel 和 ParNew 收集器类似是多线程的，但 Parallel 是吞吐量优先的收集器，可以牺牲等待时间换取系统的吞吐量。\n*   Parallel Old 是 Parallel 老生代版本，Parallel 使用的是复制的内存回收算法，Parallel Old 使用的是标记-整理的内存回收算法。\n*   CMS：一种以获得最短停顿时间为目标的收集器，非常适用 B/S 系统。\n*   G1：一种兼顾吞吐量和停顿时间的 GC 实现，是 JDK 9 以后的默认 GC 选项。\n\n**204. 详细介绍一下 CMS 垃圾回收器？**\n\nCMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。\n\nCMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。\n\n**205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？**\n*   新生代回收器：Serial、ParNew、Parallel Scavenge\n*   老年代回收器：Serial Old、Parallel Old、CMS\n*   整堆回收器：G1\n\n新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。\n\n**206. 简述分代垃圾回收器是怎么工作的？**\n\n分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。\n\n新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下：\n*   把 Eden + From Survivor 存活的对象放入 To Survivor 区；\n*   清空 Eden 和 From Survivor 分区；\n*   From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。\n\n每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。\n\n老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。\n\n**207. 说一下 jvm 调优的工具？**\n\nJDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 jconsole 和 jvisualvm 这两款视图监控工具。\n*   jconsole：用于对 JVM 中的内存、线程和类等进行监控；\n*   jvisualvm：JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。\n\n**208. 常用的 jvm 调优的参数都有哪些？**\n*   -Xms2g：初始化推大小为 2g；\n*   -Xmx2g：堆最大内存为 2g；\n*   -XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；\n*   -XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；\n*   –XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；\n*   -XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；\n*   -XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；\n*   -XX:+PrintGC：开启打印 gc 信息；\n*   -XX:+PrintGCDetails：打印 gc 详细信息。",[[1569585563364,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569585564139,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1569585566316,["GJX@GJXAIOU",[[-1,34,"#"]],[34,34],[33,33]]],[1569585568006,["GJX@GJXAIOU",[[-1,63,"[Java团长](javascript:void(0);) _4月14日_\n\n"]],[62,101],[62,62]]],[1569585570219,["GJX@GJXAIOU",[[-1,59,"答案"]],[59,61],[59,59]]],[1569585570654,["GJX@GJXAIOU",[[-1,59,""],[1,59," "],[-1,79," 说一下 jvm "],[1,88," 说一下 jvm "],[-1,218," "],[1,219," "],[-1,242," "],[1,243," "],[-1,247," "],[1,248," "],[-1,271," "],[1,272," "],[-1,276," "],[1,277," "],[-1,302," JVM "],[1,307," JVM "],[-1,359," "],[1,360," "],[-1,385," CPU "],[1,390," CPU "],[-1,421," "],[1,422," "],[-1,451," 说一下 jvm "],[1,460," 说一下 jvm "],[-1,743," "],[1,744," "],[-1,873," "],[1,874," "],[-1,944," "],[1,945," "],[-1,996," "],[1,997," "],[-1,1061," JVM "],[1,1066," JVM "],[-1,1109," "],[1,1110," "],[-1,1115," "],[1,1116," "],[-1,1121," JVM "],[1,1126," JVM "],[-1,1135," "],[1,1136," "],[-1,1141," "],[1,1142," "],[-1,1176," "],[1,1177," "],[-1,1227," "],[1,1228," "],[-1,1243," "],[1,1244," "],[-1,1300," "],[1,1301," "],[-1,1328," "],[1,1329," "],[-1,1347," "],[1,1348," "],[-1,1359," "],[1,1360," "],[-1,1388," "],[1,1389," "],[-1,1401," "],[1,1402," "],[-1,1419," "],[1,1420," "],[-1,1425," "],[1,1426," "],[-1,1449," "],[1,1450," "],[-1,1462," "],[1,1463," "],[-1,1471," 0px "],[1,1476," 0px "],[-1,1505," "],[1,1506," "],[-1,1510," "],[1,1511," "],[-1,1569," "],[1,1570," "],[-1,1806," "],[1,1807," "],[-1,1830," 5 "],[1,1833," 5 "],[-1,1857," "],[1,1858," "],[-1,1863," "],[1,1864," "],[-1,1884," "],[1,1885," "],[-1,1890," "],[1,1891," "],[-1,2019," "],[1,2020," "],[-1,2084," "],[1,2085," "],[-1,2096," "],[1,2097," "],[-1,2105," 0 "],[1,2108," 0 "],[-1,2147," GC "],[1,2151," GC "],[-1,2156," "],[1,2157," "],[-1,2184," GC "],[1,2188," GC "],[-1,2193," "],[1,2194," "],[-1,2227," "],[1,2228," "],[-1,2232," "],[1,2233," "],[-1,2296," 说一下 jvm "],[1,2305," 说一下 jvm "],[-1,2367," 说一下 jvm "],[1,2376," 说一下 jvm "],[-1,2424," "],[1,2425," "],[-1,2435," "],[1,2436," "],[-1,2460," CMS "],[1,2465," CMS "],[-1,2489," "],[1,2490," "],[-1,2496," "],[1,2497," "],[-1,2517," 和 "],[1,2520," 和 "],[-1,2526," "],[1,2527," "],[-1,2539," "],[1,2540," "],[-1,2548," "],[1,2549," "],[-1,2590," Old 是 "],[1,2597," Old 是 "],[-1,2605," "],[1,2606," "],[-1,2620," "],[1,2621," "],[-1,2643," Old "],[1,2648," Old "],[-1,2697," B/S "],[1,2702," B/S "],[-1,2726," GC "],[1,2730," GC "],[-1,2734," JDK 9 "],[1,2741," JDK 9 "],[-1,2746," GC "],[1,2750," GC "],[-1,2761," "],[1,2762," "],[-1,2768," CMS "],[1,2773," CMS "],[-1,2786," 是英文 "],[1,2791," 是英文 "],[-1,2801," "],[1,2802," "],[-1,2812," "],[1,2813," "],[-1,2876," JVM "],[1,2881," JVM "],[-1,2916," CMS "],[1,2921," CMS "],[-1,2932," "],[1,2933," "],[-1,2952," gc "],[1,2956," gc "],[-1,2993," "],[1,2994," "],[-1,3004," "],[1,3005," "],[-1,3009," "],[1,3010," "],[-1,3020," CMS 会采用 "],[1,3029," CMS 会采用 "],[-1,3035," Old "],[1,3040," Old "],[-1,3133," "],[1,3134," "],[-1,3160," "],[1,3161," "],[-1,3173," "],[1,3174," "],[-1,3272," "],[1,3273," "],[-1,3326," "],[1,3327," "],[-1,3340," "],[1,3341," "],[-1,3364," 3 "],[1,3367," 3 "],[-1,3378," "],[1,3379," "],[-1,3392," "],[1,3393," "],[-1,3410," "],[1,3411," "],[-1,3432," "],[1,3433," "],[-1,3437," + "],[1,3440," + "],[-1,3444," "],[1,3445," "],[-1,3453," "],[1,3454," "],[-1,3461," To "],[1,3465," To "],[-1,3473," "],[1,3474," "],[-1,3483," "],[1,3484," "],[-1,3488," 和 "],[1,3491," 和 "],[-1,3495," "],[1,3496," "],[-1,3504," "],[1,3505," "],[-1,3517," "],[1,3518," "],[-1,3526," 和 To "],[1,3532," 和 To "],[-1,3540," "],[1,3541," "],[-1,3550," "],[1,3551," "],[-1,3559," 变 To "],[1,3565," 变 To "],[-1,3576," "],[1,3577," "],[-1,3585," 变 "],[1,3588," 变 "],[-1,3592," "],[1,3593," "],[-1,3607," "],[1,3608," "],[-1,3612," "],[1,3613," "],[-1,3621," 到 To "],[1,3627," 到 To "],[-1,3635," "],[1,3636," "],[-1,3649," "],[1,3650," "],[-1,3658," "],[1,3659," "],[-1,3667," "],[1,3668," "],[-1,3771," 说一下 jvm "],[1,3780," 说一下 jvm "],[-1,3793," "],[1,3794," "],[-1,3807," JDK 的 bin "],[1,3818," JDK 的 bin "],[-1,3829," "],[1,3830," "],[-1,3838," 和 "],[1,3841," 和 "],[-1,3850," "],[1,3851," "],[-1,3878," JVM "],[1,3883," JVM "],[-1,3916," "],[1,3917," "],[-1,3957," "],[1,3958," "],[-1,3970," 常用的 jvm "],[1,3979," 常用的 jvm "],[-1,4010," "],[1,4011," "],[-1,4032," "],[1,4033," "],[-1,4071," "],[1,4072," "],[-1,4106," "],[1,4107," "],[-1,4111," 和 "],[1,4114," 和 "],[-1,4122," 比例为 "],[1,4127," 比例为 "],[-1,4157," "],[1,4158," "],[-1,4164," + "],[1,4167," + "],[-1,4173," Old "],[1,4178," Old "],[-1,4217," "],[1,4218," "],[-1,4224," + "],[1,4227," + "],[-1,4233," Old "],[1,4238," Old "],[-1,4279," CMS + "],[1,4286," CMS + "],[-1,4292," Old "],[1,4297," Old "],[-1,4327," gc "],[1,4331," gc "],[-1,4361," gc "],[1,4365," gc "]],[59,59],[60,60]]],[1569585571661,["GJX@GJXAIOU",[[1,60,"JVM"]],[60,60],[63,63]]],[1569585575452,["GJX@GJXAIOU",[[-1,65,"**十九、JVM**"]],[64,75],[65,65]]],[1569585576958,["GJX@GJXAIOU",[[1,65,"@toc"]],[65,65],[69,69]]],[1569585580623,["GJX@GJXAIOU",[[-1,71,"**"],[-1,99,"**"]],[79,79],[71,97]]],[1569585581087,["GJX@GJXAIOU",[[1,71,"## "]],[71,97],[100,100]]],[1569585584527,["GJX@GJXAIOU",[[-1,442,"**"],[-1,464,"**"]],[449,449],[442,462]]],[1569585584996,["GJX@GJXAIOU",[[1,442,"## "]],[442,462],[465,465]]],[1569585590918,["GJX@GJXAIOU",[[-1,733,"**"],[-1,749,"**"]],[742,742],[733,747]]],[1569585591348,["GJX@GJXAIOU",[[1,733,"## "]],[733,747],[750,750]]],[1569585593451,["GJX@GJXAIOU",[[-1,862,"**"],[-1,883,"**"]],[872,872],[862,881]]],[1569585593988,["GJX@GJXAIOU",[[1,862,"## "]],[862,881],[884,884]]],[1569585595887,["GJX@GJXAIOU",[[-1,984,"**"],[-1,1001,"**"]],[994,994],[984,999]]],[1569585596436,["GJX@GJXAIOU",[[1,984,"## "]],[984,999],[1002,1002]]],[1569585602071,["GJX@GJXAIOU",[[1,1311,"`"]],[1311,1311],[1312,1312]]],[1569585606599,["GJX@GJXAIOU",[[1,1483,"`"]],[1483,1483],[1484,1484]]],[1569585622454,["GJX@GJXAIOU",[[1,1484," `"]],[1484,1484],[1486,1486]]],[1569585624329,["GJX@GJXAIOU",[[1,1494,"` "]],[1494,1494],[1496,1496]]],[1569585635965,["GJX@GJXAIOU",[[1,1655,"**"],[1,1661,"**"]],[1655,1661],[1655,1665]]],[1569585655072,["GJX@GJXAIOU",[[-1,1260,"*   其他类加载器：\n"]],[1259,1271],[1259,1259]]],[1569585655527,["GJX@GJXAIOU",[[-1,1260,"\n"]],[1259,1259],[1258,1258]]],[1569585664773,["GJX@GJXAIOU",[[1,1140,"- "]],[1140,1140],[1142,1142]]],[1569585670004,["GJX@GJXAIOU",[[1,1151,"  "],[1,1261,"  "],[1,1262,"  "],[1,1532,"  "],[1,1533,"  "]],[1151,1642],[1151,1652]]],[1569585676349,["GJX@GJXAIOU",[[1,1802,"## "]],[1809,1809],[1826,1826]]],[1569585677140,["GJX@GJXAIOU",[[-1,1805,"**"],[-1,1824,"**"]],[1826,1826],[1805,1822]]],[1569585681253,["GJX@GJXAIOU",[[-1,2014,"**"],[-1,2035,"**"]],[2023,2023],[2014,2033]]],[1569585681687,["GJX@GJXAIOU",[[1,2014,"## "]],[2014,2033],[2036,2036]]],[1569585684707,["GJX@GJXAIOU",[[-1,2221,"**"],[-1,2243,"**"]],[2234,2234],[2221,2241]]],[1569585685220,["GJX@GJXAIOU",[[1,2221,"## "]],[2221,2241],[2244,2244]]],[1569585687431,["GJX@GJXAIOU",[[-1,2289,"**"],[-1,2314,"**"]],[2298,2298],[2289,2312]]],[1569585687840,["GJX@GJXAIOU",[[1,2289,"## "]],[2289,2312],[2315,2315]]],[1569585689891,["GJX@GJXAIOU",[[-1,2359,"**"],[-1,2383,"**"]],[2373,2373],[2359,2381]]],[1569585690308,["GJX@GJXAIOU",[[1,2359,"## "]],[2359,2381],[2384,2384]]],[1569585692437,["GJX@GJXAIOU",[[-1,2752,"**"],[-1,2776,"**"]],[2763,2763],[2752,2774]]],[1569585692855,["GJX@GJXAIOU",[[1,2752,"## "]],[2752,2774],[2777,2777]]],[1569585694812,["GJX@GJXAIOU",[[-1,3059,"**"],[-1,3093,"**"]],[3069,3069],[3059,3091]]],[1569585695220,["GJX@GJXAIOU",[[1,3059,"## "]],[3059,3091],[3094,3094]]],[1569585697325,["GJX@GJXAIOU",[[-1,3261,"**"],[-1,3284,"**"]],[3272,3272],[3261,3282]]],[1569585697772,["GJX@GJXAIOU",[[1,3261,"## "]],[3261,3282],[3285,3285]]],[1569585700591,["GJX@GJXAIOU",[[-1,3759,"**"],[-1,3780,"**"]],[3768,3768],[3759,3778]]],[1569585701005,["GJX@GJXAIOU",[[1,3759,"## "]],[3759,3778],[3781,3781]]],[1569585703479,["GJX@GJXAIOU",[[-1,3957,"**"],[-1,3982,"**"]],[3965,3965],[3957,3980]]],[1569585703926,["GJX@GJXAIOU",[[1,3957,"## "]],[3957,3980],[3983,3983]]]],null,"GJX@GJXAIOU"]]}