{"compress":true,"commitItems":[["ab70090c-eef2-456c-89c3-eb4c925f6080",1563100368372,"## Java 最常见的 208 道面试题：第十四模块答案\n\n[Java团长](javascript:void(0);) _4月8日_\n\n**十四、RabbitMQ**\n\n**135\\. rabbitmq 的使用场景有哪些？**\n\n①. 跨系统的异步通信，所有需要异步交互的地方都可以使用消息队列。就像我们除了打电话（同步）以外，还需要发短信，发电子邮件（异步）的通讯方式。\n\n②. 多个应用之间的耦合，由于消息是平台无关和语言无关的，而且语义上也不再是函数调用，因此更适合作为多个应用之间的松耦合的接口。基于消息队列的耦合，不需要发送方和接收方同时在线。在企业应用集成（EAI）中，文件传输，共享数据库，消息队列，远程过程调用都可以作为集成的方法。\n\n③. 应用内的同步变异步，比如订单处理，就可以由前端应用将订单信息放到队列，后端应用从队列里依次获得消息处理，高峰时的大量订单可以积压在队列里慢慢处理掉。由于同步通常意味着阻塞，而大量线程的阻塞会降低计算机的性能。\n\n④. 消息驱动的架构（EDA），系统分解为消息队列，和消息制造者和消息消费者，一个处理流程可以根据需要拆成多个阶段（Stage），阶段之间用队列连接起来，前一个阶段处理的结果放入队列，后一个阶段从队列中获取消息继续处理。\n\n⑤. 应用需要更灵活的耦合方式，如发布订阅，比如可以指定路由规则。\n\n⑥. 跨局域网，甚至跨城市的通讯（CDN行业），比如北京机房与广州机房的应用程序的通信。\n\n**136\\. rabbitmq 有哪些重要的角色？**\n\nRabbitMQ 中重要的角色有：生产者、消费者和代理：\n\n*   生产者：消息的创建者，负责创建和推送数据到消息服务器；\n\n*   消费者：消息的接收方，用于处理数据和确认消息；\n\n*   代理：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。\n\n**137\\. rabbitmq 有哪些重要的组件？**\n\n*   ConnectionFactory（连接管理器）：应用程序与Rabbit之间建立连接的管理器，程序代码中使用。\n\n*   Channel（信道）：消息推送使用的通道。\n\n*   Exchange（交换器）：用于接受、分配消息。\n\n*   Queue（队列）：用于存储生产者的消息。\n\n*   RoutingKey（路由键）：用于把生成者的数据分配到交换器上。\n\n*   BindingKey（绑定键）：用于把交换器的消息绑定到队列上。\n\n**138\\. rabbitmq 中 vhost 的作用是什么？**\n\nvhost 可以理解为虚拟 broker ，即 mini-RabbitMQ  server。其内部均含有独立的 queue、exchange 和 binding 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段（一个典型的例子就是不同的应用可以跑在不同的 vhost 中）。 \n\n**139\\. rabbitmq 的消息是怎么发送的？**\n\n首先客户端必须连接到 RabbitMQ 服务器才能发布和消费消息，客户端和 rabbit server 之间会创建一个 tcp 连接，一旦 tcp 打开并通过了认证（认证就是你发送给 rabbit 服务器的用户名和密码），你的客户端和 RabbitMQ 就创建了一条 amqp 信道（channel），信道是创建在“真实” tcp 上的虚拟连接，amqp 命令都是通过信道发送出去的，每个信道都会有一个唯一的 id，不论是发布消息，订阅队列都是通过这个信道完成的。\n\n**140\\. rabbitmq 怎么保证消息的稳定性？**\n\n*   提供了事务的功能。\n\n*   通过将 channel 设置为 confirm（确认）模式。\n\n**141\\. rabbitmq 怎么避免消息丢失？**\n\n1.  #### 消息持久化\n\n2.  #### ACK确认机制\n\n3.  #### 设置集群镜像模式\n\n4.  #### 消息补偿机制\n\n**142\\. 要保证消息持久化成功的条件有哪些？**\n\n1.  声明队列必须设置持久化 durable 设置为 true.\n\n2.  消息推送投递模式必须设置持久化，deliveryMode 设置为 2（持久）。\n\n3.  消息已经到达持久化交换器。\n\n4.  消息已经到达持久化队列。\n\n以上四个条件都满足才能保证消息持久化成功。\n\n**143\\. rabbitmq 持久化有什么缺点？**\n\n持久化的缺地就是降低了服务器的吞吐量，因为使用的是磁盘而非内存存储，从而降低了吞吐量。可尽量使用 ssd 硬盘来缓解吞吐量的问题。\n\n**144\\. rabbitmq 有几种广播类型？**\n\n### 三种广播模式：\n\n1.  fanout: 所有bind到此exchange的queue都可以接收消息（纯广播，绑定到RabbitMQ的接受者都能收到消息）；\n\n2.  direct: 通过routingKey和exchange决定的那个唯一的queue可以接收消息；\n\n3.  topic:所有符合routingKey(此时可以是一个表达式)的routingKey所bind的queue可以接收消息；\n\n**145\\. rabbitmq 怎么实现延迟消息队列？**\n\n1.  通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能；\n\n2.  使用 RabbitMQ-delayed-message-exchange 插件实现延迟功能。\n\n**146\\. rabbitmq 集群有什么用？**\n\n集群主要有以下两个用途：\n\n*   高可用：某个服务器出现问题，整个 RabbitMQ 还可以继续使用；\n\n*   高容量：集群可以承载更多的消息量。\n\n**147\\. rabbitmq 节点的类型有哪些？**\n\n*   磁盘节点：消息会存储到磁盘。\n\n*   内存节点：消息都存储在内存中，重启服务器消息丢失，性能高于磁盘类型。\n\n**148\\. rabbitmq 集群搭建需要注意哪些问题？**\n\n*   各节点之间使用“--link”连接，此属性不能忽略。\n\n*   各节点使用的 erlang cookie 值必须相同，此值相当于“秘钥”的功能，用于各节点的认证。\n\n*   整个集群中必须包含一个磁盘节点。\n\n**149\\. rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？**\n\n不是，原因有以下两个：\n\n1.  存储空间的考虑：如果每个节点都拥有所有队列的完全拷贝，这样新增节点不但没有新增存储空间，反而增加了更多的冗余数据；\n\n2.  性能的考虑：如果每条消息都需要完整拷贝到每一个集群节点，那新增节点并没有提升处理消息的能力，最多是保持和单节点相同的性能甚至是更糟。\n\n**150\\. rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？**\n\n如果唯一磁盘的磁盘节点崩溃了，不能进行以下操作：\n\n*   不能创建队列\n\n*   不能创建交换器\n\n*   不能创建绑定\n\n*   不能添加用户\n\n*   不能更改权限\n\n*   不能添加和删除集群节点\n\n唯一磁盘节点崩溃了，集群是可以保持运行的，但你不能更改任何东西。\n\n**151\\. rabbitmq 对集群节点停止顺序有要求吗？**\n\nRabbitMQ 对集群的停止的顺序是有要求的，应该先关闭内存节点，最后再关闭磁盘节点。如果顺序恰好相反的话，可能会造成消息的丢失。",[[1563100312002,["GJX@GJXAIOU",[[-1,31,"[Java团长](javascript:void(0);) _4月8日_\n"]],[30,67],[30,30]]],[1563100329404,["GJX@GJXAIOU",[[-1,1636,"####"]],[1636,1640],[1636,1636]]],[1563100331033,["GJX@GJXAIOU",[[-1,1648,"####"]],[1648,1652],[1648,1648]]],[1563100332281,["GJX@GJXAIOU",[[-1,1662,"####"]],[1662,1666],[1662,1662]]],[1563100333585,["GJX@GJXAIOU",[[-1,1677,"####"]],[1677,1681],[1677,1677]]],[1563100335169,["GJX@GJXAIOU",[[-1,1643,"\n"]],[1643,1643],[1642,1642]]],[1563100335865,["GJX@GJXAIOU",[[-1,1656,"\n"]],[1656,1656],[1655,1655]]],[1563100337242,["GJX@GJXAIOU",[[-1,1670,"\n"]],[1670,1670],[1669,1669]]],[1563100338593,["GJX@GJXAIOU",[[-1,1631,"\n"]],[1631,1631],[1630,1630]]],[1563100339552,["GJX@GJXAIOU",[[-1,1565,"\n"]],[1565,1565],[1564,1564]]],[1563100340187,["GJX@GJXAIOU",[[-1,1550,"\n"]],[1550,1550],[1549,1549]]],[1563100344769,["GJX@GJXAIOU",[[-1,1743,"\n"]],[1743,1743],[1742,1742]]],[1563100345673,["GJX@GJXAIOU",[[-1,1787,"\n"]],[1787,1787],[1786,1786]]],[1563100346795,["GJX@GJXAIOU",[[-1,1805,"\n"]],[1805,1805],[1804,1804]]],[1563100355506,["GJX@GJXAIOU",[[-1,2055,"\n"]],[2055,2055],[2054,2054]]],[1563100356339,["GJX@GJXAIOU",[[-1,2109,"\n"]],[2109,2109],[2108,2108]]],[1563100364058,["GJX@GJXAIOU",[[-1,2457,"\n"]],[2457,2457],[2456,2456]]],[1563100365763,["GJX@GJXAIOU",[[-1,2562,"\n"]],[2562,2562],[2561,2561]]],[1563100367593,["GJX@GJXAIOU",[[-1,2616,"\n"]],[2616,2616],[2615,2615]]],[1563100373720,["GJX@GJXAIOU",[[-1,2907,"\n"]],[2907,2907],[2906,2906]]],[1563100374977,["GJX@GJXAIOU",[[-1,2895,"\n"]],[2895,2895],[2894,2894]]],[1563100375683,["GJX@GJXAIOU",[[-1,2918,"\n"]],[2918,2918],[2917,2917]]],[1563100376281,["GJX@GJXAIOU",[[-1,2929,"\n"]],[2929,2929],[2928,2928]]],[1563100376969,["GJX@GJXAIOU",[[-1,2940,"\n"]],[2940,2940],[2939,2939]]],[1563100377963,["GJX@GJXAIOU",[[-1,2951,"\n"]],[2951,2951],[2950,2950]]]],null,"GJX@GJXAIOU"],["18538b07-f825-43bf-8678-aa58ad7639d4",1569586219288,"## Java 最常见的 208 道面试题：第十四模块答案\n\n\n**十四、RabbitMQ**\n\n**135\\. rabbitmq 的使用场景有哪些？**\n\n①. 跨系统的异步通信，所有需要异步交互的地方都可以使用消息队列。就像我们除了打电话（同步）以外，还需要发短信，发电子邮件（异步）的通讯方式。\n\n②. 多个应用之间的耦合，由于消息是平台无关和语言无关的，而且语义上也不再是函数调用，因此更适合作为多个应用之间的松耦合的接口。基于消息队列的耦合，不需要发送方和接收方同时在线。在企业应用集成（EAI）中，文件传输，共享数据库，消息队列，远程过程调用都可以作为集成的方法。\n\n③. 应用内的同步变异步，比如订单处理，就可以由前端应用将订单信息放到队列，后端应用从队列里依次获得消息处理，高峰时的大量订单可以积压在队列里慢慢处理掉。由于同步通常意味着阻塞，而大量线程的阻塞会降低计算机的性能。\n\n④. 消息驱动的架构（EDA），系统分解为消息队列，和消息制造者和消息消费者，一个处理流程可以根据需要拆成多个阶段（Stage），阶段之间用队列连接起来，前一个阶段处理的结果放入队列，后一个阶段从队列中获取消息继续处理。\n\n⑤. 应用需要更灵活的耦合方式，如发布订阅，比如可以指定路由规则。\n\n⑥. 跨局域网，甚至跨城市的通讯（CDN行业），比如北京机房与广州机房的应用程序的通信。\n\n**136\\. rabbitmq 有哪些重要的角色？**\n\nRabbitMQ 中重要的角色有：生产者、消费者和代理：\n\n*   生产者：消息的创建者，负责创建和推送数据到消息服务器；\n\n*   消费者：消息的接收方，用于处理数据和确认消息；\n\n*   代理：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。\n\n**137\\. rabbitmq 有哪些重要的组件？**\n\n*   ConnectionFactory（连接管理器）：应用程序与Rabbit之间建立连接的管理器，程序代码中使用。\n\n*   Channel（信道）：消息推送使用的通道。\n\n*   Exchange（交换器）：用于接受、分配消息。\n\n*   Queue（队列）：用于存储生产者的消息。\n\n*   RoutingKey（路由键）：用于把生成者的数据分配到交换器上。\n\n*   BindingKey（绑定键）：用于把交换器的消息绑定到队列上。\n\n**138\\. rabbitmq 中 vhost 的作用是什么？**\n\nvhost 可以理解为虚拟 broker ，即 mini-RabbitMQ  server。其内部均含有独立的 queue、exchange 和 binding 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段（一个典型的例子就是不同的应用可以跑在不同的 vhost 中）。 \n\n**139\\. rabbitmq 的消息是怎么发送的？**\n\n首先客户端必须连接到 RabbitMQ 服务器才能发布和消费消息，客户端和 rabbit server 之间会创建一个 tcp 连接，一旦 tcp 打开并通过了认证（认证就是你发送给 rabbit 服务器的用户名和密码），你的客户端和 RabbitMQ 就创建了一条 amqp 信道（channel），信道是创建在“真实” tcp 上的虚拟连接，amqp 命令都是通过信道发送出去的，每个信道都会有一个唯一的 id，不论是发布消息，订阅队列都是通过这个信道完成的。\n\n**140\\. rabbitmq 怎么保证消息的稳定性？**\n*   提供了事务的功能。\n*   通过将 channel 设置为 confirm（确认）模式。\n\n**141\\. rabbitmq 怎么避免消息丢失？**\n1.   消息持久化\n2.   ACK确认机制\n3.   设置集群镜像模式\n4.   消息补偿机制\n\n**142\\. 要保证消息持久化成功的条件有哪些？**\n\n1.  声明队列必须设置持久化 durable 设置为 true.\n2.  消息推送投递模式必须设置持久化，deliveryMode 设置为 2（持久）。\n3.  消息已经到达持久化交换器。\n4.  消息已经到达持久化队列。\n\n以上四个条件都满足才能保证消息持久化成功。\n\n**143\\. rabbitmq 持久化有什么缺点？**\n\n持久化的缺地就是降低了服务器的吞吐量，因为使用的是磁盘而非内存存储，从而降低了吞吐量。可尽量使用 ssd 硬盘来缓解吞吐量的问题。\n\n**144\\. rabbitmq 有几种广播类型？**\n\n### 三种广播模式：\n\n1.  fanout: 所有bind到此exchange的queue都可以接收消息（纯广播，绑定到RabbitMQ的接受者都能收到消息）；\n2.  direct: 通过routingKey和exchange决定的那个唯一的queue可以接收消息；\n3.  topic:所有符合routingKey(此时可以是一个表达式)的routingKey所bind的queue可以接收消息；\n\n**145\\. rabbitmq 怎么实现延迟消息队列？**\n\n1.  通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能；\n\n2.  使用 RabbitMQ-delayed-message-exchange 插件实现延迟功能。\n\n**146\\. rabbitmq 集群有什么用？**\n\n集群主要有以下两个用途：\n\n*   高可用：某个服务器出现问题，整个 RabbitMQ 还可以继续使用；\n\n*   高容量：集群可以承载更多的消息量。\n\n**147\\. rabbitmq 节点的类型有哪些？**\n\n*   磁盘节点：消息会存储到磁盘。\n*   内存节点：消息都存储在内存中，重启服务器消息丢失，性能高于磁盘类型。\n\n**148\\. rabbitmq 集群搭建需要注意哪些问题？**\n\n*   各节点之间使用“--link”连接，此属性不能忽略。\n*   各节点使用的 erlang cookie 值必须相同，此值相当于“秘钥”的功能，用于各节点的认证。\n*   整个集群中必须包含一个磁盘节点。\n\n**149\\. rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？**\n\n不是，原因有以下两个：\n\n1.  存储空间的考虑：如果每个节点都拥有所有队列的完全拷贝，这样新增节点不但没有新增存储空间，反而增加了更多的冗余数据；\n\n2.  性能的考虑：如果每条消息都需要完整拷贝到每一个集群节点，那新增节点并没有提升处理消息的能力，最多是保持和单节点相同的性能甚至是更糟。\n\n**150\\. rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？**\n\n如果唯一磁盘的磁盘节点崩溃了，不能进行以下操作：\n*   不能创建队列\n*   不能创建交换器\n*   不能创建绑定\n*   不能添加用户\n*   不能更改权限\n*   不能添加和删除集群节点\n\n唯一磁盘节点崩溃了，集群是可以保持运行的，但你不能更改任何东西。\n\n**151\\. rabbitmq 对集群节点停止顺序有要求吗？**\n\nRabbitMQ 对集群的停止的顺序是有要求的，应该先关闭内存节点，最后再关闭磁盘节点。如果顺序恰好相反的话，可能会造成消息的丢失。",[[1569586207483,["GJX@GJXAIOU",[[-1,0,"#"]],[1,1],[0,0]]],[1569586209247,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569586216435,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1569586220670,["GJX@GJXAIOU",[[-1,69,"RabbitMQ"]],[69,77],[69,69]]],[1569586222219,["GJX@GJXAIOU",[[-1,59,"答案"]],[61,61],[59,59]]],[1569586222655,["GJX@GJXAIOU",[[1,59," "],[-1,1118," "],[1,1119," "],[-1,1273," "],[1,1274," "]],[59,59],[60,60]]],[1569586223479,["GJX@GJXAIOU",[[1,60,"RabbitMQ"]],[60,60],[68,68]]],[1569586228659,["GJX@GJXAIOU",[[-1,71,"**十四、**\n"]],[71,79],[71,71]]],[1569586231582,["GJX@GJXAIOU",[[1,70,"@toc"]],[70,70],[74,74]]],[1569586234455,["GJX@GJXAIOU",[[-1,81,"\\"],[1,82," "]],[81,82],[81,82]]],[1569586234943,["GJX@GJXAIOU",[[-1,624,"\\"],[1,625," "]],[624,625],[624,625]]],[1569586235171,["GJX@GJXAIOU",[[-1,802,"\\"],[1,803," "]],[802,803],[802,803]]],[1569586235407,["GJX@GJXAIOU",[[-1,1055,"\\"],[1,1056," "]],[1055,1056],[1055,1056]]],[1569586235825,["GJX@GJXAIOU",[[-1,1286,"\\"],[1,1287," "]],[1286,1287],[1286,1287]]],[1569586236032,["GJX@GJXAIOU",[[-1,1551,"\\"],[1,1552," "]],[1551,1552],[1551,1552]]],[1569586236473,["GJX@GJXAIOU",[[-1,1632,"\\"],[1,1633," "]],[1632,1633],[1632,1633]]],[1569586236669,["GJX@GJXAIOU",[[-1,1712,"\\"],[1,1713," "]],[1712,1713],[1712,1713]]],[1569586237068,["GJX@GJXAIOU",[[-1,1878,"\\"],[1,1879," "]],[1878,1879],[1878,1879]]],[1569586237263,["GJX@GJXAIOU",[[-1,1975,"\\"],[1,1976," "]],[1975,1976],[1975,1976]]],[1569586237453,["GJX@GJXAIOU",[[-1,2208,"\\"],[1,2209," "]],[2208,2209],[2208,2209]]],[1569586238028,["GJX@GJXAIOU",[[-1,2335,"\\"],[1,2336," "]],[2335,2336],[2335,2336]]],[1569586238220,["GJX@GJXAIOU",[[-1,2440,"\\"],[1,2441," "]],[2440,2441],[2440,2441]]],[1569586238381,["GJX@GJXAIOU",[[-1,2529,"\\"],[1,2530," "]],[2529,2530],[2529,2530]]],[1569586238572,["GJX@GJXAIOU",[[-1,2670,"\\"],[1,2671," "]],[2670,2671],[2670,2671]]],[1569586238796,["GJX@GJXAIOU",[[-1,2859,"\\"],[1,2860," "]],[2859,2860],[2859,2860]]],[1569586239199,["GJX@GJXAIOU",[[-1,3034,"\\"],[1,3035," "]],[3034,3035],[3034,3035]]],[1569586242886,["GJX@GJXAIOU",[[1,3029,"## "]],[3046,3046],[3065,3065]]],[1569586243388,["GJX@GJXAIOU",[[-1,3032,"**"],[-1,3063,"**"]],[3065,3065],[3032,3061]]],[1569586245732,["GJX@GJXAIOU",[[1,2854,"## "]],[2865,2865],[2898,2898]]],[1569586246279,["GJX@GJXAIOU",[[-1,2857,"**"],[-1,2896,"**"]],[2898,2898],[2857,2894]]],[1569586248718,["GJX@GJXAIOU",[[1,2665,"## "]],[2676,2676],[2707,2707]]],[1569586249151,["GJX@GJXAIOU",[[-1,2668,"**"],[-1,2705,"**"]],[2707,2707],[2668,2703]]],[1569586252318,["GJX@GJXAIOU",[[1,2524,"## "]],[2535,2535],[2559,2559]]],[1569586252734,["GJX@GJXAIOU",[[-1,2527,"**"],[-1,2557,"**"]],[2559,2559],[2527,2555]]],[1569586254077,["GJX@GJXAIOU",[[1,2435,"## "]],[2448,2448],[2466,2466]]],[1569586254480,["GJX@GJXAIOU",[[-1,2438,"**"],[-1,2464,"**"]],[2466,2466],[2438,2462]]],[1569586255983,["GJX@GJXAIOU",[[1,2330,"## "]],[2343,2344],[2359,2359]]],[1569586256421,["GJX@GJXAIOU",[[-1,2333,"**"],[-1,2357,"**"]],[2359,2359],[2333,2355]]],[1569586259005,["GJX@GJXAIOU",[[-1,2410,"\n"]],[2410,2410],[2409,2409]]],[1569586259997,["GJX@GJXAIOU",[[-1,2370,"\n"]],[2370,2370],[2369,2369]]],[1569586261028,["GJX@GJXAIOU",[[-1,2277,"\n"]],[2277,2277],[2276,2276]]],[1569586262448,["GJX@GJXAIOU",[[1,2203,"## "]],[2217,2217],[2236,2236]]],[1569586263124,["GJX@GJXAIOU",[[-1,2206,"**"],[-1,2234,"**"]],[2236,2236],[2206,2232]]],[1569586268452,["GJX@GJXAIOU",[[-1,1999,"### "]],[1999,2003],[1999,1999]]],[1569586270872,["GJX@GJXAIOU",[[1,1970,"## "]],[1982,1982],[2000,2000]]],[1569586271513,["GJX@GJXAIOU",[[-1,1973,"**"],[-1,1998,"**"]],[2000,2000],[1973,1996]]],[1569586273500,["GJX@GJXAIOU",[[1,1873,"## "]],[1886,1886],[1904,1904]]],[1569586273892,["GJX@GJXAIOU",[[-1,1876,"**"],[-1,1902,"**"]],[1904,1904],[1876,1900]]],[1569586275188,["GJX@GJXAIOU",[[1,1707,"## "]],[1719,1719],[1737,1737]]],[1569586275677,["GJX@GJXAIOU",[[-1,1710,"**"],[-1,1735,"**"]],[1737,1737],[1710,1733]]],[1569586277860,["GJX@GJXAIOU",[[1,1627,"## "]],[1640,1640],[1658,1658]]],[1569586278317,["GJX@GJXAIOU",[[-1,1630,"**"],[-1,1656,"**"]],[1658,1658],[1630,1654]]],[1569586279575,["GJX@GJXAIOU",[[1,1546,"## "]],[1563,1563],[1579,1579]]],[1569586279999,["GJX@GJXAIOU",[[-1,1549,"**"],[-1,1577,"**"]],[1579,1579],[1549,1575]]],[1569586281511,["GJX@GJXAIOU",[[1,1281,"## "]],[1295,1295],[1313,1313]]],[1569586282052,["GJX@GJXAIOU",[[-1,1284,"**"],[-1,1311,"**"]],[1313,1313],[1284,1309]]],[1569586283997,["GJX@GJXAIOU",[[1,1085,"## ****"]],[1085,1085],[1090,1090]]],[1569586287693,["GJX@GJXAIOU",[[-1,1085,"## ****"]],[1085,1092],[1085,1085]]],[1569586289152,["GJX@GJXAIOU",[[1,1050,"## "]],[1054,1054],[1087,1087]]],[1569586289844,["GJX@GJXAIOU",[[-1,1053,"**"],[-1,1085,"**"]],[1087,1087],[1053,1083]]],[1569586292012,["GJX@GJXAIOU",[[-1,1011,"\n"]],[1011,1011],[1010,1010]]],[1569586292892,["GJX@GJXAIOU",[[-1,972,"\n"]],[972,972],[971,971]]],[1569586293484,["GJX@GJXAIOU",[[-1,945,"\n"]],[945,945],[944,944]]],[1569586294015,["GJX@GJXAIOU",[[-1,915,"\n"]],[915,915],[914,914]]],[1569586295068,["GJX@GJXAIOU",[[-1,887,"\n"]],[887,887],[886,886]]],[1569586297462,["GJX@GJXAIOU",[[1,797,"## "]],[810,810],[828,828]]],[1569586297902,["GJX@GJXAIOU",[[-1,800,"**"],[-1,826,"**"]],[828,828],[800,824]]],[1569586299871,["GJX@GJXAIOU",[[-1,740,"\n"]],[740,740],[739,739]]],[1569586301167,["GJX@GJXAIOU",[[-1,711,"\n"]],[711,711],[710,710]]],[1569586301925,["GJX@GJXAIOU",[[-1,678,"\n"]],[678,678],[677,677]]],[1569586303421,["GJX@GJXAIOU",[[1,619,"## "]],[628,628],[650,650]]],[1569586303972,["GJX@GJXAIOU",[[-1,622,"**"],[-1,648,"**"]],[650,650],[622,646]]],[1569586306134,["GJX@GJXAIOU",[[-1,572,"\n"]],[572,572],[571,571]]],[1569586306892,["GJX@GJXAIOU",[[-1,537,"\n"]],[537,537],[536,536]]],[1569586307660,["GJX@GJXAIOU",[[-1,425,"\n"]],[425,425],[424,424]]],[1569586308934,["GJX@GJXAIOU",[[-1,316,"\n"]],[316,316],[315,315]]],[1569586309564,["GJX@GJXAIOU",[[-1,178,"\n"]],[178,178],[177,177]]],[1569586310955,["GJX@GJXAIOU",[[1,76,"## "]],[87,87],[107,107]]],[1569586311420,["GJX@GJXAIOU",[[-1,79,"**"],[-1,105,"**"]],[107,107],[79,103]]],[1569586321434,["GJX@GJXAIOU",[[1,177,"\n"]],[176,176],[177,177]]],[1569586324251,["GJX@GJXAIOU",[[-1,177,"\n"]],[177,177],[176,176]]],[1569586327116,["GJX@GJXAIOU",[[1,105,"* "],[1,177,"* "],[1,314,"* "],[1,422,"* "],[1,533,"* "],[1,567,"* "]],[105,607],[107,619]]],[1569586330185,["GJX@GJXAIOU",[[1,181,"\n* "]],[178,178],[181,181]]],[1569586332510,["GJX@GJXAIOU",[[-1,179,"* "]],[181,181],[179,179]]],[1569586336315,["GJX@GJXAIOU",[[1,319,"\n"]],[319,319],[320,320]]],[1569586337310,["GJX@GJXAIOU",[[1,430,"\n"]],[430,430],[431,431]]],[1569586338248,["GJX@GJXAIOU",[[1,544,"\n"]],[544,544],[545,545]]],[1569586339108,["GJX@GJXAIOU",[[1,581,"\n"]],[581,581],[582,582]]],[1569586673075,["GJX@GJXAIOU",[[-1,104,"\n"]],[104,104],[103,103]]],[1569586675859,["GJX@GJXAIOU",[[-1,657,"\n"]],[657,657],[656,656]]],[1569586681267,["GJX@GJXAIOU",[[-1,1843,"\n"]],[1843,1843],[1842,1842]]],[1569586683331,["GJX@GJXAIOU",[[-1,1998,"\n"]],[1998,1998],[1997,1997]]],[1569586687308,["GJX@GJXAIOU",[[-1,2340,"\n"]],[2340,2340],[2339,2339]]],[1569586691229,["GJX@GJXAIOU",[[-1,2695,"\n"]],[2695,2695],[2694,2694]]],[1569586693451,["GJX@GJXAIOU",[[-1,2969,"\n"]],[2969,2969],[2968,2968]]]],null,"GJX@GJXAIOU"]]}