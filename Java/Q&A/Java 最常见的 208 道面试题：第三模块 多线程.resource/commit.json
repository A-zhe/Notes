{"compress":true,"commitItems":[["85516026-5d73-444e-af83-4dc799779148",1564817342174,"## Java 最常见的 208 道面试题：第三模块答案\n\n[Java团长](javascript:void(0);) _3月16日_\n\n### **多线程**\n\n**35\\. 并行和并发有什么区别？**\n\n*   并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。\n\n*   并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。\n\n*   在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。\n\n所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。\n\n**36\\. 线程和进程的区别？**\n\n简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。\n\n**37\\. 守护线程是什么？**\n\n守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。\n\n**38\\. 创建线程有哪几种方式？**\n\n①. 继承Thread类创建线程类\n\n*   定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。\n\n*   创建Thread子类的实例，即创建了线程对象。\n\n*   调用线程对象的start()方法来启动该线程。\n\n②. 通过Runnable接口创建线程类\n\n*   定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。\n\n*   创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\n\n*   调用线程对象的start()方法来启动该线程。\n\n③. 通过Callable和Future创建线程\n\n*   创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。\n\n*   创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。\n\n*   使用FutureTask对象作为Thread对象的target创建并启动新线程。\n\n*   调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。\n\n**39\\. 说一下 runnable 和 callable 有什么区别？**\n\n有点深的问题了，也看出一个Java程序员学习知识的广度。\n\n*   Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；\n\n*   Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。\n\n**40\\. 线程有哪些状态？**\n\n线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。\n\n*   创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。\n\n*   就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。\n\n*   运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。\n\n*   阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。\n\n*   死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　\n\n**41\\. sleep() 和 wait() 有什么区别？**\n\nsleep()：方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。\n\nwait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程\n\n**42\\. notify()和 notifyAll()有什么区别？**\n\n*   如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。\n\n*   当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。\n\n*   优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。\n\n**43\\. 线程的 run()和 start()有什么区别？**\n\n每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。\n\nstart()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。\n\nrun()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。 如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。\n\n**44\\. 创建线程池有哪几种方式？**\n\n①. newFixedThreadPool(int nThreads)\n\n创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。\n\n②. newCachedThreadPool()\n\n创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。\n\n③. newSingleThreadExecutor()\n\n这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。\n\n④. newScheduledThreadPool(int corePoolSize)\n\n创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。\n\n**45\\. 线程池都有哪些状态？**\n\n线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。\n\n线程池各个状态切换框架图：\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIOPwPTKJJXaorw1FJMNRKaOibmppdm8GIib00QCgyibrVhFcU4tvjABoYBUKibVEfQ9UvAvT0libWA9LWg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**46\\. 线程池中 submit()和 execute()方法有什么区别？**\n\n*   接收的参数不一样\n\n*   submit有返回值，而execute没有\n\n*   submit方便Exception处理  \n\n**47\\. 在 java 程序中怎么保证多线程的运行安全？**\n\n线程安全在三个方面体现：\n\n*   原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；\n\n*   可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；\n\n*   有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。\n\n**48\\. 多线程锁的升级原理是什么？**\n\n在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。\n\n锁升级的图示过程： \n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIOPwPTKJJXaorw1FJMNRKaO1paWia8rGdhNGDymJ5WibNY8pEibl6m21Fg5Jh6XYQDHkHsTveQUfeuCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**49\\. 什么是死锁？**\n\n死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。\n\n**50\\. 怎么防止死锁？**\n\n死锁的四个必要条件：\n\n*   互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源\n\n*   请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放\n\n*   不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放\n\n*   环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系\n\n这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。\n\n理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。\n\n所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。\n\n此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。\n\n**51\\. ThreadLocal 是什么？有哪些使用场景？**\n\n线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。\n\n**52.说一下 synchronized 底层实现原理？**\n\nsynchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。\n\nJava中每一个对象都可以作为锁，这是synchronized实现同步的基础：\n\n*   普通同步方法，锁是当前实例对象\n\n*   静态同步方法，锁是当前类的class对象\n\n*   同步方法块，锁是括号里面的对象\n\n  **53\\. synchronized 和 volatile 的区别是什么？**\n\n*   volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。\n\n*   volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。\n\n*   volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。\n\n*   volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。\n\n*   volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。\n\n**54\\. synchronized 和 Lock 有什么区别？**\n\n*   首先synchronized是java内置关键字，在jvm层面，Lock是个java类；\n\n*   synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；\n\n*   synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；\n\n*   用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；\n\n*   synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；\n\n*   Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。\n\n**55\\. synchronized 和 ReentrantLock 区别是什么？**\n\nsynchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： \n\n*   ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 \n\n*   ReentrantLock可以获取各种锁的信息\n\n*   ReentrantLock可以灵活地实现多路通知 \n\n另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。\n\n  **56\\. 说一下 atomic 的原理？**\n\nAtomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。\n\nAtomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。",[[1564817312367,["GJX@GJXAIOU",[[-1,26,"答案"]],[28,28],[26,26]]],[1564817313248,["GJX@GJXAIOU",[[1,26," "],[-1,57," "],[1,58," "],[-1,2868," "],[1,2869," "],[-1,4158," "],[1,4159," "],[-1,5980," "],[1,5981," "],[-1,6502," "],[1,6503," "],[-1,6546," "],[1,6547," "],[-1,6606," "],[1,6607," "]],[26,26],[27,27]]],[1564817319640,["GJX@GJXAIOU",[[1,27,"多线程"]],[27,27],[30,30]]],[1564817322829,["GJX@GJXAIOU",[[-1,32,"[Java团长](javascript:void(0);) _3月16日_"]],[32,69],[32,32]]],[1564817323247,["GJX@GJXAIOU",[[-1,33,"\n"]],[32,32],[31,31]]],[1564817323798,["GJX@GJXAIOU",[[-1,32,"\n"]],[31,31],[30,30]]],[1564817326325,["GJX@GJXAIOU",[[-1,32,"### **多线程**\n"]],[31,43],[31,31]]],[1564817329608,["GJX@GJXAIOU",[[1,31,"@toc"]],[31,31],[35,35]]],[1564817331221,["GJX@GJXAIOU",[[1,31,"\n"]],[31,31],[32,32]]],[1564817333197,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1564817334165,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1564817337669,["GJX@GJXAIOU",[[-1,75,"\\"]],[76,76],[75,75]]],[1564817339071,["GJX@GJXAIOU",[[-1,270,"\\"]],[271,271],[270,270]]],[1564817340421,["GJX@GJXAIOU",[[-1,445,"\\"]],[446,446],[445,445]]],[1564817341518,["GJX@GJXAIOU",[[-1,508,"\\"]],[509,509],[508,508]]],[1564817344774,["GJX@GJXAIOU",[[-1,1132,"\\"]],[1133,1133],[1132,1132]]],[1564817346230,["GJX@GJXAIOU",[[-1,1337,"\\"]],[1338,1338],[1337,1337]]],[1564817347695,["GJX@GJXAIOU",[[-1,1766,"\\"]],[1767,1767],[1766,1766]]],[1564817349357,["GJX@GJXAIOU",[[-1,2103,"\\"]],[2104,2104],[2103,2103]]],[1564817351902,["GJX@GJXAIOU",[[-1,2525,"\\"]],[2526,2526],[2525,2525]]],[1564817354637,["GJX@GJXAIOU",[[-1,2980,"\\"]],[2981,2981],[2980,2980]]],[1564817356550,["GJX@GJXAIOU",[[-1,3422,"\\"]],[3423,3423],[3422,3422]]],[1564817357942,["GJX@GJXAIOU",[[-1,3690,"\\"]],[3691,3691],[3690,3690]]],[1564817359590,["GJX@GJXAIOU",[[-1,3800,"\\"]],[3801,3801],[3800,3800]]],[1564817361078,["GJX@GJXAIOU",[[-1,4031,"\\"]],[4032,4032],[4031,4031]]],[1564817363229,["GJX@GJXAIOU",[[-1,4320,"\\"]],[4321,4321],[4320,4320]]],[1564817364878,["GJX@GJXAIOU",[[-1,4529,"\\"]],[4530,4530],[4529,4529]]],[1564817367325,["GJX@GJXAIOU",[[-1,5005,"\\"]],[5006,5006],[5005,5005]]],[1564817370431,["GJX@GJXAIOU",[[-1,5438,"\\"]],[5439,5439],[5438,5438]]],[1564817372206,["GJX@GJXAIOU",[[-1,5800,"\\"]],[5801,5801],[5800,5800]]],[1564817374221,["GJX@GJXAIOU",[[-1,6260,"\\"]],[6261,6261],[6260,6260]]],[1564817376605,["GJX@GJXAIOU",[[-1,6673,"\\"]],[6674,6674],[6673,6673]]],[1564817379182,["GJX@GJXAIOU",[[-1,6669,"**"],[-1,6690,"**"]],[6673,6673],[6669,6688]]],[1564817379824,["GJX@GJXAIOU",[[1,6667,"## "]],[6669,6688],[6691,6691]]],[1564817382702,["GJX@GJXAIOU",[[-1,6256,"**"],[-1,6297,"**"]],[6262,6262],[6256,6295]]],[1564817383246,["GJX@GJXAIOU",[[1,6256,"## "]],[6256,6295],[6298,6298]]],[1564817385805,["GJX@GJXAIOU",[[-1,5796,"**"],[-1,5828,"**"]],[5803,5803],[5796,5826]]],[1564817386342,["GJX@GJXAIOU",[[1,5796,"## "]],[5796,5826],[5829,5829]]],[1564817388399,["GJX@GJXAIOU",[[-1,5434,"**"],[-1,5471,"**"]],[5440,5440],[5434,5469]]],[1564817388895,["GJX@GJXAIOU",[[1,5432,"## "]],[5434,5469],[5472,5472]]],[1564817390781,["GJX@GJXAIOU",[[-1,5222,"**"],[-1,5251,"**"]],[5228,5228],[5222,5249]]],[1564817391320,["GJX@GJXAIOU",[[1,5222,"## "]],[5222,5249],[5252,5252]]],[1564817393102,["GJX@GJXAIOU",[[-1,5001,"**"],[-1,5031,"**"]],[5010,5010],[5001,5029]]],[1564817393601,["GJX@GJXAIOU",[[1,5001,"## "]],[5001,5029],[5032,5032]]],[1564817396023,["GJX@GJXAIOU",[[-1,4525,"**"],[-1,4538,"**"]],[4533,4533],[4525,4536]]],[1564817396622,["GJX@GJXAIOU",[[1,4525,"## "]],[4525,4536],[4539,4539]]],[1564817398399,["GJX@GJXAIOU",[[-1,4316,"**"],[-1,4328,"**"]],[4324,4324],[4316,4326]]],[1564817398886,["GJX@GJXAIOU",[[1,4316,"## "]],[4316,4326],[4329,4329]]],[1564817400990,["GJX@GJXAIOU",[[-1,4027,"**"],[-1,4046,"**"]],[4035,4035],[4027,4044]]],[1564817401502,["GJX@GJXAIOU",[[1,4027,"## "]],[4027,4044],[4047,4047]]],[1564817403384,["GJX@GJXAIOU",[[-1,3796,"**"],[-1,3825,"**"]],[3805,3805],[3796,3823]]],[1564817403863,["GJX@GJXAIOU",[[1,3796,"## "]],[3796,3823],[3826,3826]]],[1564817405743,["GJX@GJXAIOU",[[-1,3686,"**"],[-1,3724,"**"]],[3694,3694],[3686,3722]]],[1564817406254,["GJX@GJXAIOU",[[1,3686,"## "]],[3686,3722],[3725,3725]]],[1564817408318,["GJX@GJXAIOU",[[-1,3418,"**"],[-1,3434,"**"]],[3426,3426],[3418,3432]]],[1564817408910,["GJX@GJXAIOU",[[1,3418,"## "]],[3418,3432],[3435,3435]]],[1564817411573,["GJX@GJXAIOU",[[-1,2976,"**"],[-1,2994,"**"]],[2984,2984],[2976,2992]]],[1564817412072,["GJX@GJXAIOU",[[1,2976,"## "]],[2976,2992],[2995,2995]]],[1564817414350,["GJX@GJXAIOU",[[-1,2521,"**"],[-1,2551,"**"]],[2530,2530],[2521,2549]]],[1564817414829,["GJX@GJXAIOU",[[1,2521,"## "]],[2521,2549],[2552,2552]]],[1564817416726,["GJX@GJXAIOU",[[-1,2099,"**"],[-1,2132,"**"]],[2111,2111],[2099,2130]]],[1564817417174,["GJX@GJXAIOU",[[1,2099,"## "]],[2099,2130],[2133,2133]]],[1564817418885,["GJX@GJXAIOU",[[-1,1762,"**"],[-1,1791,"**"]],[1774,1774],[1762,1789]]],[1564817419342,["GJX@GJXAIOU",[[1,1762,"## "]],[1762,1789],[1792,1792]]],[1564817421351,["GJX@GJXAIOU",[[-1,1333,"**"],[-1,1347,"**"]],[1340,1340],[1333,1345]]],[1564817421830,["GJX@GJXAIOU",[[1,1333,"## "]],[1333,1345],[1348,1348]]],[1564817423630,["GJX@GJXAIOU",[[-1,1128,"**"],[-1,1164,"**"]],[1135,1135],[1128,1162]]],[1564817424072,["GJX@GJXAIOU",[[1,1128,"## "]],[1128,1162],[1165,1165]]],[1564817426664,["GJX@GJXAIOU",[[-1,504,"**"],[-1,521,"**"]],[511,511],[504,519]]],[1564817427157,["GJX@GJXAIOU",[[1,504,"## "]],[504,519],[522,522]]],[1564817429062,["GJX@GJXAIOU",[[-1,441,"**"],[-1,455,"**"]],[448,448],[441,453]]],[1564817429949,["GJX@GJXAIOU",[[1,441,"## "]],[441,453],[456,456]]],[1564817431229,["GJX@GJXAIOU",[[-1,266,"**"],[-1,281,"**"]],[274,274],[266,279]]],[1564817431598,["GJX@GJXAIOU",[[1,266,"## "]],[266,279],[282,282]]],[1564817433695,["GJX@GJXAIOU",[[-1,71,"**"],[-1,88,"**"]],[78,78],[71,86]]],[1564817434182,["GJX@GJXAIOU",[[1,71,"## "]],[71,86],[89,89]]],[1564817444933,["GJX@GJXAIOU",[[-1,138,"\n"]],[138,138],[137,137]]],[1564817446351,["GJX@GJXAIOU",[[-1,173,"\n"]],[173,173],[172,172]]],[1564817448421,["GJX@GJXAIOU",[[-1,225,"\n"]],[225,225],[224,224]]],[1564817459093,["GJX@GJXAIOU",[[1,262,"\n"]],[261,261],[262,262]]],[1564817460111,["GJX@GJXAIOU",[[1,262,"---"]],[262,262],[265,265]]],[1564817467981,["GJX@GJXAIOU",[[1,440,"---\n"]],[439,439],[443,443]]],[1564817470605,["GJX@GJXAIOU",[[1,506,"---\n"]],[505,505],[509,509]]],[1564817475254,["GJX@GJXAIOU",[[1,1133,"---\n"]],[1132,1132],[1136,1136]]],[1564817477630,["GJX@GJXAIOU",[[1,1341,"---\n"]],[1340,1340],[1344,1344]]],[1564817480814,["GJX@GJXAIOU",[[1,1773,"---\n"]],[1772,1772],[1776,1776]]],[1564817483261,["GJX@GJXAIOU",[[1,2113,"---\n"]],[2112,2112],[2116,2116]]],[1564817485942,["GJX@GJXAIOU",[[1,2538,"---\n"]],[2537,2537],[2541,2541]]],[1564817488093,["GJX@GJXAIOU",[[1,2996,"---\n"]],[2995,2995],[2999,2999]]],[1564817490853,["GJX@GJXAIOU",[[1,3441,"---\n"]],[3440,3440],[3444,3444]]],[1564817493838,["GJX@GJXAIOU",[[1,3712,"---\n"]],[3711,3711],[3715,3715]]],[1564817497861,["GJX@GJXAIOU",[[1,3825,"---\n"]],[3824,3824],[3828,3828]]],[1564817500421,["GJX@GJXAIOU",[[1,4059,"---\n"]],[4058,4058],[4062,4062]]],[1564817502336,["GJX@GJXAIOU",[[1,4351,"---\n"]],[4350,4350],[4354,4354]]],[1564817504373,["GJX@GJXAIOU",[[1,4563,"---\n"]],[4562,4562],[4566,4566]]],[1564817507543,["GJX@GJXAIOU",[[1,5042,"---\n"]],[5041,5041],[5045,5045]]],[1564817509181,["GJX@GJXAIOU",[[1,5266,"---\n"]],[5265,5265],[5269,5269]]],[1564817511151,["GJX@GJXAIOU",[[1,5479,"---\n"]],[5478,5478],[5482,5482]]],[1564817513431,["GJX@GJXAIOU",[[1,5846,"---\n"]],[5845,5845],[5849,5849]]],[1564817516805,["GJX@GJXAIOU",[[1,6309,"---\n"]],[6308,6308],[6312,6312]]],[1564817518878,["GJX@GJXAIOU",[[1,6723,"---\n"]],[6722,6722],[6726,6726]]],[1564817523238,["GJX@GJXAIOU",[[-1,6635,"\n"]],[6635,6635],[6634,6634]]],[1564817524238,["GJX@GJXAIOU",[[-1,6604,"\n"]],[6604,6604],[6603,6603]]],[1564817525079,["GJX@GJXAIOU",[[-1,6575,"\n"]],[6575,6575],[6574,6574]]],[1564817525926,["GJX@GJXAIOU",[[-1,6531,"\n"]],[6531,6531],[6530,6530]]],[1564817527840,["GJX@GJXAIOU",[[-1,6257,"\n"]],[6257,6257],[6256,6256]]],[1564817528574,["GJX@GJXAIOU",[[-1,6200,"\n"]],[6200,6200],[6199,6199]]],[1564817530093,["GJX@GJXAIOU",[[-1,6087,"\n"]],[6087,6087],[6086,6086]]],[1564817530997,["GJX@GJXAIOU",[[-1,5980,"\n"]],[5980,5980],[5979,5979]]],[1564817532335,["GJX@GJXAIOU",[[-1,5934,"\n"]],[5934,5934],[5933,5933]]],[1564817533878,["GJX@GJXAIOU",[[-1,5791,"\n"]],[5791,5791],[5790,5790]]],[1564817534573,["GJX@GJXAIOU",[[-1,5744,"\n"]],[5744,5744],[5743,5743]]],[1564817535205,["GJX@GJXAIOU",[[-1,5678,"\n"]],[5678,5678],[5677,5677]]],[1564817535893,["GJX@GJXAIOU",[[-1,5624,"\n"]],[5624,5624],[5623,5623]]],[1564817537663,["GJX@GJXAIOU",[[-1,5457,"\n"]],[5457,5457],[5456,5456]]],[1564817539294,["GJX@GJXAIOU",[[-1,5431,"\n"]],[5431,5431],[5430,5430]]],[1564817539942,["GJX@GJXAIOU",[[-1,5410,"\n"]],[5410,5410],[5409,5409]]],[1564817543102,["GJX@GJXAIOU",[[-1,4996,"\n"]],[4996,4996],[4995,4995]]],[1564817543749,["GJX@GJXAIOU",[[-1,4934,"\n"]],[4934,4934],[4933,4933]]],[1564817544511,["GJX@GJXAIOU",[[-1,4888,"\n"]],[4888,4888],[4887,4887]]],[1564817546836,["GJX@GJXAIOU",[[-1,4786,"\n"]],[4786,4786],[4785,4785]]],[1564817548351,["GJX@GJXAIOU",[[-1,4736,"\n"]],[4736,4736],[4735,4735]]],[1564817549039,["GJX@GJXAIOU",[[-1,4663,"\n"]],[4663,4663],[4662,4662]]],[1564817550384,["GJX@GJXAIOU",[[-1,4594,"\n"]],[4594,4594],[4593,4593]]],[1564817552829,["GJX@GJXAIOU",[[1,4598,"**"],[1,4602,"**"]],[4598,4602],[4598,4606]]],[1564817555551,["GJX@GJXAIOU",[[1,4670,"**"],[1,4677,"**"]],[4670,4677],[4670,4681]]],[1564817558181,["GJX@GJXAIOU",[[1,4746,"**"],[1,4752,"**"]],[4746,4752],[4746,4756]]],[1564817560877,["GJX@GJXAIOU",[[1,4799,"**"],[1,4805,"**"]],[4799,4805],[4799,4809]]],[1564817570750,["GJX@GJXAIOU",[[1,4435,"\n"]],[4435,4435],[4436,4436]]],[1564817579669,["GJX@GJXAIOU",[[-1,4161,"锁升级的图示过程"]],[4161,4169],[4161,4161]]],[1564817581542,["GJX@GJXAIOU",[[1,4167,"锁升级的图示过程"]],[4167,4167],[4175,4175]]],[1564817582805,["GJX@GJXAIOU",[[-1,4164,"\n"]],[4164,4164],[4163,4163]]],[1564817583319,["GJX@GJXAIOU",[[-1,4161,"： "]],[4163,4163],[4161,4161]]],[1564817583534,["GJX@GJXAIOU",[[-1,4161,"\n"]],[4161,4161],[4160,4160]]],[1564817590157,["GJX@GJXAIOU",[[-1,3932,"\n"]],[3932,3932],[3931,3931]]],[1564817591190,["GJX@GJXAIOU",[[-1,3874,"\n"]],[3874,3874],[3873,3873]]],[1564817592056,["GJX@GJXAIOU",[[-1,3988,"\n"]],[3988,3988],[3987,3987]]],[1564817594648,["GJX@GJXAIOU",[[-1,3770,"\n"]],[3770,3770],[3769,3769]]],[1564817595341,["GJX@GJXAIOU",[[-1,3796,"\n"]],[3796,3796],[3795,3795]]],[1564817606861,["GJX@GJXAIOU",[[-1,3516,"线程池各个状态切换框架图"]],[3516,3528],[3516,3516]]],[1564817608878,["GJX@GJXAIOU",[[1,3521,"线程池各个状态切换框架图"]],[3521,3521],[3533,3533]]],[1564817610351,["GJX@GJXAIOU",[[-1,3518,"\n"]],[3518,3518],[3517,3517]]],[1564817610717,["GJX@GJXAIOU",[[-1,3516,"："]],[3517,3517],[3516,3516]]],[1564817611093,["GJX@GJXAIOU",[[-1,3516,"\n"]],[3516,3516],[3515,3515]]],[1564817612357,["GJX@GJXAIOU",[[-1,3515,"\n"]],[3515,3515],[3514,3514]]],[1564817614565,["GJX@GJXAIOU",[[1,3515,"\n"]],[3514,3514],[3515,3515]]],[1564817618464,["GJX@GJXAIOU",[[-1,3398,"\n"]],[3398,3398],[3397,3397]]],[1564817619431,["GJX@GJXAIOU",[[-1,3271,"\n"]],[3271,3271],[3270,3270]]],[1564817620399,["GJX@GJXAIOU",[[-1,3168,"\n"]],[3168,3168],[3167,3167]]],[1564817621893,["GJX@GJXAIOU",[[-1,3057,"\n"]],[3057,3057],[3056,3056]]],[1564817636087,["GJX@GJXAIOU",[[1,1373,"**"],[1,1387,"**"]],[1373,1387],[1373,1391]]],[1564817649991,["GJX@GJXAIOU",[[-1,891,"\n"]],[891,891],[890,890]]],[1564817651201,["GJX@GJXAIOU",[[1,950,"\\"]],[950,950],[951,951]]],[1564817651748,["GJX@GJXAIOU",[[-1,950,"\\"]],[951,951],[950,950]]],[1564817652119,["GJX@GJXAIOU",[[-1,950,"\n"]],[950,950],[949,949]]],[1564817652851,["GJX@GJXAIOU",[[-1,1040,"\n"]],[1040,1040],[1039,1039]]],[1564817653588,["GJX@GJXAIOU",[[-1,1085,"\n"]],[1085,1085],[1084,1084]]],[1564817654972,["GJX@GJXAIOU",[[-1,836,"\n"]],[836,836],[835,835]]],[1564817655572,["GJX@GJXAIOU",[[-1,761,"\n"]],[761,761],[760,760]]],[1564817656284,["GJX@GJXAIOU",[[-1,698,"\n"]],[698,698],[697,697]]],[1564817657861,["GJX@GJXAIOU",[[-1,618,"\n"]],[618,618],[617,617]]],[1564817658573,["GJX@GJXAIOU",[[-1,548,"\n"]],[548,548],[547,547]]],[1564817659236,["GJX@GJXAIOU",[[-1,645,"\n"]],[645,645],[644,644]]],[1564817888669,["GJX@GJXAIOU",[[-1,262,"---"]],[265,265],[262,262]]],[1564817907425,["GJX@GJXAIOU",[[-1,1120,"---"],[1,1123," "]],[1120,1123],[1120,1121]]],[1564817908166,["GJX@GJXAIOU",[[-1,1326,"---"],[1,1329," "]],[1326,1329],[1326,1327]]],[1564817908934,["GJX@GJXAIOU",[[-1,1760,"---"],[1,1763," "]],[1760,1763],[1760,1761]]],[1564817909529,["GJX@GJXAIOU",[[-1,2098,"---"],[1,2101," "]],[2098,2101],[2098,2099]]],[1564817910282,["GJX@GJXAIOU",[[-1,2521,"---"],[1,2524," "]],[2521,2524],[2521,2522]]],[1564817911556,["GJX@GJXAIOU",[[-1,2977,"---"],[1,2980," "]],[2977,2980],[2977,2978]]],[1564817913045,["GJX@GJXAIOU",[[-1,3416,"---"],[1,3419," "]],[3416,3419],[3416,3417]]],[1564817913602,["GJX@GJXAIOU",[[-1,3682,"---"],[1,3685," "]],[3682,3685],[3682,3683]]],[1564817914125,["GJX@GJXAIOU",[[-1,3791,"---"],[1,3794," "]],[3791,3794],[3791,3792]]],[1564817914681,["GJX@GJXAIOU",[[-1,4020,"---"],[1,4023," "]],[4020,4023],[4020,4021]]],[1564817915178,["GJX@GJXAIOU",[[-1,4306,"---"],[1,4309," "]],[4306,4309],[4306,4307]]],[1564817915683,["GJX@GJXAIOU",[[-1,4517,"---"],[1,4520," "]],[4517,4520],[4517,4518]]],[1564817916833,["GJX@GJXAIOU",[[-1,5003,"---"],[1,5006," "]],[5003,5006],[5003,5004]]],[1564817917493,["GJX@GJXAIOU",[[-1,5225,"---"],[1,5228," "]],[5225,5228],[5225,5226]]],[1564817918046,["GJX@GJXAIOU",[[-1,5433,"---"],[1,5436," "]],[5433,5436],[5433,5434]]],[1564817918558,["GJX@GJXAIOU",[[-1,5794,"---"],[1,5797," "]],[5794,5797],[5794,5795]]],[1564817918990,["GJX@GJXAIOU",[[-1,6250,"---"],[1,6253," "]],[6250,6253],[6250,6251]]],[1564817919487,["GJX@GJXAIOU",[[-1,6658,"---"],[1,6661," "]],[6658,6661],[6658,6659]]],[1564817925771,["GJX@GJXAIOU",[[-1,503,"---"],[1,506," "]],[503,506],[503,504]]],[1564817928814,["GJX@GJXAIOU",[[-1,437,"---"],[1,440," "]],[437,440],[437,438]]]],null,"GJX@GJXAIOU"],["e1db439f-3321-429b-b38f-4bb71a94386a",1565072720495,"---\nstyle: summer\ntags: [面试]\n---\n## Java 最常见的 208 道面试题：第三模块 多线程\n\n@toc\n\n## 35. 并行和并发有什么区别？\n\n*   并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。\n*   并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。\n*   在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。\n所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。\n\n\n## 36. 线程和进程的区别？\n\n简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。\n\n \n## 37. 守护线程是什么？\n\n守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。\n\n \n## 38. 创建线程有哪几种方式？\n\n①. 继承Thread类创建线程类\n*   定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。\n*   创建Thread子类的实例，即创建了线程对象。\n*   调用线程对象的start()方法来启动该线程。\n\n②. 通过Runnable接口创建线程类\n*   定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。\n*   创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\n*   调用线程对象的start()方法来启动该线程。\n\n③. 通过Callable和Future创建线程\n*   创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。\n*   创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。\n*   使用FutureTask对象作为Thread对象的target创建并启动新线程。\n*   调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。\n\n \n## 39. 说一下 runnable 和 callable 有什么区别？\n\n有点深的问题了，也看出一个Java程序员学习知识的广度。\n\n*   Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；\n\n*   Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。\n\n \n## 40. 线程有哪些状态？\n\n线程通常都有五种状态，**创建、就绪、运行、阻塞和死亡**。\n\n*   创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。\n\n*   就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。\n\n*   运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。\n\n*   阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。\n\n*   死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　\n\n \n## 41. sleep() 和 wait() 有什么区别？\n\nsleep()：方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。\n\nwait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程\n\n \n## 42. notify()和 notifyAll()有什么区别？\n\n*   如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。\n\n*   当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。\n\n*   优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。\n\n \n## 43. 线程的 run()和 start()有什么区别？\n\n每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。\n\nstart()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。\n\nrun()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。 如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。\n\n \n## 44. 创建线程池有哪几种方式？\n\n①. newFixedThreadPool(int nThreads)\n创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。\n\n②. newCachedThreadPool()\n创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。\n\n③. newSingleThreadExecutor()\n这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。\n\n④. newScheduledThreadPool(int corePoolSize)\n创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。\n\n \n## 45. 线程池都有哪些状态？\n\n线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。\n\n![线程池各个状态切换框架图](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIOPwPTKJJXaorw1FJMNRKaOibmppdm8GIib00QCgyibrVhFcU4tvjABoYBUKibVEfQ9UvAvT0libWA9LWg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n \n## 46. 线程池中 submit()和 execute()方法有什么区别？\n\n*   接收的参数不一样\n*   submit有返回值，而execute没有\n*   submit方便Exception处理  \n\n \n## 47. 在 java 程序中怎么保证多线程的运行安全？\n\n线程安全在三个方面体现：\n*   原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；\n*   可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；\n*   有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。\n\n \n## 48. 多线程锁的升级原理是什么？\n\n在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。\n\n![锁升级的图示过程](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIOPwPTKJJXaorw1FJMNRKaO1paWia8rGdhNGDymJ5WibNY8pEibl6m21Fg5Jh6XYQDHkHsTveQUfeuCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n \n## 49. 什么是死锁？\n\n死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。\n此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。\n\n \n## 50. 怎么防止死锁？\n\n死锁的四个必要条件：\n*   **互斥条件**：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源\n*   **请求和保持条件**：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放\n*   **不可剥夺条件**：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放\n*   **环路等待条件**：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系\n\n这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。\n理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。\n所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。\n此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。\n\n \n## 51. ThreadLocal 是什么？有哪些使用场景？\n\n线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。\n\n \n## 52.说一下 synchronized 底层实现原理？\n\nsynchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。\n\nJava中每一个对象都可以作为锁，这是synchronized实现同步的基础：\n*   普通同步方法，锁是当前实例对象\n*   静态同步方法，锁是当前类的class对象\n*   同步方法块，锁是括号里面的对象\n\n \n##   53. synchronized 和 volatile 的区别是什么？\n\n*   volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。\n*   volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。\n*   volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。\n*   volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。\n*   volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。\n\n \n## 54. synchronized 和 Lock 有什么区别？\n\n*   首先synchronized是java内置关键字，在jvm层面，Lock是个java类；\n*   synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；\n*   synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；\n*   用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；\n*   synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；\n*   Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。\n\n \n## 55. synchronized 和 ReentrantLock 区别是什么？\n\nsynchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： \n*   ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 \n*   ReentrantLock可以获取各种锁的信息\n*   ReentrantLock可以灵活地实现多路通知 \n另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。\n\n \n##   56. 说一下 atomic 的原理？\n\nAtomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。\n\nAtomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。",[[1565072677842,["GJX@GJXAIOU",[[-1,34,"# "]],[36,36],[34,34]]],[1565072678288,["GJX@GJXAIOU",[[1,34," "]],[34,34],[35,35]]]],null,"GJX@GJXAIOU"]]}