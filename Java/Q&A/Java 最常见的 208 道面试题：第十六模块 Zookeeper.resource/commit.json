{"compress":true,"commitItems":[["a6630ab1-de87-4e34-81ca-2f1b39a361ca",1563100473801,"## Java 最常见的 208 道面试题：第十六模块答案\n\n[Java团长](javascript:void(0);) _4月9日_\n\n******十六、Zookeeper******\n\n**157\\. zookeeper 是什么？**\n\nzookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 google chubby 的开源实现，是 hadoop 和 hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\n\n**158\\. zookeeper 都有哪些功能？**\n\n*   集群管理：监控节点存活状态、运行请求等。\n\n*   主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。\n\n*   分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。\n\n*   命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。\n\n**159\\. zookeeper 有几种部署模式？**\n\nzookeeper 有三种部署模式：\n\n*   单机部署：一台集群上运行；\n\n*   集群部署：多台集群运行；\n\n*   伪集群部署：一台集群启动多个 zookeeper 实例运行。\n\n**160\\. zookeeper 怎么保证主从节点的状态同步？**\n\nzookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。\n\n**161\\. 集群中为什么要有主节点？**\n\n在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，所以就需要主节点。\n\n**162\\. 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？**\n\n可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。\n\n**163\\. 说一下 zookeeper 的通知机制？**\n\n客户端端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些客户端会收到 zookeeper 的通知，然后客户端可以根据 znode 变化来做出业务上的改变。",[[1563100417977,["GJX@GJXAIOU",[[-1,31,"[Java团长](javascript:void(0);) _4月9日_\n"]],[30,67],[30,30]]]],null,"GJX@GJXAIOU"],["8c206ba9-5fac-4149-9bec-90cd5e854175",1569586158220,"## Java 最常见的 208 道面试题：第十六模块答案\n\n\n******十六、Zookeeper******\n\n**157\\. zookeeper 是什么？**\n\nzookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 google chubby 的开源实现，是 hadoop 和 hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\n\n**158\\. zookeeper 都有哪些功能？**\n\n*   集群管理：监控节点存活状态、运行请求等。\n\n*   主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。\n\n*   分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。\n\n*   命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。\n\n**159\\. zookeeper 有几种部署模式？**\n\nzookeeper 有三种部署模式：\n\n*   单机部署：一台集群上运行；\n\n*   集群部署：多台集群运行；\n\n*   伪集群部署：一台集群启动多个 zookeeper 实例运行。\n\n**160\\. zookeeper 怎么保证主从节点的状态同步？**\n\nzookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。\n\n**161\\. 集群中为什么要有主节点？**\n\n在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，所以就需要主节点。\n\n**162\\. 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？**\n\n可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。\n\n**163\\. 说一下 zookeeper 的通知机制？**\n\n客户端端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些客户端会收到 zookeeper 的通知，然后客户端可以根据 znode 变化来做出业务上的改变。",[[1569586132596,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569586133607,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1569586135443,["GJX@GJXAIOU",[[1,33,"\n"]],[32,32],[33,33]]],[1569586137636,["GJX@GJXAIOU",[[-1,35,"#"]],[35,35],[34,34]]],[1569586141579,["GJX@GJXAIOU",[[-1,60,"答案"]],[62,62],[60,60]]],[1569586146873,["GJX@GJXAIOU",[[1,60," Zookeeper"]],[60,60],[70,70]]],[1569586149659,["GJX@GJXAIOU",[[-1,73,"******十六、Zookeeper******"]],[73,97],[73,73]]],[1569586149886,["GJX@GJXAIOU",[[-1,74,"\n"]],[73,73],[72,72]]],[1569586150019,["GJX@GJXAIOU",[[-1,73,"\n"]],[72,72],[71,71]]],[1569586153804,["GJX@GJXAIOU",[[-1,78,"\\"],[1,79," "]],[78,79],[78,79]]],[1569586154251,["GJX@GJXAIOU",[[-1,236,"\\"],[1,237," "]],[236,237],[236,237]]],[1569586154789,["GJX@GJXAIOU",[[-1,551,"\\"],[1,552," "]],[551,552],[551,552]]],[1569586155252,["GJX@GJXAIOU",[[-1,674,"\\"],[1,675," "]],[674,675],[674,675]]],[1569586155685,["GJX@GJXAIOU",[[-1,920,"\\"],[1,921," "]],[920,921],[920,921]]],[1569586155876,["GJX@GJXAIOU",[[-1,1018,"\\"],[1,1019," "]],[1018,1019],[1018,1019]]],[1569586156104,["GJX@GJXAIOU",[[-1,1108,"\\"],[1,1109," "]],[1108,1109],[1108,1109]]],[1569586158772,["GJX@GJXAIOU",[[1,1103,"## "]],[1119,1119],[1136,1136]]],[1569586159332,["GJX@GJXAIOU",[[-1,1106,"**"],[-1,1134,"**"]],[1136,1136],[1106,1132]]],[1569586160790,["GJX@GJXAIOU",[[1,1013,"## "]],[1028,1028],[1069,1069]]],[1569586161276,["GJX@GJXAIOU",[[-1,1016,"**"],[-1,1067,"**"]],[1069,1069],[1016,1065]]],[1569586162564,["GJX@GJXAIOU",[[1,915,"## "]],[929,929],[940,940]]],[1569586162972,["GJX@GJXAIOU",[[-1,918,"**"],[-1,938,"**"]],[940,940],[918,936]]],[1569586164651,["GJX@GJXAIOU",[[1,669,"## "]],[686,686],[706,706]]],[1569586165115,["GJX@GJXAIOU",[[-1,672,"**"],[-1,704,"**"]],[706,706],[672,702]]],[1569586167379,["GJX@GJXAIOU",[[1,546,"## "]],[560,560],[577,577]]],[1569586167838,["GJX@GJXAIOU",[[-1,549,"**"],[-1,575,"**"]],[577,577],[549,573]]],[1569586169558,["GJX@GJXAIOU",[[1,231,"## "]],[244,244],[261,261]]],[1569586169964,["GJX@GJXAIOU",[[-1,234,"**"],[-1,259,"**"]],[261,261],[234,257]]],[1569586171340,["GJX@GJXAIOU",[[1,73,"## "]],[84,84],[100,100]]],[1569586171812,["GJX@GJXAIOU",[[-1,76,"**"],[-1,98,"**"]],[100,100],[76,96]]],[1569586173987,["GJX@GJXAIOU",[[-1,283,"\n"]],[283,283],[282,282]]],[1569586175341,["GJX@GJXAIOU",[[-1,359,"\n"]],[359,359],[358,358]]],[1569586176315,["GJX@GJXAIOU",[[-1,481,"\n"]],[481,481],[480,480]]],[1569586179124,["GJX@GJXAIOU",[[-1,589,"\n"]],[589,589],[588,588]]],[1569586179716,["GJX@GJXAIOU",[[-1,607,"\n"]],[607,607],[606,606]]],[1569586180332,["GJX@GJXAIOU",[[-1,624,"\n"]],[624,624],[623,623]]],[1569586183903,["GJX@GJXAIOU",[[1,262,"**"],[1,266,"**"]],[262,266],[262,270]]],[1569586186675,["GJX@GJXAIOU",[[1,291,"**"],[1,296,"**"]],[291,296],[291,300]]],[1569586189067,["GJX@GJXAIOU",[[1,371,"**"],[1,375,"**"]],[371,375],[371,379]]],[1569586191261,["GJX@GJXAIOU",[[1,497,"**"],[1,501,"**"]],[497,501],[497,505]]],[1569586200091,["GJX@GJXAIOU",[[1,73,"\n"]],[71,71],[72,72]]],[1569586201788,["GJX@GJXAIOU",[[1,72,"@toc"]],[72,72],[76,76]]]],null,"GJX@GJXAIOU"]]}