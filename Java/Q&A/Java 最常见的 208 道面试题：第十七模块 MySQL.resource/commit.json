{"compress":true,"commitItems":[["1e6e4bad-9498-4fc9-b565-24cd18bdbbdf",1563100497077,"## Java 最常见的 208 道面试题：第十七模块答案\n\n[Java团长](javascript:void(0);) _4月10日_\n\n**十七、MySql**\n\n**164\\. 数据库的三范式是什么？**\n\n*   第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。\n\n*   第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。\n\n*   第三范式：任何非主属性不依赖于其它非主属性。\n\n**165\\. 一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？**\n\n*   表类型如果是 MyISAM ，那 id 就是 18。\n\n*   表类型如果是 InnoDB，那 id 就是 15。\n\nInnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。\n\n**166\\. 如何获取当前数据库版本？**\n\n使用 select version() 获取当前 MySQL 数据库版本。\n\n**167\\. 说一下 ACID 是什么？**\n\n*   Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。\n\n*   Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。\n\n*   Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。\n\n*   Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n**168\\. char 和 varchar 的区别是什么？**\n\nchar(n) ：固定长度类型，比如订阅 char(10)，当你输入\"abc\"三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。\n\nchat 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。\n\nvarchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。\n\n所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。\n\n**169\\. float 和 double 的区别是什么？**\n\n*   float 最多可以存储 8 位的十进制数，并在内存中占 4 字节。\n\n*   double 最可可以存储 16 位的十进制数，并在内存中占 8 字节。\n\n**170\\. mysql 的内连接、左连接、右连接有什么区别？**\n\n内连接关键字：inner join；左连接：left join；右连接：right join。\n\n内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。\n\n**171\\. mysql 索引是怎么实现的？**\n\n索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。\n\n具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。\n\n**172\\. 怎么验证 mysql 的索引是否满足需求？**\n\n使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。\n\nexplain 语法：explain select * from table where type=1。\n\n**173\\. 说一下数据库的事务隔离？**\n\nMySQL 的事务隔离是在 MySQL. ini 配置文件里添加的，在文件的最后添加：transaction-isolation = REPEATABLE-READ\n\n可用的配置值：READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE。\n\n*   READ-UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。\n\n*   READ-COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。\n\n*   REPEATABLE-READ：可重复读，默认级别，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读）。\n\n*   SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。\n\n脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。\n\n不可重复读 ：是指在一个事务内，多次读同一数据。\n\n幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。\n\n**174\\. 说一下 mysql 常用的引擎？**\n\nInnoDB 引擎：InnoDB 引擎提供了对数据库 acid 事务的支持，并且还提供了行级锁和外键的约束，它的设计的目标就是处理大数据容量的数据库系统。MySQL 运行的时候，InnoDB 会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎是不支持全文搜索，同时启动也比较的慢，它是不会保存表的行数的，所以当进行 select count(*) from table 指令的时候，需要进行扫描全表。由于锁的粒度小，写操作是不会锁定全表的,所以在并发度较高的场景下使用会提升效率的。\n\nMyIASM 引擎：MySQL 的默认引擎，但不提供事务的支持，也不支持行级锁和外键。因此当执行插入和更新语句时，即执行写操作的时候需要锁定这个表，所以会导致效率会降低。不过和 InnoDB 不同的是，MyIASM 引擎是保存了表的行数，于是当进行 select count(*) from table 语句时，可以直接的读取已经保存的值而不需要进行扫描全表。所以，如果表的读操作远远多于写操作时，并且不需要事务的支持的，可以将 MyIASM 作为数据库引擎的首选。\n\n**175\\. 说一下 mysql 的行锁和表锁？**\n\nMyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。\n\n*   表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。\n\n*   行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。\n\n**176\\. 说一下乐观锁和悲观锁？**\n\n*   乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。\n\n*   悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。\n\n数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。\n\n**177\\. mysql 问题排查都有哪些手段？**\n\n*   使用 show processlist 命令查看当前所有连接信息。\n\n*   使用 explain 命令查询 SQL 语句执行计划。\n\n*   开启慢查询日志，查看慢查询的 SQL。\n\n**178\\. 如何做 mysql 的性能优化？**\n\n*   为搜索字段创建索引。\n\n*   避免使用 select *，列出需要查询的字段。\n\n*   垂直分割分表。\n\n*   选择正确的存储引擎。",[[1563100440155,["GJX@GJXAIOU",[[-1,31,"[Java团长](javascript:void(0);) _4月10日_"]],[31,68],[31,31]]]],null,"GJX@GJXAIOU"],["0e6c8858-1bc1-4745-b31a-963cdcee79d3",1569585254777,"## Java 最常见的 208 道面试题：第十七模块答案\n\n\n\n**十七、MySql**\n\n**164\\. 数据库的三范式是什么？**\n\n*   第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。\n\n*   第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。\n\n*   第三范式：任何非主属性不依赖于其它非主属性。\n\n**165\\. 一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？**\n\n*   表类型如果是 MyISAM ，那 id 就是 18。\n\n*   表类型如果是 InnoDB，那 id 就是 15。\n\nInnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。\n\n**166\\. 如何获取当前数据库版本？**\n\n使用 select version() 获取当前 MySQL 数据库版本。\n\n**167\\. 说一下 ACID 是什么？**\n\n*   Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。\n\n*   Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。\n\n*   Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。\n\n*   Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n**168\\. char 和 varchar 的区别是什么？**\n\nchar(n) ：固定长度类型，比如订阅 char(10)，当你输入\"abc\"三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。\n\nchat 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。\n\nvarchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。\n\n所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。\n\n**169\\. float 和 double 的区别是什么？**\n\n*   float 最多可以存储 8 位的十进制数，并在内存中占 4 字节。\n\n*   double 最可可以存储 16 位的十进制数，并在内存中占 8 字节。\n\n**170\\. mysql 的内连接、左连接、右连接有什么区别？**\n\n内连接关键字：inner join；左连接：left join；右连接：right join。\n\n内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。\n\n**171\\. mysql 索引是怎么实现的？**\n\n索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。\n\n具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。\n\n**172\\. 怎么验证 mysql 的索引是否满足需求？**\n\n使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。\n\nexplain 语法：explain select * from table where type=1。\n\n**173\\. 说一下数据库的事务隔离？**\n\nMySQL 的事务隔离是在 MySQL. ini 配置文件里添加的，在文件的最后添加：transaction-isolation = REPEATABLE-READ\n\n可用的配置值：READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE。\n\n*   READ-UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。\n\n*   READ-COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。\n\n*   REPEATABLE-READ：可重复读，默认级别，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读）。\n\n*   SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。\n\n脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。\n\n不可重复读 ：是指在一个事务内，多次读同一数据。\n\n幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。\n\n**174\\. 说一下 mysql 常用的引擎？**\n\nInnoDB 引擎：InnoDB 引擎提供了对数据库 acid 事务的支持，并且还提供了行级锁和外键的约束，它的设计的目标就是处理大数据容量的数据库系统。MySQL 运行的时候，InnoDB 会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎是不支持全文搜索，同时启动也比较的慢，它是不会保存表的行数的，所以当进行 select count(*) from table 指令的时候，需要进行扫描全表。由于锁的粒度小，写操作是不会锁定全表的,所以在并发度较高的场景下使用会提升效率的。\n\nMyIASM 引擎：MySQL 的默认引擎，但不提供事务的支持，也不支持行级锁和外键。因此当执行插入和更新语句时，即执行写操作的时候需要锁定这个表，所以会导致效率会降低。不过和 InnoDB 不同的是，MyIASM 引擎是保存了表的行数，于是当进行 select count(*) from table 语句时，可以直接的读取已经保存的值而不需要进行扫描全表。所以，如果表的读操作远远多于写操作时，并且不需要事务的支持的，可以将 MyIASM 作为数据库引擎的首选。\n\n**175\\. 说一下 mysql 的行锁和表锁？**\n\nMyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。\n\n*   表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。\n\n*   行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。\n\n**176\\. 说一下乐观锁和悲观锁？**\n\n*   乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。\n\n*   悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。\n\n数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。\n\n**177\\. mysql 问题排查都有哪些手段？**\n\n*   使用 show processlist 命令查看当前所有连接信息。\n\n*   使用 explain 命令查询 SQL 语句执行计划。\n\n*   开启慢查询日志，查看慢查询的 SQL。\n\n**178\\. 如何做 mysql 的性能优化？**\n\n*   为搜索字段创建索引。\n\n*   避免使用 select *，列出需要查询的字段。\n\n*   垂直分割分表。\n\n*   选择正确的存储引擎。",[[1569585230398,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569585231544,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1569585233397,["GJX@GJXAIOU",[[-1,34,"#"]],[35,35],[34,34]]],[1569585238709,["GJX@GJXAIOU",[[-1,59,"答案"]],[59,61],[59,59]]],[1569585240630,["GJX@GJXAIOU",[[1,59," Mysql"]],[59,59],[65,65]]],[1569585243793,["GJX@GJXAIOU",[[-1,60,"Mysql"]],[65,65],[60,60]]],[1569585247442,["GJX@GJXAIOU",[[1,60,"MySQL"]],[60,60],[65,65]]],[1569585254232,["GJX@GJXAIOU",[[-1,69,"**十七、MySql**\n"]],[68,81],[68,68]]],[1569585254732,["GJX@GJXAIOU",[[-1,69,"\n"]],[68,68],[67,67]]],[1569585265457,["GJX@GJXAIOU",[[-1,74,"\\"],[1,75," "]],[74,75],[74,75]]],[1569585266140,["GJX@GJXAIOU",[[-1,222,"\\"],[1,223," "]],[222,223],[222,223]]],[1569585266793,["GJX@GJXAIOU",[[-1,406,"\\"],[1,407," "]],[406,407],[406,407]]],[1569585267350,["GJX@GJXAIOU",[[-1,469,"\\"],[1,470," "]],[469,470],[469,470]]],[1569585267856,["GJX@GJXAIOU",[[-1,947,"\\"],[1,948," "]],[947,948],[947,948]]],[1569585268437,["GJX@GJXAIOU",[[-1,1217,"\\"],[1,1218," "]],[1217,1218],[1217,1218]]],[1569585268925,["GJX@GJXAIOU",[[-1,1333,"\\"],[1,1334," "]],[1333,1334],[1333,1334]]],[1569585269126,["GJX@GJXAIOU",[[-1,1475,"\\"],[1,1476," "]],[1475,1476],[1475,1476]]],[1569585269338,["GJX@GJXAIOU",[[-1,1664,"\\"],[1,1665," "]],[1664,1665],[1664,1665]]],[1569585269529,["GJX@GJXAIOU",[[-1,1797,"\\"],[1,1798," "]],[1797,1798],[1797,1798]]],[1569585269744,["GJX@GJXAIOU",[[-1,2497,"\\"],[1,2498," "]],[2497,2498],[2497,2498]]],[1569585270482,["GJX@GJXAIOU",[[-1,3004,"\\"],[1,3005," "]],[3004,3005],[3004,3005]]],[1569585270946,["GJX@GJXAIOU",[[-1,3162,"\\"],[1,3163," "]],[3162,3163],[3162,3163]]],[1569585271506,["GJX@GJXAIOU",[[-1,3438,"\\"],[1,3439," "]],[3438,3439],[3438,3439]]],[1569585272029,["GJX@GJXAIOU",[[-1,3564,"\\"],[1,3565," "]],[3564,3565],[3564,3565]]],[1569585284397,["GJX@GJXAIOU",[[1,69,"## "]],[77,77],[93,93]]],[1569585285151,["GJX@GJXAIOU",[[-1,72,"**"],[-1,91,"**"]],[93,93],[72,89]]],[1569585287577,["GJX@GJXAIOU",[[-1,133,"\n"]],[133,133],[132,132]]],[1569585289481,["GJX@GJXAIOU",[[-1,186,"\n"]],[186,186],[185,185]]],[1569585292071,["GJX@GJXAIOU",[[-1,85,"是什么？"]],[89,89],[85,85]]],[1569585293936,["GJX@GJXAIOU",[[1,85,"概念"]],[85,85],[87,87]]],[1569585298578,["GJX@GJXAIOU",[[1,67,"@toc"]],[67,67],[71,71]]],[1569585301824,["GJX@GJXAIOU",[[1,216,"## "]],[219,219],[289,289]]],[1569585302983,["GJX@GJXAIOU",[[-1,219,"**"],[-1,287,"**"]],[289,289],[219,285]]],[1569585306548,["GJX@GJXAIOU",[[-1,318,"\n"]],[318,318],[317,317]]],[1569585308412,["GJX@GJXAIOU",[[-1,348,"\n"]],[348,348],[347,347]]],[1569585313077,["GJX@GJXAIOU",[[1,348,"\n"]],[348,348],[349,349]]],[1569585314763,["GJX@GJXAIOU",[[1,398,"## "]],[401,401],[423,423]]],[1569585315772,["GJX@GJXAIOU",[[-1,401,"**"],[-1,421,"**"]],[423,423],[401,419]]],[1569585319700,["GJX@GJXAIOU",[[1,460,"## "]],[470,470],[486,486]]],[1569585320158,["GJX@GJXAIOU",[[-1,463,"**"],[-1,484,"**"]],[486,486],[463,482]]],[1569585322676,["GJX@GJXAIOU",[[-1,937,"**"],[-1,967,"**"]],[948,948],[937,965]]],[1569585323516,["GJX@GJXAIOU",[[1,937,"## "]],[937,965],[968,968]]],[1569585326364,["GJX@GJXAIOU",[[-1,1206,"**"],[-1,1236,"**"]],[1216,1216],[1206,1234]]],[1569585326996,["GJX@GJXAIOU",[[1,1206,"## "]],[1206,1234],[1237,1237]]],[1569585328996,["GJX@GJXAIOU",[[-1,1321,"**"],[-1,1353,"**"]],[1329,1329],[1321,1351]]],[1569585329628,["GJX@GJXAIOU",[[1,1321,"## "]],[1321,1351],[1354,1354]]],[1569585332452,["GJX@GJXAIOU",[[1,1470,"---\nstyle: summer\ntags: [面试]\n---"]],[1470,1470],[1502,1502]]],[1569585334235,["GJX@GJXAIOU",[[-1,1470,"---\nstyle: summer\ntags: [面试]\n---"]],[1502,1502],[1470,1470]]],[1569585334779,["GJX@GJXAIOU",[[-1,1462,"**"],[-1,1485,"**"]],[1470,1470],[1462,1483]]],[1569585335279,["GJX@GJXAIOU",[[1,1462,"## "]],[1462,1483],[1486,1486]]],[1569585337839,["GJX@GJXAIOU",[[-1,1650,"**"],[-1,1679,"**"]],[1659,1659],[1650,1677]]],[1569585338316,["GJX@GJXAIOU",[[1,1650,"## "]],[1650,1677],[1680,1680]]],[1569585339856,["GJX@GJXAIOU",[[-1,1782,"**"],[-1,1802,"**"]],[1789,1789],[1782,1800]]],[1569585340278,["GJX@GJXAIOU",[[1,1782,"## "]],[1782,1800],[1803,1803]]],[1569585347860,["GJX@GJXAIOU",[[1,2224,"**"],[1,2226,"**"]],[2224,2226],[2224,2230]]],[1569585350436,["GJX@GJXAIOU",[[1,2302,"**"],[1,2307,"**"]],[2302,2307],[2302,2311]]],[1569585352859,["GJX@GJXAIOU",[[1,2332,"**"],[1,2334,"**"]],[2332,2334],[2332,2338]]],[1569585356150,["GJX@GJXAIOU",[[-1,2493,"**"],[-1,2517,"**"]],[2505,2505],[2493,2515]]],[1569585356622,["GJX@GJXAIOU",[[1,2493,"## "]],[2493,2515],[2518,2518]]],[1569585360268,["GJX@GJXAIOU",[[-1,2999,"**"],[-1,3024,"**"]],[3008,3008],[2999,3022]]],[1569585360741,["GJX@GJXAIOU",[[1,2999,"## "]],[2999,3022],[3025,3025]]],[1569585364342,["GJX@GJXAIOU",[[-1,3156,"**"],[-1,3175,"**"]],[3165,3165],[3156,3173]]],[1569585364862,["GJX@GJXAIOU",[[1,3156,"## "]],[3156,3173],[3176,3176]]],[1569585367964,["GJX@GJXAIOU",[[1,3459,"****"]],[3459,3459],[3461,3461]]],[1569585368497,["GJX@GJXAIOU",[[1,3459,"## "]],[3461,3461],[3466,3466]]],[1569585370791,["GJX@GJXAIOU",[[-1,3459,"## ****"]],[3466,3466],[3459,3459]]],[1569585372371,["GJX@GJXAIOU",[[-1,3431,"**"],[-1,3456,"**"]],[3443,3443],[3431,3454]]],[1569585372844,["GJX@GJXAIOU",[[1,3431,"## "]],[3431,3454],[3457,3457]]],[1569585374692,["GJX@GJXAIOU",[[-1,3556,"**"],[-1,3580,"**"]],[3567,3567],[3556,3578]]],[1569585375109,["GJX@GJXAIOU",[[1,3556,"## "]],[3556,3578],[3581,3581]]],[1569585376645,["GJX@GJXAIOU",[[-1,3497,"\n"]],[3497,3497],[3496,3496]]],[1569585377252,["GJX@GJXAIOU",[[-1,3529,"\n"]],[3529,3529],[3528,3528]]],[1569585378156,["GJX@GJXAIOU",[[-1,3596,"\n"]],[3596,3596],[3595,3595]]],[1569585378758,["GJX@GJXAIOU",[[-1,3625,"\n"]],[3625,3625],[3624,3624]]],[1569585379543,["GJX@GJXAIOU",[[-1,3637,"\n"]],[3637,3637],[3636,3636]]]],null,"GJX@GJXAIOU"]]}