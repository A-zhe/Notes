{"compress":true,"commitItems":[["b8c11e8c-a844-4882-bab5-fd474fc2d429",1563099814582,"## Java 最常见的 208 道面试题：第十二模块答案\n\n[Java团长](javascript:void(0);) _3月31日_\n\n**十二、Hibernate**\n\n**113\\. 为什么要使用 hibernate？**\n\n*   对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。\n\n*   Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作\n\n*   hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。\n\n*   hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。\n\n**114\\. 什么是 ORM 框架？**\n\n对象-关系映射（Object-Relational Mapping，简称ORM），面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。\n\n**115\\. hibernate 中如何在控制台查看打印的 sql 语句？**\n\n参考：blog.csdn.net/Randy_Wang_/article/details/79460306\n\n**116\\. hibernate 有几种查询方式？**\n\n1.  ## hql查询\n\n2.  ## sql查询\n\n3.  ## 条件查询\n\n```\nhql查询，sql查询，条件查询\n```\n\n**117\\. hibernate 实体类可以被定义为 final 吗？**\n\n可以将Hibernate的实体类定义为final类，但这种做法并不好。因为Hibernate会使用代理模式在延迟关联的情况下提高性能，如果你把实体类定义成final类之后，因为 Java不允许对final类进行扩展，所以Hibernate就无法再使用代理了，如此一来就限制了使用可以提升性能的手段。不过，如果你的持久化类实现了一个接口而且在该接口中声明了所有定义于实体类中的所有public的方法轮到话，你就能够避免出现前面所说的不利后果。\n\n**118\\. 在 hibernate 中使用 Integer 和 int 做映射有什么区别？**\n\n在Hibernate中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。\n\n**119\\. hibernate 是如何工作的？**\n\nhibernate工作原理：\n\n1.  通过Configuration config = new Configuration().configure();//读取并解析hibernate.cfg.xml配置文件\n\n2.  由hibernate.cfg.xml中的<mapping resource=\"com/xx/User.hbm.xml\"/>读取并解析映射信息\n\n3.  通过SessionFactory sf = config.buildSessionFactory();//创建SessionFactory\n\n4.  Session session = sf.openSession();//打开Sesssion\n\n5.  Transaction tx = session.beginTransaction();//创建并启动事务Transation\n\n6.  persistent operate操作数据，持久化操作\n\n7.  tx.commit();//提交事务\n\n8.  关闭Session\n\n9.  关闭SesstionFactory\n\n**120\\. get()和 load()的区别？**\n\n*   load() 没有使用对象的其他属性的时候，没有SQL  延迟加载\n\n*   get() 没有使用对象的其他属性的时候，也生成了SQL  立即加载\n\n**121\\. 说一下 hibernate 的缓存机制？**\n\nHibernate中的缓存分为一级缓存和二级缓存。\n\n一级缓存就是  Session 级别的缓存，在事务范围内有效是,内置的不能被卸载。二级缓存是 SesionFactory级别的缓存，从应用启动到应用结束有效。是可选的，默认没有二级缓存，需要手动开启。保存数据库后，缓存在内存中保存一份，如果更新了数据库就要同步更新。\n\n什么样的数据适合存放到第二级缓存中？\n\n*   很少被修改的数据   帖子的最后回复时间\n\n*   经常被查询的数据   电商的地点\n\n*   不是很重要的数据，允许出现偶尔并发的数据\n\n*   不会被并发访问的数据\n\n*   常量数据\n\n扩展：hibernate的二级缓存默认是不支持分布式缓存的。使用  memcahe,redis等中央缓存来代替二级缓存。\n\n**122\\. hibernate 对象有哪些状态？**\n\nhibernate里对象有三种状态：\n\n1.  Transient（瞬时）：对象刚new出来，还没设id，设了其他值。\n\n2.  Persistent（持久）：调用了save()、saveOrUpdate()，就变成Persistent，有id。\n\n3.  Detached（脱管）：当session  close()完之后，变成Detached。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIOvqXXzXPicacuC197UIKZfM3BiapgtPw2oOJz7kDWMdTKicbTCcLsunQtIDoRwWDBdZTUckm8WZ8kHg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**123\\. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？**\n\nopenSession 从字面上可以看得出来，是打开一个新的session对象，而且每次使用都是打开一个新的session，假如连续使用多次，则获得的session不是同一个对象，并且使用完需要调用close方法关闭session。\n\ngetCurrentSession ，从字面上可以看得出来，是获取当前上下文一个session对象，当第一次使用此方法时，会自动产生一个session对象，并且连续使用多次时，得到的session都是同一个对象，这就是与openSession的区别之一，简单而言，getCurrentSession 就是：如果有已经使用的，用旧的，如果没有，建新的。\n\n注意：在实际开发中，往往使用getCurrentSession多，因为一般是处理同一个事务（即是使用一个数据库的情况），所以在一般情况下比较少使用openSession或者说openSession是比较老旧的一套接口了。\n\n**124\\. hibernate 实体类必须要有无参构造函数吗？为什么？**\n\n必须，因为hibernate框架会调用这个默认构造方法来构造实例对象，即Class类的newInstance方法，这个方法就是通过调用默认构造方法来创建实例对象的。\n\n另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里，否则new Xxxx()是会报错的，所以默认的构造方法不是必须的，只在有多个构造方法时才是必须的，这里“必须”指的是“必须手动写出来”。\n\n**（完）**\n\n**Java团长**\n\n专注于Java干货分享\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIOvqXXzXPicacuC197UIKZfM2Y2Ut0V7Q8WODSnRibvKrv384kwA4lSQGB2vMzV1iapLgp6a4P84ezkg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n扫描上方二维码获取更多Java干货\n\n![](https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzIwMTY0NDU3Nw==&mid=2651938472&idx=2&sn=d37ad24b9a7e640362cc3b060872d0d7&send_time=)\n\n微信扫一扫\n关注该公众号",[[1563099764625,["GJX@GJXAIOU",[[-1,31,"[Java团长](javascript:void(0);) _3月31日_"]],[31,68],[31,31]]],[1563100065561,["GJX@GJXAIOU",[[-1,611,"blog.csdn.net/Randy_Wang_/article/details/79460306"],[1,661," Hibernate在控制台打印sql语句以及参数"]],[611,661],[636,636]]],[1563100068548,["GJX@GJXAIOU",[[1,611,"j"],[-1,863," "],[1,864," "],[-1,1735," "],[1,1736," "],[-1,1775," "],[1,1776," "],[-1,1847," "],[1,1848," "],[-1,2008,"   "],[1,2011,"   "],[-1,2034,"   "],[1,2037,"   "],[-1,2128," "],[1,2129," "],[-1,2339," "],[1,2340," "]],[611,611],[612,612]]],[1563100068947,["GJX@GJXAIOU",[[1,612,"ava"]],[612,612],[615,615]]],[1563100069913,["GJX@GJXAIOU",[[-1,611,"java"]],[615,615],[611,611]]],[1563100073810,["GJX@GJXAIOU",[[1,611,"Java-"]],[611,611],[616,616]]],[1563100074113,["GJX@GJXAIOU",[[1,617," "]],[616,616],[617,617]]],[1563100074468,["GJX@GJXAIOU",[[1,617,">"]],[617,617],[618,618]]],[1563100074690,["GJX@GJXAIOU",[[1,619," "]],[618,618],[619,619]]],[1563100078625,["GJX@GJXAIOU",[[1,619,"Blog"]],[619,619],[623,623]]],[1563100079828,["GJX@GJXAIOU",[[1,624," "]],[623,623],[624,624]]],[1563100080108,["GJX@GJXAIOU",[[1,624,"-"]],[624,624],[625,625]]],[1563100080258,["GJX@GJXAIOU",[[1,626," "]],[625,625],[626,626]]],[1563100081200,["GJX@GJXAIOU",[[-1,626," "]],[626,626],[625,625]]],[1563100081706,["GJX@GJXAIOU",[[1,625,">"]],[625,625],[626,626]]],[1563100081930,["GJX@GJXAIOU",[[1,627," "]],[626,626],[627,627]]],[1563100098284,["GJX@GJXAIOU",[[1,729,"\n"],[1,745,"\n\nHQL:  Hibernate Query Language. 面向对象的写法:\nQuery query = session.createQuery(\"from Customer where name = ?\");\nquery.setParameter(0, \"苍老师\");\nQuery.list();\n\n\n\nQBC:  Query By Criteria.(条件查询)\nCriteria criteria = session.createCriteria(Customer.class);\ncriteria.add(Restrictions.eq(\"name\", \"花姐\"));\nList<Customer> list = criteria.list();\n\n\n\nSQL:\nSQLQuery query = session.createSQLQuery(\"select * from customer\");\nList<Object[]> list = query.list();\n\nSQLQuery query = session.createSQLQuery(\"select * from customer\");\nquery.addEntity(Customer.class);\nList<Customer> list = query.list();\n\n\n\nHql： 具体分类\n1、 属性查询 2、 参数查询、命名参数查询 3、 关联查询 4、 分页查询 5、 统计函数\n\n\n\nHQL和SQL的区别\n\nHQL是面向对象查询操作的，SQL是结构化查询语言 是面向数据库表结构的"]],[729,745],[1437,1437]]],[1563100123529,["GJX@GJXAIOU",[[-1,4017,"**（完）**"],[-1,4025,"\n**Java团长**\n\n专注于Java干货分享\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIOvqXXzXPicacuC197UIKZfM2Y2Ut0V7Q8WODSnRibvKrv384kwA4lSQGB2vMzV1iapLgp6a4P84ezkg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n扫描上方二维码获取更多Java干货\n\n![](https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzIwMTY0NDU3Nw==&mid=2651938472&idx=2&sn=d37ad24b9a7e640362cc3b060872d0d7&send_time=)\n\n微信扫一扫\n关注该公众号"]],[4017,4417],[4017,4017]]]],null,"GJX@GJXAIOU"],["fefced4b-69b6-4710-b588-a771907583dd",1569585736921,"## Java 最常见的 208 道面试题：第十二模块答案\n\n\n\n**十二、Hibernate**\n\n**113\\. 为什么要使用 hibernate？**\n\n*   对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。\n\n*   Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作\n\n*   hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。\n\n*   hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。\n\n**114\\. 什么是 ORM 框架？**\n\n对象-关系映射（Object-Relational Mapping，简称ORM），面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。\n\n**115\\. hibernate 中如何在控制台查看打印的 sql 语句？**\n\n参考：Java- > Blog ->  Hibernate在控制台打印sql语句以及参数\n\n**116\\. hibernate 有几种查询方式？**\n\n1.  ## hql查询\n\n2.  ## sql查询\n\n3.  ## 条件查询\n\n```\n\nhql查询，sql查询，条件查询\n\nHQL:  Hibernate Query Language. 面向对象的写法:\nQuery query = session.createQuery(\"from Customer where name = ?\");\nquery.setParameter(0, \"苍老师\");\nQuery.list();\n\n\n\nQBC:  Query By Criteria.(条件查询)\nCriteria criteria = session.createCriteria(Customer.class);\ncriteria.add(Restrictions.eq(\"name\", \"花姐\"));\nList<Customer> list = criteria.list();\n\n\n\nSQL:\nSQLQuery query = session.createSQLQuery(\"select * from customer\");\nList<Object[]> list = query.list();\n\nSQLQuery query = session.createSQLQuery(\"select * from customer\");\nquery.addEntity(Customer.class);\nList<Customer> list = query.list();\n\n\n\nHql： 具体分类\n1、 属性查询 2、 参数查询、命名参数查询 3、 关联查询 4、 分页查询 5、 统计函数\n\n\n\nHQL和SQL的区别\n\nHQL是面向对象查询操作的，SQL是结构化查询语言 是面向数据库表结构的\n```\n\n**117\\. hibernate 实体类可以被定义为 final 吗？**\n\n可以将Hibernate的实体类定义为final类，但这种做法并不好。因为Hibernate会使用代理模式在延迟关联的情况下提高性能，如果你把实体类定义成final类之后，因为 Java不允许对final类进行扩展，所以Hibernate就无法再使用代理了，如此一来就限制了使用可以提升性能的手段。不过，如果你的持久化类实现了一个接口而且在该接口中声明了所有定义于实体类中的所有public的方法轮到话，你就能够避免出现前面所说的不利后果。\n\n**118\\. 在 hibernate 中使用 Integer 和 int 做映射有什么区别？**\n\n在Hibernate中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。\n\n**119\\. hibernate 是如何工作的？**\n\nhibernate工作原理：\n\n1.  通过Configuration config = new Configuration().configure();//读取并解析hibernate.cfg.xml配置文件\n\n2.  由hibernate.cfg.xml中的<mapping resource=\"com/xx/User.hbm.xml\"/>读取并解析映射信息\n\n3.  通过SessionFactory sf = config.buildSessionFactory();//创建SessionFactory\n\n4.  Session session = sf.openSession();//打开Sesssion\n\n5.  Transaction tx = session.beginTransaction();//创建并启动事务Transation\n\n6.  persistent operate操作数据，持久化操作\n\n7.  tx.commit();//提交事务\n\n8.  关闭Session\n\n9.  关闭SesstionFactory\n\n**120\\. get()和 load()的区别？**\n\n*   load() 没有使用对象的其他属性的时候，没有SQL  延迟加载\n\n*   get() 没有使用对象的其他属性的时候，也生成了SQL  立即加载\n\n**121\\. 说一下 hibernate 的缓存机制？**\n\nHibernate中的缓存分为一级缓存和二级缓存。\n\n一级缓存就是  Session 级别的缓存，在事务范围内有效是,内置的不能被卸载。二级缓存是 SesionFactory级别的缓存，从应用启动到应用结束有效。是可选的，默认没有二级缓存，需要手动开启。保存数据库后，缓存在内存中保存一份，如果更新了数据库就要同步更新。\n\n什么样的数据适合存放到第二级缓存中？\n\n*   很少被修改的数据   帖子的最后回复时间\n\n*   经常被查询的数据   电商的地点\n\n*   不是很重要的数据，允许出现偶尔并发的数据\n\n*   不会被并发访问的数据\n\n*   常量数据\n\n扩展：hibernate的二级缓存默认是不支持分布式缓存的。使用  memcahe,redis等中央缓存来代替二级缓存。\n\n**122\\. hibernate 对象有哪些状态？**\n\nhibernate里对象有三种状态：\n\n1.  Transient（瞬时）：对象刚new出来，还没设id，设了其他值。\n\n2.  Persistent（持久）：调用了save()、saveOrUpdate()，就变成Persistent，有id。\n\n3.  Detached（脱管）：当session  close()完之后，变成Detached。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIOvqXXzXPicacuC197UIKZfM3BiapgtPw2oOJz7kDWMdTKicbTCcLsunQtIDoRwWDBdZTUckm8WZ8kHg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**123\\. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？**\n\nopenSession 从字面上可以看得出来，是打开一个新的session对象，而且每次使用都是打开一个新的session，假如连续使用多次，则获得的session不是同一个对象，并且使用完需要调用close方法关闭session。\n\ngetCurrentSession ，从字面上可以看得出来，是获取当前上下文一个session对象，当第一次使用此方法时，会自动产生一个session对象，并且连续使用多次时，得到的session都是同一个对象，这就是与openSession的区别之一，简单而言，getCurrentSession 就是：如果有已经使用的，用旧的，如果没有，建新的。\n\n注意：在实际开发中，往往使用getCurrentSession多，因为一般是处理同一个事务（即是使用一个数据库的情况），所以在一般情况下比较少使用openSession或者说openSession是比较老旧的一套接口了。\n\n**124\\. hibernate 实体类必须要有无参构造函数吗？为什么？**\n\n必须，因为hibernate框架会调用这个默认构造方法来构造实例对象，即Class类的newInstance方法，这个方法就是通过调用默认构造方法来创建实例对象的。\n\n另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里，否则new Xxxx()是会报错的，所以默认的构造方法不是必须的，只在有多个构造方法时才是必须的，这里“必须”指的是“必须手动写出来”。\n\n\n",[[1569585719412,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569585720756,["GJX@GJXAIOU",[[1,0,"---\nstyle: summer\ntags: [面试]\n---"]],[0,0],[32,32]]],[1569585724036,["GJX@GJXAIOU",[[-1,60,"答案"]],[60,62],[60,60]]],[1569585726452,["GJX@GJXAIOU",[[1,60," Hibernate"]],[60,60],[70,70]]],[1569585730085,["GJX@GJXAIOU",[[-1,74,"**十二、Hibernate**"]],[74,90],[74,74]]],[1569585730356,["GJX@GJXAIOU",[[-1,75,"\n"]],[74,74],[73,73]]],[1569585731051,["GJX@GJXAIOU",[[-1,74,"\n"]],[74,74],[73,73]]],[1569585736045,["GJX@GJXAIOU",[[-1,326,"\\"],[1,327," "]],[326,327],[326,327]]],[1569585736612,["GJX@GJXAIOU",[[-1,594,"\\"],[1,595," "]],[594,595],[594,595]]],[1569585737000,["GJX@GJXAIOU",[[-1,682,"\\"],[1,683," "]],[682,683],[682,683]]],[1569585737795,["GJX@GJXAIOU",[[-1,1471,"\\"],[1,1472," "]],[1471,1472],[1471,1472]]],[1569585738112,["GJX@GJXAIOU",[[-1,1733,"\\"],[1,1734," "]],[1733,1734],[1733,1734]]],[1569585738388,["GJX@GJXAIOU",[[-1,1905,"\\"],[1,1906," "]],[1905,1906],[1905,1906]]],[1569585739074,["GJX@GJXAIOU",[[-1,2410,"\\"],[1,2411," "]],[2410,2411],[2410,2411]]],[1569585739328,["GJX@GJXAIOU",[[-1,2518,"\\"],[1,2519," "]],[2518,2519],[2518,2519]]],[1569585740052,["GJX@GJXAIOU",[[-1,2894,"\\"],[1,2895," "]],[2894,2895],[2894,2895]]],[1569585740701,["GJX@GJXAIOU",[[-1,3278,"\\"],[1,3279," "]],[3278,3279],[3278,3279]]],[1569585741332,["GJX@GJXAIOU",[[-1,3750,"\\"],[1,3751," "]],[3750,3751],[3750,3751]]],[1569585742529,["GJX@GJXAIOU",[[-1,79,"\\"],[1,80," "]],[79,80],[79,80]]],[1569585763624,["GJX@GJXAIOU",[[1,74,"## "]],[90,90],[104,104]]],[1569585764248,["GJX@GJXAIOU",[[-1,77,"**"],[-1,102,"**"]],[104,104],[77,100]]],[1569585766757,["GJX@GJXAIOU",[[1,320,"## "]],[328,328],[344,344]]],[1569585767220,["GJX@GJXAIOU",[[-1,323,"**"],[-1,342,"**"]],[344,344],[323,340]]],[1569585768844,["GJX@GJXAIOU",[[1,587,"## "]],[600,600],[630,630]]],[1569585769294,["GJX@GJXAIOU",[[-1,590,"**"],[-1,628,"**"]],[630,630],[590,626]]],[1569585771248,["GJX@GJXAIOU",[[1,674,"## "]],[691,691],[705,705]]],[1569585777310,["GJX@GJXAIOU",[[-1,677,"**"],[-1,703,"**1.  ## "]],[705,705],[703,703]]],[1569585778189,["GJX@GJXAIOU",[[1,703,"- "]],[703,703],[705,705]]],[1569585780405,["GJX@GJXAIOU",[[-1,712,"2.  ##"]],[712,718],[712,712]]],[1569585780630,["GJX@GJXAIOU",[[1,712,"-"]],[712,712],[713,713]]],[1569585781061,["GJX@GJXAIOU",[[1,714," "]],[713,713],[714,714]]],[1569585783269,["GJX@GJXAIOU",[[-1,722,"3.  ##"]],[722,728],[722,722]]],[1569585783519,["GJX@GJXAIOU",[[1,722,"-"]],[722,722],[723,723]]],[1569585785221,["GJX@GJXAIOU",[[-1,721,"\n"]],[721,721],[720,720]]],[1569585786237,["GJX@GJXAIOU",[[-1,711,"\n"]],[711,711],[710,710]]],[1569585795214,["GJX@GJXAIOU",[[-1,882,"苍老师"]],[885,885],[882,882]]],[1569585856936,[null,[[-1,701,"# "],[1,703,"\n\n"]],[701,701],[705,705]]],[1569585856936,[null,[[1,701,"# "],[-1,701,"\n\n"]],[705,705],[701,701]]],[1569585797927,["GJX@GJXAIOU",[[1,882,"张三"]],[882,882],[884,884]]],[1569585805285,["GJX@GJXAIOU",[[-1,1082,"\n"]],[1082,1082],[1081,1081]]],[1569585805924,["GJX@GJXAIOU",[[-1,1081,"\n"]],[1081,1081],[1080,1080]]],[1569585807109,["GJX@GJXAIOU",[[-1,904,"\n"]],[904,904],[903,903]]],[1569585817661,["GJX@GJXAIOU",[[-1,713," "]],[714,714],[713,713]]],[1569585828204,["GJX@GJXAIOU",[[-1,1387,"HQL和SQL的区别\n\nHQL是面向对象查询操作的，SQL是结构化查询语言 是面向数据库表结构的"]],[1387,1435],[1387,1387]]],[1569585829719,["GJX@GJXAIOU",[[1,1393,"\n"]],[1391,1391],[1392,1392]]],[1569585830185,["GJX@GJXAIOU",[[1,1392,"HQL和SQL的区别\n\nHQL是面向对象查询操作的，SQL是结构化查询语言 是面向数据库表结构的"]],[1392,1392],[1440,1440]]],[1569585831934,["GJX@GJXAIOU",[[-1,1387,"\n"]],[1387,1387],[1386,1386]]],[1569585832381,["GJX@GJXAIOU",[[-1,1386,"\n"]],[1386,1386],[1385,1385]]],[1569585835846,["GJX@GJXAIOU",[[-1,1327,"Hql： 具体分类\n1、 属性查询 2、 参数查询、命名参数查询 3、 关联查询 4、 分页查询 5、 统计函数"]],[1327,1383],[1327,1327]]],[1569585837577,["GJX@GJXAIOU",[[1,1334,"\n"]],[1333,1333],[1334,1334]]],[1569585837726,["GJX@GJXAIOU",[[1,1335,"\n"]],[1334,1334],[1335,1335]]],[1569585838172,["GJX@GJXAIOU",[[1,1335,"Hql： 具体分类\n1、 属性查询 2、 参数查询、命名参数查询 3、 关联查询 4、 分页查询 5、 统计函数"]],[1335,1335],[1391,1391]]],[1569585842022,["GJX@GJXAIOU",[[-1,1339," "]],[1340,1340],[1339,1339]]],[1569585844514,["GJX@GJXAIOU",[[1,1335,"- "]],[1335,1335],[1337,1337]]],[1569585846975,["GJX@GJXAIOU",[[1,1393,"- "]],[1393,1393],[1395,1395]]],[1569585848217,["GJX@GJXAIOU",[[-1,1406,"\n"]],[1406,1406],[1405,1405]]],[1569585850121,["GJX@GJXAIOU",[[1,1393,"\n"]],[1393,1393],[1394,1394]]],[1569585852765,["GJX@GJXAIOU",[[-1,1329,"\n"]],[1329,1329],[1328,1328]]],[1569585852924,["GJX@GJXAIOU",[[-1,1328,"\n"]],[1328,1328],[1327,1327]]],[1569585853109,["GJX@GJXAIOU",[[-1,1327,"\n"]],[1327,1327],[1326,1326]]],[1569585853277,["GJX@GJXAIOU",[[-1,1326,"\n"]],[1326,1326],[1325,1325]]],[1569585853469,["GJX@GJXAIOU",[[-1,1325,"\n"]],[1325,1325],[1324,1324]]],[1569585856559,["GJX@GJXAIOU",[[-1,731,"\n"]],[731,731],[730,730]]],[1569585916935,[null,[[-1,701,"# "],[1,703,"\n\n"]],[701,701],[705,705]]],[1569585916935,[null,[[1,701,"# "],[-1,701,"\n\n"]],[705,705],[701,701]]],[1569585868261,["GJX@GJXAIOU",[[1,1439,"## "]],[1455,1455],[1480,1480]]],[1569585869119,["GJX@GJXAIOU",[[-1,1442,"**"],[-1,1478,"**"]],[1480,1480],[1442,1476]]],[1569585870740,["GJX@GJXAIOU",[[1,1700,"## "]],[1718,1718],[1752,1752]]],[1569585871156,["GJX@GJXAIOU",[[-1,1703,"**"],[-1,1750,"**"]],[1752,1752],[1703,1748]]],[1569585872660,["GJX@GJXAIOU",[[1,1871,"## "]],[1887,1887],[1901,1901]]],[1569585873119,["GJX@GJXAIOU",[[-1,1874,"**"],[-1,1899,"**"]],[1901,1901],[1874,1897]]],[1569585890537,["GJX@GJXAIOU",[[1,1976," "]],[1976,1976],[1977,1977]]],[1569585895341,["GJX@GJXAIOU",[[1,1899,"**"],[1,1912,"**"]],[1899,1912],[1899,1916]]],[1569585899987,["GJX@GJXAIOU",[[-1,2356,"\n"]],[2356,2356],[2355,2355]]],[1569585901684,["GJX@GJXAIOU",[[-1,2341,"\n"]],[2341,2341],[2340,2340]]],[1569585902325,["GJX@GJXAIOU",[[-1,2317,"\n"]],[2317,2317],[2316,2316]]],[1569585902886,["GJX@GJXAIOU",[[-1,2283,"\n"]],[2283,2283],[2282,2282]]],[1569585903620,["GJX@GJXAIOU",[[-1,2214,"\n"]],[2214,2214],[2213,2213]]],[1569585904686,["GJX@GJXAIOU",[[-1,2161,"\n"]],[2161,2161],[2160,2160]]],[1569585906134,["GJX@GJXAIOU",[[-1,2086,"\n"]],[2086,2086],[2085,2085]]],[1569585906795,["GJX@GJXAIOU",[[-1,2010,"\n"]],[2010,2010],[2009,2009]]],[1569585907543,["GJX@GJXAIOU",[[-1,1918,"\n"]],[1918,1918],[1917,1917]]],[1569585911692,["GJX@GJXAIOU",[[1,2371,"## "]],[2382,2382],[2401,2401]]],[1569585912246,["GJX@GJXAIOU",[[-1,2374,"**"],[-1,2399,"**"]],[2401,2401],[2374,2397]]],[1569585914447,["GJX@GJXAIOU",[[-1,2437,"\n"]],[2437,2437],[2436,2436]]],[1569585916620,["GJX@GJXAIOU",[[-1,2477,"**"],[-1,2505,"**"]],[2489,2489],[2477,2503]]],[1569585976935,[null,[[-1,701,"# "],[1,703,"\n\n"]],[701,701],[705,705]]],[1569585976935,[null,[[1,701,"# "],[-1,701,"\n\n"]],[705,705],[701,701]]],[1569585917276,["GJX@GJXAIOU",[[1,2477,"## "]],[2477,2503],[2506,2506]]],[1569585920981,["GJX@GJXAIOU",[[-1,2715,"\n"]],[2715,2715],[2714,2714]]],[1569585921718,["GJX@GJXAIOU",[[-1,2736,"\n"]],[2736,2736],[2735,2735]]],[1569585922411,["GJX@GJXAIOU",[[-1,2761,"\n"]],[2761,2761],[2760,2760]]],[1569585923213,["GJX@GJXAIOU",[[-1,2689,"\n"]],[2689,2689],[2688,2688]]],[1569585923874,["GJX@GJXAIOU",[[-1,2775,"\n"]],[2775,2775],[2774,2774]]],[1569585927827,["GJX@GJXAIOU",[[1,2847,"## "]],[2857,2857],[2878,2878]]],[1569585928334,["GJX@GJXAIOU",[[-1,2850,"**"],[-1,2876,"**"]],[2878,2878],[2850,2874]]],[1569585930608,["GJX@GJXAIOU",[[-1,2936,"\n"]],[2936,2936],[2935,2935]]],[1569585931485,["GJX@GJXAIOU",[[-1,2999,"\n"]],[2999,2999],[2998,2998]]],[1569585934966,["GJX@GJXAIOU",[[-1,2895,"\n"]],[2895,2895],[2894,2894]]],[1569585938430,["GJX@GJXAIOU",[[1,3227,"## "]],[3242,3242],[3293,3293]]],[1569585938862,["GJX@GJXAIOU",[[-1,3230,"**"],[-1,3291,"**"]],[3293,3293],[3230,3289]]],[1569585942740,["GJX@GJXAIOU",[[1,3738,"## ****"]],[3738,3738],[3743,3743]]],[1569585945142,["GJX@GJXAIOU",[[-1,3738,"## ****"]],[3743,3743],[3738,3738]]],[1569585945593,["GJX@GJXAIOU",[[1,3230,"**"],[1,3289,"**"]],[3230,3289],[3293,3293]]],[1569585950941,["GJX@GJXAIOU",[[-1,3230,"**"],[-1,3291,"**"]],[3237,3237],[3230,3289]]],[1569585952855,["GJX@GJXAIOU",[[1,3698,"## "]],[3715,3715],[3740,3740]]],[1569585954877,["GJX@GJXAIOU",[[-1,3701,"**"],[-1,3738,"**"]],[3740,3740],[3701,3736]]],[1569585964995,["GJX@GJXAIOU",[[1,72,"@toc"]],[72,72],[76,76]]],[1569586497864,[null,[[-1,705,"# "],[1,707,"\n\n"]],[705,705],[709,709]]],[1569586497864,[null,[[1,705,"# "],[-1,705,"\n\n"]],[709,709],[705,705]]],[1569586495447,["GJX@GJXAIOU",[[-1,34,"#"]],[35,35],[34,34]]]],null,"GJX@GJXAIOU"]]}