{"compress":true,"commitItems":[["dc9c7ddc-ac85-4373-921c-0927b3ca6e7f",1567427747538,"# \n如何通过Mybatis实现数据的增删改查（CRUD）操作？\n\n2017年05月05日 17:30:18 [DreamMakers](https://me.csdn.net/andamajing) 阅读数 1932更多\n\n分类专栏： [Mybatis](https://blog.csdn.net/andamajing/article/category/6902012) [Mybatis应用及原理探析](https://blog.csdn.net/andamajing/article/category/6902014) [深入了解Mybatis使用及实现原理](https://blog.csdn.net/andamajing/article/category/9268791)\n\n[](http://creativecommons.org/licenses/by-sa/4.0/)版权声明：本文为博主原创文章，遵循[ CC 4.0 BY-SA ](http://creativecommons.org/licenses/by-sa/4.0/)版权协议，转载请附上原文出处链接和本声明。\n\n本文链接：[https://blog.csdn.net/andamajing/article/details/71216067](https://blog.csdn.net/andamajing/article/details/71216067) \n\n在上一篇文章中，我们应该算是简单的进入了MyBatis的世界，在这篇文章中，我们从简单的增删改查说起，毕竟对于数据库操作来说，这几种操作是肯定逃不掉的。\n\n在这篇文章中，我们不在对所有需要的东西全部列举出来，而是在上一篇文章的基础上进行修改。\n\n首先，我们需要修改的就是接口类，提供增删改查的方法，如下所示：\n\n```\npackage com.majing.learning.mybatis.dao; import com.majing.learning.mybatis.entity.User; public interface UserDao {\t/**\t * 查询\t * @param userId\t * @return\t */\tUser findUserById (int userId);\t/**\t * 增加\t * @param user\t */\tvoid addUser(User user);\t/**\t * 删除\t * @param userId\t */\tvoid deleteUser(int userId);\t/**\t * 更新\t * @param user\t */\tvoid updateUser(User user);}\n```\n\n 紧接着，当然我们需要修改UserDaoMapper.xml文件，毕竟我们要为每个方法提供对应的sql实现。下面给出调整后的配置文件：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>   <!DOCTYPE mapper   PUBLIC \"-//ibatis.apache.org//DTD Mapper 3.0//EN\"  \"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd\"><mapper namespace=\"com.majing.learning.mybatis.dao.UserDao\"> \t<select id=\"findUserById\" resultType=\"com.majing.learning.mybatis.entity.User\">\t\tselect * from user where id = #{id}\t</select>\t\t<insert id=\"addUser\" parameterType=\"com.majing.learning.mybatis.entity.User\" useGeneratedKeys=\"true\" keyProperty=\"id\">\t\tinsert into user(name,password,age) values(#{name},#{password},#{age})\t</insert>\t\t<delete id=\"deleteUser\" parameterType=\"int\">\t\tdelete from user where id = #{id}\t</delete>\t\t<update id=\"updateUser\" parameterType=\"com.majing.learning.mybatis.entity.User\">\t\tupdate user set name = #{name}, password = #{password}, age = #{age} where id = #{id}\t</update> </mapper>\n```\n\n 至此，我们所需要修改的东西应该就没了，下面我们来写测试用例，先插入一条记录，然后更新这条记录，然后再查询之前的记录，最后删除这条记录。测试代码如下：\n\n```\npackage com.majing.learning.mybatis; import java.io.IOException; import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test; import com.majing.learning.mybatis.dao.UserDao;import com.majing.learning.mybatis.entity.User; public class UserDaoTest {\t\t@Test\tpublic void findUserById(){\t\tSqlSession sqlSession = getSessionFactory().openSession();  \t\tUserDao userMapper = sqlSession.getMapper(UserDao.class);  \t\t\t\t//增加一条新记录\t\tUser user = new User();\t\tuser.setName(\"majing\");\t\tuser.setPassword(\"19880101\");\t\tuser.setAge(29);\t\tuserMapper.addUser(user);\t\t\t\t//更新该记录\t\tuser.setName(\"new_majing\");\t\tuserMapper.updateUser(user);\t\t\t\t\t\t//查询该记录\t\tint id = user.getId();\t\tuser = null;\t\tuser = userMapper.findUserById(id);  \t\tSystem.out.println(\"更新后记录为：\"+user);\t\t\t\t//删除记录\t\tSystem.out.println(\"尝试删除该记录...\");\t\tuserMapper.deleteUser(id);\t\t\t\tuser = userMapper.findUserById(id);  \t\tif(user==null){\t\t\tSystem.out.println(\"该记录已删除！\");\t\t}else{\t\t\tSystem.out.println(\"该记录未被成功删除！\");\t\t}\t} \t// Mybatis 通过SqlSessionFactory获取SqlSession, 然后才能通过SqlSession与数据库进行交互\tprivate static SqlSessionFactory getSessionFactory() {\t\tSqlSessionFactory sessionFactory = null;\t\tString resource = \"configuration.xml\";\t\ttry {\t\t\tsessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(resource));\t\t} catch (IOException e) {\t\t\te.printStackTrace();\t\t}\t\treturn sessionFactory;\t}}\n```\n\n 如果我们执行这个单元测试类，会得到如下的输出，一切都是这么正常，So easy：\n\n![](https://img-blog.csdn.net/20170505172105717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFqaW5nZ29nb2dv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n但是，细心的读者如果按照我说的步骤自己一步步操作的话，那么很有可能就会发现问题！！！\n\n什么问题呢？？？\n\n如果单步调试的话，我们会发现虽然每一步都按照我们的意愿进行了操作（增删改查），但是目标数据库中却始终一条记录都没有！！！数据根本没有插入到数据库中。Oh my God!\n\n有人知道为什么了吗？这里就不卖关子了，其实我们在获取数据库连接的时候采用了MyBatis的默认配置，即不会自动提交。所以这里我们需要设置一下，在获取连接时设置sql语句是自动提交的。如下所示：\n\n```\nSqlSession sqlSession = getSessionFactory().openSession(true);  \n```\n\n 这下就一切正常了，不信的可以试试。这也告诉我们一个道理，其实看别人写的东西都很简单，但是其实往往看到的和自己动手操作的往往自己得到的并不一样，只有自己动手写过才能更清晰的知道其中的知识，也掌握的更牢固。这也是我为什么学什么都自己尝试一遍的原因。",[[1567427731376,["GJX@GJXAIOU",[[-1,2,"\n"]],[3,3],[2,2]]],[1567427733835,["GJX@GJXAIOU",[[-1,2,"如何"]],[4,4],[2,2]]],[1567427736102,["GJX@GJXAIOU",[[-1,28,"？"]],[29,29],[28,28]]],[1567427745914,["GJX@GJXAIOU",[[-1,30,"2017年05月05日 17:30:18 [DreamMakers](https://me.csdn.net/andamajing) 阅读数 1932更多\n\n分类专栏： [Mybatis](https://blog.csdn.net/andamajing/article/category/6902012) [Mybatis应用及原理探析](https://blog.csdn.net/andamajing/article/category/6902014) [深入了解Mybatis使用及实现原理](https://blog.csdn.net/andamajing/article/category/9268791)\n\n[](http://creativecommons.org/licenses/by-sa/4.0/)版权声明：本文为博主原创文章，遵循[ CC 4.0 BY-SA ](http://creativecommons.org/licenses/by-sa/4.0/)版权协议，转载请附上原文出处链接和本声明。\n\n本文链接：[https://blog.csdn.net/andamajing/article/details/71216067](https://blog.csdn.net/andamajing/article/details/71216067) "]],[30,619],[30,30]]],[1567427756917,["GJX@GJXAIOU",[[1,30,"[原文链接](https://blog.csdn.net/andamajing/article/details/71216067)"]],[30,30],[95,95]]],[1567427780249,["GJX@GJXAIOU",[[1,297,"\n"],[1,298,"\n"],[1,345,"\n"],[1,346,"\n"],[1,372,"\n"],[1,376,"\n"],[1,382,"\n"],[1,399,"\n"],[1,410,"\n"],[1,414,"\n"],[1,446,"\n"],[1,450,"\n"],[1,456,"\n"],[1,471,"\n"],[1,475,"\n"],[1,500,"\n"],[1,504,"\n"],[1,510,"\n"],[1,527,"\n"],[1,531,"\n"],[1,560,"\n"],[1,564,"\n"],[1,570,"\n"],[1,585,"\n"],[1,589,"\n"],[1,617,"\n"]],[257,618],[644,644]]],[1567427782775,["GJX@GJXAIOU",[[-1,298," "]],[299,299],[298,298]]],[1567427783823,["GJX@GJXAIOU",[[-1,298,"\n"]],[298,298],[297,297]]],[1567427788343,["GJX@GJXAIOU",[[-1,387,"\t * @param userId\n\t * @return"]],[387,416],[387,387]]],[1567427788623,["GJX@GJXAIOU",[[-1,387,"\n"]],[387,387],[386,386]]],[1567427791510,["GJX@GJXAIOU",[[-1,437,"\t * @param user"]],[437,452],[437,437]]],[1567427791710,["GJX@GJXAIOU",[[-1,437,"\n"]],[437,437],[436,436]]],[1567427793850,["GJX@GJXAIOU",[[-1,480,"\t * @param userId"]],[480,497],[480,480]]],[1567427794063,["GJX@GJXAIOU",[[-1,480,"\n"]],[480,480],[479,479]]],[1567427796096,["GJX@GJXAIOU",[[-1,527,"\t * @param user"]],[527,542],[527,527]]],[1567427796289,["GJX@GJXAIOU",[[-1,527,"\n"]],[527,527],[526,526]]],[1567427818775,["GJX@GJXAIOU",[[1,605,"**"],[1,621,"**"]],[605,621],[605,625]]],[1567427834734,["GJX@GJXAIOU",[[1,687,"\n"],[1,706,"\n"],[1,757,"\n"],[1,808,"\n"],[1,868,"\n"],[1,869,"\n"],[1,949,"\n"],[1,986,"\n"],[1,996,"\n"],[1,997,"\n"],[1,1116,"\n"],[1,1188,"\n"],[1,1198,"\n"],[1,1199,"\n"],[1,1244,"\n"],[1,1279,"\n"],[1,1289,"\n"],[1,1290,"\n"],[1,1371,"\n"],[1,1458,"\n"],[1,1468,"\n"],[1,1469,"\n"]],[645,1478],[1500,1500]]],[1567427867232,["GJX@GJXAIOU",[[1,812,"\n"]],[811,811],[812,812]]],[1567427870130,["GJX@GJXAIOU",[[-1,874," "]],[875,875],[874,874]]],[1567427871167,["GJX@GJXAIOU",[[-1,874,"\n"]],[874,874],[873,873]]],[1567428116588,["GJX@GJXAIOU",[[1,1622,"\n"],[1,1623,"\n"],[1,1650,"\n"],[1,1651,"\n"],[1,1689,"\n"],[1,1733,"\n"],[1,1784,"\n"],[1,1842,"\n"],[1,1864,"\n"],[1,1865,"\n"],[1,1912,"\n"],[1,1959,"\n"],[1,1960,"\n"],[1,1986,"\n"],[1,1987,"\n"],[1,1993,"\n"],[1,2021,"\n"],[1,2083,"\n"],[1,2144,"\n"],[1,2146,"\n"],[1,2157,"\n"],[1,2182,"\n"],[1,2207,"\n"],[1,2238,"\n"],[1,2256,"\n"],[1,2283,"\n"],[1,2285,"\n"],[1,2294,"\n"],[1,2323,"\n"],[1,2353,"\n"],[1,2355,"\n"],[1,2357,"\n"],[1,2366,"\n"],[1,2390,"\n"],[1,2404,"\n"],[1,2443,"\n"],[1,2480,"\n"],[1,2482,"\n"],[1,2490,"\n"],[1,2525,"\n"],[1,2553,"\n"],[1,2555,"\n"],[1,2594,"\n"],[1,2611,"\n"],[1,2644,"\n"],[1,2652,"\n"],[1,2688,"\n"],[1,2691,"\n"],[1,2693,"\n"],[1,2694,"\n"],[1,2763,"\n"],[1,2818,"\n"],[1,2860,"\n"],[1,2900,"\n"],[1,2907,"\n"],[1,3005,"\n"],[1,3032,"\n"],[1,3055,"\n"],[1,3058,"\n"],[1,3082,"\n"],[1,3084,"\n"]],[1586,3085],[3146,3146]]],[1567428123112,["GJX@GJXAIOU",[[-1,1625,"import java.io.IOException;\n \nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.Test;\n \nimport com.majing.learning.mybatis.dao.UserDao;\nimport com.majing.learning.mybatis.entity.User;"]],[1625,1970],[1625,1625]]],[1567428125161,["GJX@GJXAIOU",[[-1,1625,"\n"]],[1626,1626],[1625,1625]]],[1567428125337,["GJX@GJXAIOU",[[-1,1624,"\n"]],[1625,1625],[1624,1624]]],[1567428199179,["GJX@GJXAIOU",[[-1,3034,"，细心的读者如果按照我说的步骤自己一步步操作的话，那么很有可能就会发现问题！！！\n\n什么问题呢？？？"]],[3034,3084],[3034,3034]]],[1567428204136,["GJX@GJXAIOU",[[-1,3035,"\n"]],[3036,3036],[3035,3035]]],[1567428208697,["GJX@GJXAIOU",[[-1,3109,"Oh my God!"]],[3109,3119],[3109,3109]]],[1567428210904,["GJX@GJXAIOU",[[-1,3111,"有人知道为什么了吗？这里就不卖关子了，"]],[3111,3130],[3111,3111]]]],null,"GJX@GJXAIOU"]]}