{"compress":true,"commitItems":[["f4357b53-100d-4c14-9313-d3b110c22ec3",1568618817204,"# [mybatis 详解（二）------入门实例（基于XML）](https://www.cnblogs.com/ysocean/p/7277545.html)\n\n**目录**\n\n*   [1、创建MySQL数据库：mybatisDemo和表：user](https://www.cnblogs.com/ysocean/p/7277545.html#_label0)\n*   [2、建立一个Java工程，并导入相应的jar包，具体目录如下](https://www.cnblogs.com/ysocean/p/7277545.html#_label1)\n*   [3、在 MyBatisTest 工程中添加数据库配置文件 mybatis-configuration.xml](https://www.cnblogs.com/ysocean/p/7277545.html#_label2)\n*   [4、定义表所对应的实体类](https://www.cnblogs.com/ysocean/p/7277545.html#_label3)\n*   [5、定义操作 user 表的sql映射文件userMapper.xml　　](https://www.cnblogs.com/ysocean/p/7277545.html#_label4)\n*   [6、向 mybatis-configuration.xml 配置文件中注册 userMapper.xml 文件](https://www.cnblogs.com/ysocean/p/7277545.html#_label5)\n*   [ 7、创建测试类](https://www.cnblogs.com/ysocean/p/7277545.html#_label6)\n*   [补充：如何得到插入数据之后的主键值？](https://www.cnblogs.com/ysocean/p/7277545.html#_label7)\n*   [总结：](https://www.cnblogs.com/ysocean/p/7277545.html#_label8)\n\n* * *\n\n　　通过上一小节，mybatis 和 jdbc 的区别：[http://www.cnblogs.com/ysocean/p/7271600.html](http://www.cnblogs.com/ysocean/p/7271600.html)，我们对 mybatis有了一个大致的了解，下面我们通过一个入门实例来对mybatis有更近一步的了解。\n\n　　我们用 mybatis 来对 user 表进行增删改查操作。\n\n 　　ps:本篇博客源代码链接：[http://pan.baidu.com/s/1eSEfc8i ](http://pan.baidu.com/s/1eSEfc8i%20)密码：j480\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 1、创建MySQL数据库：mybatisDemo和表：user\n\n　　这里我们就不写脚本创建了，创建完成后，再向其中插入几条数据即可。\n\n　　user 表字段如下：\n\n　　![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803001845334-1050272765.png)\n\n　　![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803082356912-1932891072.png)\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 2、建立一个Java工程，并导入相应的jar包，具体目录如下\n\n　　注意：log4j和Junit不是必须的，但是我们为了查看日志以及便于测试，加入了这两个jar包\n\n　　![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803002013365-1628654827.png)\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 3、在 MyBatisTest 工程中添加数据库配置文件 mybatis-configuration.xml\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n | \n\n`<?xml version=``\"1.0\"` `encoding=``\"UTF-8\"``?>`\n\n`<!DOCTYPE configuration PUBLIC ``\"-//mybatis.org//DTD Config 3.0//EN\"` `\"http://mybatis.org/dtd/mybatis-3-config.dtd\"``>`\n\n`<configuration>`\n\n`<!-- 注意：environments标签，当mybatis和spring整合之后，这个标签是不用配置的 -->`\n\n`<!-- 可以配置多个运行环境，但是每个 SqlSessionFactory 实例只能选择一个运行环境  `\n\n`一、development:开发模式`\n\n`二、work：工作模式-->`\n\n`<environments ``default``=``\"development\"``>`\n\n`<!--id属性必须和上面的``default``一样  -->`\n\n`<environment id=``\"development\"``>`\n\n`<!--事务管理器`\n\n`一、JDBC：这个配置直接简单使用了 JDBC 的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围`\n\n`二、MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期`\n\n`比如 spring 或 JEE 应用服务器的上下文，默认情况下，它会关闭连接。然而一些容器并不希望这样，`\n\n`因此如果你需要从连接中停止它，就可以将 closeConnection 属性设置为 ``false``，比如：`\n\n`<transactionManager type=``\"MANAGED\"``>`\n\n`<property name=``\"closeConnection\"` `value=``\"false\"``/>`\n\n`</transactionManager>`\n\n`-->`\n\n`<transactionManager type=``\"JDBC\"``/>`\n\n`<!--dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象源  -->`\n\n`<dataSource type=``\"POOLED\"``>`\n\n`<property name=``\"driver\"` `value=``\"com.mysql.jdbc.Driver\"``/>`\n\n`<property name=``\"url\"` `value=``\"jdbc:mysql://localhost:3306/mybatisdemo\"``/>`\n\n`<property name=``\"username\"` `value=``\"root\"``/>`\n\n`<property name=``\"password\"` `value=``\"root\"``/>`\n\n`</dataSource>`\n\n`</environment>`\n\n`</environments>`\n\n`</configuration>`\n\n |\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 4、定义表所对应的实体类\n\n　　![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803002247834-447237894.png)\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n | \n\n`package` `com.ys.po;`\n\n`import` `java.util.Date;`\n\n`public` `class` `User {`\n\n`private` `int` `id;`\n\n`private` `String username;`\n\n`private` `String sex;`\n\n`private` `Date birthday;`\n\n`private` `String address;`\n\n`public` `int` `getId() {`\n\n`return` `id;`\n\n`}`\n\n`public` `void` `setId(``int` `id) {`\n\n`this``.id = id;`\n\n`}`\n\n`public` `String getUsername() {`\n\n`return` `username;`\n\n`}`\n\n`public` `void` `setUsername(String username) {`\n\n`this``.username = username;`\n\n`}`\n\n`public` `String getSex() {`\n\n`return` `sex;`\n\n`}`\n\n`public` `void` `setSex(String sex) {`\n\n`this``.sex = sex;`\n\n`}`\n\n`public` `Date getBirthday() {`\n\n`return` `birthday;`\n\n`}`\n\n`public` `void` `setBirthday(Date birthday) {`\n\n`this``.birthday = birthday;`\n\n`}`\n\n`public` `String getAddress() {`\n\n`return` `address;`\n\n`}`\n\n`public` `void` `setAddress(String address) {`\n\n`this``.address = address;`\n\n`}`\n\n`@Override`\n\n`public` `String toString() {`\n\n`return` `\"User [id=\"` `+ id + ``\", username=\"` `+ username + ``\", sex=\"` `+ sex`\n\n`+ ``\", birthday=\"` `+ birthday + ``\", address=\"` `+ address + ``\"]\"``;`\n\n`}`\n\n`}`\n\n |\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 5、定义操作 user 表的sql映射文件userMapper.xml　　\n\n　　![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803002356303-1648947603.png)\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n | \n\n`<?xml version=``\"1.0\"` `encoding=``\"UTF-8\"` `?>`\n\n`<!DOCTYPE mapper`\n\n`PUBLIC ``\"-//mybatis.org//DTD Mapper 3.0//EN\"`\n\n`\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"``>`\n\n`<mapper namespace=``\"com.ys.po.userMapper\"``>`\n\n`<!-- 根据 id 查询 user 表中的数据`\n\n`id:唯一标识符，此文件中的id值不能重复`\n\n`resultType:返回值类型，一条数据库记录也就对应实体类的一个对象`\n\n`parameterType:参数类型，也就是查询条件的类型`\n\n`-->`\n\n`<select id=``\"selectUserById\"`\n\n`resultType=``\"com.ys.po.User\"` `parameterType=``\"int\"``>`\n\n`<!-- 这里和普通的sql 查询语句差不多，对于只有一个参数，后面的 #{id}表示占位符，里面不一定要写id,写啥都可以，但是不要空着，如果有多个参数则必须写pojo类里面的属性 -->`\n\n`select * from user where id = #{id}`\n\n`</select>`\n\n`<!-- 查询 user 表的所有数据`\n\n`注意：因为是查询所有数据，所以返回的应该是一个集合,这个集合里面每个元素都是User类型`\n\n`-->`\n\n`<select id=``\"selectUserAll\"` `resultType=``\"com.ys.po.User\"``>`\n\n`select * from user`\n\n`</select>`\n\n`<!-- 模糊查询：根据 user 表的username字段`\n\n`下面两种写法都可以，但是要注意`\n\n`1``、${value}里面必须要写value，不然会报错`\n\n`2``、${}表示拼接 sql 字符串，将接收到的参数不加任何修饰拼接在sql语句中`\n\n`3``、使用${}会造成 sql 注入`\n\n`-->`\n\n`<select id=``\"selectLikeUserName\"` `resultType=``\"com.ys.po.User\"` `parameterType=``\"String\"``>`\n\n`select * from user where username like ``'%${value}%'`\n\n`<!-- select * from user where username like #{username} -->`\n\n`</select>`\n\n`<!-- 向 user 表插入一条数据 -->`\n\n`<insert id=``\"insertUser\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`insert into user(id,username,sex,birthday,address)`\n\n`value(#{id},#{username},#{sex},#{birthday},#{address})`\n\n`</insert>`\n\n`<!-- 根据 id 更新 user 表的数据 -->`\n\n`<update id=``\"updateUserById\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`update user set username=#{username} where id=#{id}`\n\n`</update>`\n\n`<!-- 根据 id 删除 user 表的数据 -->`\n\n`<delete id=``\"deleteUserById\"` `parameterType=``\"int\"``>`\n\n`delete from user where id=#{id}`\n\n`</delete>`\n\n`</mapper>`\n\n |\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 6、向 mybatis-configuration.xml 配置文件中注册 userMapper.xml 文件\n\n　　![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803002534725-1062751486.png)\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n | \n\n`<mappers>`\n\n`<!-- 注册userMapper.xml文件，`\n\n`userMapper.xml位于com.ys.mapper这个包下，所以resource写成com/ys/mapper/userMapper.xml-->`\n\n`<mapper resource=``\"com/ys/mapper/userMapper.xml\"``/>`\n\n`</mappers>`\n\n |\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n###  **7、创建测试类**\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n | \n\n`package` `com.ys.test;`\n\n`import` `java.io.InputStream;`\n\n`import` `java.util.List;`\n\n`import` `org.apache.ibatis.session.SqlSession;`\n\n`import` `org.apache.ibatis.session.SqlSessionFactory;`\n\n`import` `org.apache.ibatis.session.SqlSessionFactoryBuilder;`\n\n`import` `org.junit.Before;`\n\n`import` `org.junit.Test;`\n\n`import` `com.ys.po.User;`\n\n`public` `class` `CRUDTest {`\n\n`//定义 SqlSession`\n\n`SqlSession session =``null``;`\n\n`@Before`\n\n`public` `void` `init(){`\n\n`//定义mybatis全局配置文件`\n\n`String resource = ``\"mybatis-configuration.xml\"``;`\n\n`//加载 mybatis 全局配置文件`\n\n`InputStream inputStream = CRUDTest.``class``.getClassLoader()`\n\n`.getResourceAsStream(resource);`\n\n`//构建sqlSession的工厂`\n\n`SqlSessionFactory sessionFactory = ``new` `SqlSessionFactoryBuilder().build(inputStream);`\n\n`//根据 sqlSessionFactory 产生 session`\n\n`session = sessionFactory.openSession();`\n\n`}`\n\n`//根据id查询user表数据`\n\n`@Test`\n\n`public` `void` `testSelectUserById(){`\n\n`/*这个字符串由 userMapper.xml 文件中 两个部分构成`\n\n`<mapper namespace=\"com.ys.po.userMapper\"> 的 namespace 的值`\n\n`<select id=\"selectUserById\" > id 值*/`\n\n`String statement = ``\"com.ys.po.userMapper.selectUserById\"``;`\n\n`User user = session.selectOne(statement, ``1``);`\n\n`System.out.println(user);`\n\n`session.close();`\n\n`}`\n\n`//查询所有user表所有数据`\n\n`@Test`\n\n`public` `void` `testSelectUserAll(){`\n\n`String statement = ``\"com.ys.po.userMapper.selectUserAll\"``;`\n\n`List<User> listUser = session.selectList(statement);`\n\n`for``(User user : listUser){`\n\n`System.out.println(user);`\n\n`}`\n\n`session.close();`\n\n`}`\n\n`//模糊查询：根据 user 表的username字段`\n\n`@Test`\n\n`public` `void` `testSelectLikeUserName(){`\n\n`String statement = ``\"com.ys.po.userMapper.selectLikeUserName\"``;`\n\n`List<User> listUser = session.selectList(statement, ``\"%t%\"``);`\n\n`for``(User user : listUser){`\n\n`System.out.println(user);`\n\n`}`\n\n`session.close();`\n\n`}`\n\n`//向 user 表中插入一条数据`\n\n`@Test`\n\n`public` `void` `testInsertUser(){`\n\n`String statement = ``\"com.ys.po.userMapper.insertUser\"``;`\n\n`User user = ``new` `User();`\n\n`user.setUsername(``\"Bob\"``);`\n\n`user.setSex(``\"女\"``);`\n\n`session.insert(statement, user);`\n\n`//提交插入的数据`\n\n`session.commit();`\n\n`session.close();`\n\n`}`\n\n`//根据 id 更新 user 表的数据`\n\n`@Test`\n\n`public` `void` `testUpdateUserById(){`\n\n`String statement = ``\"com.ys.po.userMapper.updateUserById\"``;`\n\n`//如果设置的 id不存在，那么数据库没有数据更改`\n\n`User user = ``new` `User();`\n\n`user.setId(``4``);`\n\n`user.setUsername(``\"jim\"``);`\n\n`session.update(statement, user);`\n\n`session.commit();`\n\n`session.close();`\n\n`}`\n\n`//根据 id 删除 user 表的数据`\n\n`@Test`\n\n`public` `void` `testDeleteUserById(){`\n\n`String statement = ``\"com.ys.po.userMapper.deleteUserById\"``;`\n\n`session.delete(statement,``4``);`\n\n`session.commit();`\n\n`session.close();`\n\n`}`\n\n`}`\n\n |\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 补充：如何得到插入数据之后的主键值？\n\n第一种：数据库设置主键自增机制\n\n　　　　userMapper.xml 文件中定义：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n | \n\n`<!-- 向 user 表插入一条数据 -->`\n\n`<insert id=``\"insertUser\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`<!-- 将插入的数据主键返回到 user 对象中`\n\n`keyProperty:将查询到的主键设置到parameterType 指定到对象的那个属性`\n\n`select LAST_INSERT_ID()：查询上一次执行insert 操作返回的主键id值，只适用于自增主键`\n\n`resultType:指定 select LAST_INSERT_ID() 的结果类型`\n\n`order:AFTER，相对于 select LAST_INSERT_ID()操作的顺序`\n\n`-->`\n\n`<selectKey keyProperty=``\"id\"` `resultType=``\"int\"` `order=``\"AFTER\"``>`\n\n`select LAST_INSERT_ID()`\n\n`</selectKey>`\n\n`insert into user(username,sex,birthday,address)`\n\n`value(#{username},#{sex},#{birthday},#{address})`\n\n`</insert>`\n\n |\n\n　　　　测试：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n | \n\n`//向 user 表中插入一条数据并获取主键值`\n\n`@Test`\n\n`public` `void` `testInsertUser(){`\n\n`String statement = ``\"com.ys.po.userMapper.insertUser\"``;`\n\n`User user = ``new` `User();`\n\n`user.setUsername(``\"Bob\"``);`\n\n`user.setSex(``\"女\"``);`\n\n`session.insert(statement, user);`\n\n`//提交插入的数据`\n\n`session.commit();`\n\n`//打印主键值`\n\n`System.out.println(user.getId());`\n\n`session.close();`\n\n`}`\n\n |\n\n第二种：非自增主键机制\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n | \n\n`<!-- 向 user 表插入一条数据 -->`\n\n`<insert id=``\"insertUser\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`<!-- 将插入的数据主键返回到 user 对象中`\n\n`流程是：首先通过 select UUID()得到主键值，然后设置到 user 对象的id中，在进行 insert 操作`\n\n`keyProperty:将查询到的主键设置到parameterType 指定到对象的那个属性`\n\n`select UUID()：得到主键的id值，注意这里是字符串`\n\n`resultType:指定 select UUID() 的结果类型`\n\n`order:BEFORE，相对于 select UUID()操作的顺序`\n\n`-->`\n\n`<selectKey keyProperty=``\"id\"` `resultType=``\"String\"` `order=``\"BEFORE\"``>`\n\n`select UUID()`\n\n`</selectKey>`\n\n`insert into user(id,username,sex,birthday,address)`\n\n`value(#{id},#{username},#{sex},#{birthday},#{address})`\n\n`</insert>`\n\n |\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n\n### 总结：\n\n　　①、parameterType:指定输入参数的类型\n\n　　②、resultType:指定输出结果的类型，在select中如果查询结果是集合，那么也表示集合中每个元素的类型\n\n　　③、#{}:表示占位符，用来接收输入参数，类型可以是简单类型，pojo,HashMap等等\n\n　　　　如果接收简单类型，#{}可以写成 value 或者其他名称\n\n　　　　如果接收 pojo 对象值，通过 OGNL 读取对象中的属性值，即属性.属性.属性...的方式获取属性值\n\n　　④、${}:表示一个拼接符，会引起 sql 注入，不建议使用　　\n\n　　　　用来接收输入参数，类型可以是简单类型，pojo,HashMap等等\n\n　　　　如果接收简单类型，${}里面只能是 value\n\n　　　　如果接收 pojo 对象值，通过 OGNL 读取对象中的属性值，即属性.属性.属性...的方式获取属性值",[[1568618808593,["GJX@GJXAIOU",[[-1,92,"*   [1、创建MySQL数据库：mybatisDemo和表：user](https://www.cnblogs.com/ysocean/p/7277545.html#_label0)\n*   [2、建立一个Java工程，并导入相应的jar包，具体目录如下](https://www.cnblogs.com/ysocean/p/7277545.html#_label1)\n*   [3、在 MyBatisTest 工程中添加数据库配置文件 mybatis-configuration.xml](https://www.cnblogs.com/ysocean/p/7277545.html#_label2)\n*   [4、定义表所对应的实体类](https://www.cnblogs.com/ysocean/p/7277545.html#_label3)\n*   [5、定义操作 user 表的sql映射文件userMapper.xml　　](https://www.cnblogs.com/ysocean/p/7277545.html#_label4)\n*   [6、向 mybatis-configuration.xml 配置文件中注册 userMapper.xml 文件](https://www.cnblogs.com/ysocean/p/7277545.html#_label5)\n*   [ 7、创建测试类](https://www.cnblogs.com/ysocean/p/7277545.html#_label6)\n*   [补充：如何得到插入数据之后的主键值？](https://www.cnblogs.com/ysocean/p/7277545.html#_label7)\n*   [总结：](https://www.cnblogs.com/ysocean/p/7277545.html#_label8)\n\n* * *"]],[92,913],[92,92]]],[1568618810705,["GJX@GJXAIOU",[[-1,84,"**目录**\n"]],[84,91],[84,84]]],[1568618814948,["GJX@GJXAIOU",[[-1,35,"https://www.cnblogs.com/ysocean/p/7277545.html"]],[35,81],[35,35]]],[1568618825802,["GJX@GJXAIOU",[[1,38,"[原文链接](https://www.cnblogs.com/ysocean/p/7277545.html)"]],[38,38],[92,92]]],[1568618829081,["GJX@GJXAIOU",[[-1,2,"["]],[3,3],[2,2]]],[1568618833073,["GJX@GJXAIOU",[[-1,32,"]()"]],[32,35],[32,32]]],[1568618869571,["GJX@GJXAIOU",[[-1,118,"：[http://www.cnblogs.com/ysocean/p/7271600.html](http://www.cnblogs.com/ysocean/p/7271600.html)"]],[119,213],[118,118]]],[1568618881102,["GJX@GJXAIOU",[[-1,91,"　　"],[-1,172,"　　"],[-1,206," 　　"],[-1,404,"　　"],[-1,440,"　　"],[-1,455,"　　"],[-1,555,"　　"],[-1,757,"　　"],[-1,808,"　　"],[-1,1161," "],[1,1162,""],[-1,2474," "],[1,2475,""],[-1,2562,"　　"],[1,2564,""],[-1,2840," "],[1,2841,""],[-1,3935," "],[1,3936,""],[-1,4048,"　　"],[1,4050,""],[-1,4351," "],[1,4352,""],[-1,6069," "],[1,6070,""],[-1,6200,"　　"],[1,6202,""],[-1,6319," "],[1,6320,""],[-1,6517," "],[1,6518,""],[-1,7001," "],[1,7002,""],[-1,9709," "],[1,9710,""],[-1,9820,"　　　　"],[1,9824,""],[-1,9898," "],[1,9899,""],[-1,10473," "],[-1,10477,"　　　　"],[-1,10537," "],[1,10538,""],[-1,10907," "],[1,10908,""],[-1,10979," "],[1,10980,""],[-1,11575," "],[1,11576,""],[-1,11654,"　　"],[-1,11683,"　　"],[-1,11743,"　　"],[-1,11792,"　　　　"],[-1,11827,"　　　　"],[-1,11885,"　　"],[-1,11921,"　　　　"],[-1,11960,"　　　　"],[-1,11989,"　　　　"]],[0,12045],[0,12045]]],[1568618912522,["GJX@GJXAIOU",[[-1,202,"ps:本篇博客源代码链接：[http://pan.baidu.com/s/1eSEfc8i ](http://pan.baidu.com/s/1eSEfc8i%20)密码：j480"]],[202,292],[202,202]]],[1568618915169,["GJX@GJXAIOU",[[-1,204,"[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n"]],[203,268],[203,203]]],[1568618915411,["GJX@GJXAIOU",[[-1,204,"\n"]],[203,203],[202,202]]],[1568618915980,["GJX@GJXAIOU",[[-1,203,"\n"]],[202,202],[201,201]]],[1568618954075,["GJX@GJXAIOU",[[-1,273,"\n"]],[273,273],[272,272]]],[1568618956315,["GJX@GJXAIOU",[[-1,482,"[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)"]],[482,546],[482,482]]],[1568618967109,["GJX@GJXAIOU",[[-1,205,"#"]],[205,205],[237,237]]],[1568618968605,["GJX@GJXAIOU",[[-1,485,"#"]],[483,483],[516,516]]],[1568618989149,["GJX@GJXAIOU",[[-1,750," "],[1,751," "],[1,790,"·"],[-1,945," "],[1,946," "],[-1,1003," "],[1,1004," "],[-1,1043," "],[1,1044," "],[-1,1228,"  "],[1,1230,"  "],[-1,1287," "],[1,1288," "],[-1,1349," "],[1,1350," "],[-1,1620," "],[1,1621," "],[-1,1716," "],[1,1717," "],[-1,1861," "],[1,1862," "],[-1,1930," "],[1,1931," "],[-1,1994," "],[1,1995," "],[-1,2081," "],[1,2082," "],[-1,2133," "],[1,2134," "],[-1,2606," "],[1,2607," "],[-1,2629," "],[1,2630," "],[-1,2657," "],[1,2658," "],[-1,2665," "],[1,2666," "],[-1,2685," "],[1,2686," "],[-1,2691," "],[1,2692," "],[-1,2708," "],[1,2709," "],[-1,2738," "],[1,2739," "],[-1,2763," "],[1,2764," "],[-1,2791," "],[1,2792," "],[-1,2819," "],[1,2820," "],[-1,2825," "],[1,2826," "],[-1,2847," "],[1,2848," "],[-1,2868," "],[1,2869," "],[-1,2875," "],[1,2876," "],[-1,2889," "],[1,2890," "],[-1,2931," "],[1,2932," "],[-1,2966," "],[1,2967," "],[-1,2993," "],[1,2994," "],[-1,3000," "],[1,3001," "],[-1,3079," "],[1,3080," "],[-1,3109," "],[1,3110," "],[-1,3131," "],[1,3132," "],[-1,3138," "],[1,3139," "],[-1,3197," "],[1,3198," "],[-1,3230," "],[1,3231," "],[-1,3257," "],[1,3258," "],[-1,3264," "],[1,3265," "],[-1,3341," "],[1,3342," "],[-1,3375," "],[1,3376," "],[-1,3401," "],[1,3402," "],[-1,3408," "],[1,3409," "],[-1,3496," "],[1,3497," "],[-1,3528," "],[1,3529," "],[-1,3542," "],[1,3543," "],[-1,3550," "],[1,3551," "],[-1,3567," "],[1,3568," "],[-1,3581," "],[1,3582," "],[-1,3593," "],[1,3594," "],[-1,3605," "],[1,3606," "],[-1,3622," "],[1,3623," "],[-1,3636," "],[1,3637," "],[-1,3652," "],[1,3653," "],[-1,3665," "],[1,3666," "],[-1,4127," "],[1,4128," "],[-1,4148," "],[1,4149," "],[-1,4182," "],[1,4183," "],[-1,4522," "],[1,4523," "],[-1,4810," "],[1,4811," "],[-1,5079," "],[1,5080," "],[-1,5111," "],[1,5112," "],[-1,5182," "],[1,5183," "],[-1,5330," "],[1,5331," "],[-1,5557," "],[1,5558," "],[-1,5727," "],[1,5728," "],[-1,6334," "],[1,6335," "],[-1,6757," "],[1,6758," "],[-1,6782," "],[1,6783," "],[-1,6815," "],[1,6816," "],[-1,6843," "],[1,6844," "],[-1,6893," "],[1,6894," "],[-1,6950," "],[1,6951," "],[-1,7014," "],[1,7015," "],[-1,7044," "],[1,7045," "],[-1,7072," "],[1,7073," "],[-1,7100," "],[1,7101," "],[-1,7108," "],[1,7109," "],[-1,7194," "],[1,7195," "],[-1,7201," "],[1,7202," "],[-1,7252," "],[1,7253," "],[-1,7467," "],[1,7468," "],[-1,7474," "],[1,7475," "],[-1,7646," "],[1,7647," "],[-1,7653," "],[1,7654," "],[-1,7836," "],[1,7837," "],[-1,7923," "],[1,7924," "],[-1,8024," "],[1,8025," "],[-1,8031," "],[1,8032," "],[-1,8075," "],[1,8076," "],[-1,8315," "],[1,8316," "],[-1,8322," "],[1,8323," "],[-1,8371," "],[1,8372," "],[-1,8473," "],[1,8474," "],[-1,8617," "],[1,8618," "],[-1,8624," "],[1,8625," "],[-1,8665," "],[1,8666," "],[-1,8719," "],[1,8720," "],[-1,8726," "],[1,8727," "],[-1,8931," "],[1,8932," "],[-1,8938," "],[1,8939," "],[-1,8983," "],[1,8984," "],[-1,9070," "],[1,9071," "],[-1,9077," "],[1,9078," "],[-1,9266," "],[1,9267," "],[-1,9273," "],[1,9274," "],[-1,9318," "],[1,9319," "],[-1,9693," "],[1,9694," "],[-1,10006," "],[1,10007," "],[-1,10027," "],[1,10028," "],[-1,10316," "],[1,10317," "],[-1,10323," "],[1,10324," "],[-1,10364," "],[1,10365," "],[-1,10418," "],[1,10419," "],[-1,10425," "],[1,10426," "],[-1,10766," "],[1,10767," "],[-1,11097," "],[1,11098," "],[-1,11121," "],[1,11122," "]],[790,790],[791,791]]],[1568618989351,["GJX@GJXAIOU",[[1,791,"·"]],[791,791],[792,792]]],[1568618990573,["GJX@GJXAIOU",[[-1,790,"··"]],[792,792],[790,790]]],[1568618991788,["GJX@GJXAIOU",[[1,790,"```"]],[790,790],[793,793]]],[1568618991864,["GJX@GJXAIOU",[[1,793,"language\n```\n"]],[793,793],[793,801]]],[1568618993166,["GJX@GJXAIOU",[[-1,793,"language"],[1,801,"m"]],[793,801],[794,794]]],[1568618994836,["GJX@GJXAIOU",[[1,794,"ybatis"]],[794,794],[800,800]]],[1568618996721,["GJX@GJXAIOU",[[-1,793,"mybatis"]],[800,800],[793,793]]],[1568618997270,["GJX@GJXAIOU",[[1,793,"M"]],[793,793],[794,794]]],[1568618999433,["GJX@GJXAIOU",[[1,794,"yBs"]],[794,794],[797,797]]],[1568619000265,["GJX@GJXAIOU",[[-1,796,"s"]],[797,797],[796,796]]],[1568619003464,["GJX@GJXAIOU",[[1,796,"atis_xml"]],[796,796],[804,804]]],[1568619003937,["GJX@GJXAIOU",[[1,805,"\n"]],[804,804],[805,805]]],[1568619006950,["GJX@GJXAIOU",[[1,805,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n \n<!-- 注意：environments标签，当mybatis和spring整合之后，这个标签是不用配置的 -->\n \n<!-- 可以配置多个运行环境，但是每个 SqlSessionFactory 实例只能选择一个运行环境  \n  一、development:开发模式\n   二、work：工作模式-->\n <environments default=\"development\">\n <!--id属性必须和上面的default一样  -->\n    <environment id=\"development\">\n    <!--事务管理器\n        一、JDBC：这个配置直接简单使用了 JDBC 的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围\n        二、MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期\n            比如 spring 或 JEE 应用服务器的上下文，默认情况下，它会关闭连接。然而一些容器并不希望这样，\n            因此如果你需要从连接中停止它，就可以将 closeConnection 属性设置为 false，比如：\n            <transactionManager type=\"MANAGED\">\n                <property name=\"closeConnection\" value=\"false\"/>\n            </transactionManager>\n      -->\n      <transactionManager type=\"JDBC\"/>\n      <!--dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象源  -->\n      <dataSource type=\"POOLED\">\n        <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/mybatisdemo\"/>\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"root\"/>\n      </dataSource>\n    </environment>\n  </environments>\n   \n</configuration>"]],[805,805],[2107,2107]]],[1568619015097,["GJX@GJXAIOU",[[-1,665,"[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n"]],[664,729],[664,664]]],[1568619018184,["GJX@GJXAIOU",[[-1,665,"\n"]],[665,665],[664,664]]],[1568619098297,["GJX@GJXAIOU",[[-1,566,"\n"]],[566,566],[565,565]]],[1568619415967,["GJX@GJXAIOU",[[-1,1045,"   二、"]],[1050,1050],[1045,1045]]],[1568619416465,["GJX@GJXAIOU",[[-1,1044,"\n"]],[1045,1045],[1044,1044]]],[1568619417408,["GJX@GJXAIOU",[[-1,1043,"式"]],[1044,1044],[1043,1043]]],[1568619419714,["GJX@GJXAIOU",[[1,1043,"式"]],[1043,1043],[1044,1044]]],[1568619421992,["GJX@GJXAIOU",[[1,1044,"\n"]],[1044,1044],[1045,1045]]],[1568619423217,["GJX@GJXAIOU",[[1,1045,"   二、"]],[1045,1045],[1050,1050]]],[1568619425649,["GJX@GJXAIOU",[[-1,1045,"   二、"]],[1050,1050],[1045,1045]]],[1568619426170,["GJX@GJXAIOU",[[-1,1044,"\n"]],[1045,1045],[1044,1044]]],[1568619428775,["GJX@GJXAIOU",[[1,1044," huozhe"]],[1044,1044],[1051,1051]]],[1568619430682,["GJX@GJXAIOU",[[-1,1045,"huozhe"]],[1051,1051],[1045,1045]]],[1568619431652,["GJX@GJXAIOU",[[1,1045,"huo"]],[1045,1045],[1048,1048]]],[1568619432354,["GJX@GJXAIOU",[[-1,1045,"huo"]],[1048,1048],[1045,1045]]],[1568619434547,["GJX@GJXAIOU",[[1,1045,"或者"]],[1045,1045],[1047,1047]]],[1568619438568,["GJX@GJXAIOU",[[-1,1024,"  一、"]],[1024,1028],[1024,1024]]],[1568619439139,["GJX@GJXAIOU",[[1,1024,"："]],[1024,1024],[1025,1025]]],[1568619442176,["GJX@GJXAIOU",[[-1,1023,"\n"]],[1024,1024],[1023,1023]]],[1568619443746,["GJX@GJXAIOU",[[-1,1021,"  "]],[1023,1023],[1021,1021]]],[1568619531962,["GJX@GJXAIOU",[[-1,1295,"            "]],[1307,1307],[1295,1295]]],[1568619532328,["GJX@GJXAIOU",[[-1,1294,"\n"]],[1295,1295],[1294,1294]]],[1568619534315,["GJX@GJXAIOU",[[1,1294,"。"]],[1294,1294],[1295,1295]]],[1568619545919,["GJX@GJXAIOU",[[-1,1347,"\n            "]],[1347,1360],[1347,1347]]],[1568619628591,["GJX@GJXAIOU",[[-1,2012,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n| \n\n`<?xml version=``\"1.0\"` `encoding=``\"UTF-8\"``?>`\n\n`<!DOCTYPE configuration PUBLIC ``\"-//mybatis.org//DTD Config 3.0//EN\"` `\"http://mybatis.org/dtd/mybatis-3-config.dtd\"``>`\n\n`<configuration>`\n\n`<!-- 注意：environments标签，当mybatis和spring整合之后，这个标签是不用配置的 -->`\n\n`<!-- 可以配置多个运行环境，但是每个 SqlSessionFactory 实例只能选择一个运行环境  `\n\n`一、development:开发模式`\n\n`二、work：工作模式-->`\n\n`<environments ``default``=``\"development\"``>`\n\n`<!--id属性必须和上面的``default``一样  -->`\n\n`<environment id=``\"development\"``>`\n\n`<!--事务管理器`\n\n`一、JDBC：这个配置直接简单使用了 JDBC 的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围`\n\n`二、MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期`\n\n`比如 spring 或 JEE 应用服务器的上下文，默认情况下，它会关闭连接。然而一些容器并不希望这样，`\n\n`因此如果你需要从连接中停止它，就可以将 closeConnection 属性设置为 ``false``，比如：`\n\n`<transactionManager type=``\"MANAGED\"``>`\n\n`<property name=``\"closeConnection\"` `value=``\"false\"``/>`\n\n`</transactionManager>`\n\n`-->`\n\n`<transactionManager type=``\"JDBC\"``/>`\n\n`<!--dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象源  -->`\n\n`<dataSource type=``\"POOLED\"``>`\n\n`<property name=``\"driver\"` `value=``\"com.mysql.jdbc.Driver\"``/>`\n\n`<property name=``\"url\"` `value=``\"jdbc:mysql://localhost:3306/mybatisdemo\"``/>`\n\n`<property name=``\"username\"` `value=``\"root\"``/>`\n\n`<property name=``\"password\"` `value=``\"root\"``/>`\n\n`</dataSource>`\n\n`</environment>`\n\n`</environments>`\n\n`</configuration>`\n\n|\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)"]],[2012,3518],[2012,2012]]],[1568619631016,["GJX@GJXAIOU",[[-1,2016,"#"]],[2016,2016],[2029,2029]]],[1568619801063,["GJX@GJXAIOU",[[-1,2031,"![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803002247834-447237894.png)\n"]],[2030,2126],[2030,2030]]],[1568619813382,["GJX@GJXAIOU",[[1,2030,"![定义数据表对应的实体类]($resource/%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB.png)"]],[2030,2030],[2160,2160]]],[1568619833263,["GJX@GJXAIOU",[[-1,2161,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n| \n\n`package` `com.ys.po;`\n\n`import` `java.util.Date;`\n\n`public` `class` `User {`\n\n`private` `int` `id;`\n\n`private` `String username;`\n\n`private` `String sex;`\n\n`private` `Date birthday;`\n\n`private` `String address;`\n\n`public` `int` `getId() {`\n\n`return` `id;`\n\n`}`\n\n`public` `void` `setId(``int` `id) {`\n\n`this``.id = id;`\n\n`}`\n\n`public` `String getUsername() {`\n\n`return` `username;`\n\n`}`\n\n`public` `void` `setUsername(String username) {`\n\n`this``.username = username;`\n\n`}`\n\n`public` `String getSex() {`\n\n`return` `sex;`\n\n`}`\n\n`public` `void` `setSex(String sex) {`\n\n`this``.sex = sex;`\n\n`}`\n\n`public` `Date getBirthday() {`\n\n`return` `birthday;`\n\n`}`\n\n`public` `void` `setBirthday(Date birthday) {`\n\n`this``.birthday = birthday;`\n\n`}`\n\n`public` `String getAddress() {`\n\n`return` `address;`\n\n`}`\n\n`public` `void` `setAddress(String address) {`\n\n`this``.address = address;`\n\n`}`\n\n`@Override`\n\n`public` `String toString() {`\n\n`return` `\"User [id=\"` `+ id + ``\", username=\"` `+ username + ``\", sex=\"` `+ sex`\n\n`+ ``\", birthday=\"` `+ birthday + ``\", address=\"` `+ address + ``\"]\"``;`\n\n`}`\n\n`}`\n\n|\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)"]],[2161,3501],[2161,2161]]],[1568619841730,["GJX@GJXAIOU",[[1,2163,"\n"]],[2160,2160],[2161,2161]]],[1568619842437,["GJX@GJXAIOU",[[1,2161,"·"]],[2161,2161],[2162,2162]]],[1568619843095,["GJX@GJXAIOU",[[-1,2161,"·"]],[2162,2162],[2161,2161]]],[1568619843631,["GJX@GJXAIOU",[[1,2164,"\n"]],[2161,2161],[2162,2162]]],[1568619844170,["GJX@GJXAIOU",[[1,2162,"···"]],[2162,2162],[2165,2165]]],[1568619844943,["GJX@GJXAIOU",[[-1,2162,"···"]],[2165,2165],[2162,2162]]],[1568619845327,["GJX@GJXAIOU",[[-1,2164,"\n"]],[2162,2162],[2161,2161]]],[1568619845882,["GJX@GJXAIOU",[[1,2161,"·"]],[2161,2161],[2162,2162]]],[1568619846311,["GJX@GJXAIOU",[[-1,2161,"·"]],[2162,2162],[2161,2161]]],[1568619847105,["GJX@GJXAIOU",[[1,2164,"\n"]],[2161,2161],[2162,2162]]],[1568619847484,["GJX@GJXAIOU",[[1,2162,"·"]],[2162,2162],[2163,2163]]],[1568619847777,["GJX@GJXAIOU",[[-1,2162,"·"]],[2163,2163],[2162,2162]]],[1568619847921,["GJX@GJXAIOU",[[-1,2164,"\n"]],[2162,2162],[2161,2161]]],[1568619848701,["GJX@GJXAIOU",[[1,2161,"··"]],[2161,2161],[2163,2163]]],[1568619849432,["GJX@GJXAIOU",[[-1,2161,"··"]],[2163,2163],[2161,2161]]],[1568619850723,["GJX@GJXAIOU",[[1,2161,"```"]],[2161,2161],[2164,2164]]],[1568619850783,["GJX@GJXAIOU",[[1,2164,"language\n```\n"]],[2164,2164],[2164,2172]]],[1568619852186,["GJX@GJXAIOU",[[-1,2164,"language"],[1,2172,"U"]],[2164,2172],[2165,2165]]],[1568619854087,["GJX@GJXAIOU",[[1,2165,"ser+__"]],[2165,2165],[2170,2170]]],[1568619855064,["GJX@GJXAIOU",[[-1,2168,"+_"]],[2170,2170],[2168,2168]]],[1568619857437,["GJX@GJXAIOU",[[1,2169,"x"]],[2169,2169],[2170,2170]]],[1568619858839,["GJX@GJXAIOU",[[-1,2169,"x"]],[2170,2170],[2169,2169]]],[1568619859888,["GJX@GJXAIOU",[[1,2169,"java"]],[2169,2169],[2173,2173]]],[1568619860857,["GJX@GJXAIOU",[[1,2174,"\n"]],[2173,2173],[2174,2174]]],[1568619863890,["GJX@GJXAIOU",[[1,2174,"package com.ys.po;\n \nimport java.util.Date;\n \npublic class User {\n    private int id;\n    private String username;\n    private String sex;\n    private Date birthday;\n    private String address;\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    public String getSex() {\n        return sex;\n    }\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n    public Date getBirthday() {\n        return birthday;\n    }\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n    public String getAddress() {\n        return address;\n    }\n    public void setAddress(String address) {\n        this.address = address;\n    }\n    @Override\n    public String toString() {\n        return \"User [id=\" + id + \", username=\" + username + \", sex=\" + sex\n                + \", birthday=\" + birthday + \", address=\" + address + \"]\";\n    }\n}"]],[2174,2174],[3249,3249]]],[1568619894106,["GJX@GJXAIOU",[[-1,2371," public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    public String getSex() {\n        return sex;\n    }\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n    public Date getBirthday() {\n        return birthday;\n    }\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n    public String getAddress() {\n        return address;\n    }\n    public void setAddress(String address) {\n        this.address = address;\n    }\n    @Override\n    public String toString() {\n        return \"User [id=\" + id + \", username=\" + username + \", sex=\" + sex\n                + \", birthday=\" + birthday + \", address=\" + address + \"]\";\n    }"]],[2371,3247],[2371,2371]]],[1568619897587,["GJX@GJXAIOU",[[1,2371,"//"]],[2371,2371],[2373,2373]]],[1568619899186,["GJX@GJXAIOU",[[1,2373," sheng"]],[2373,2373],[2379,2379]]],[1568619900455,["GJX@GJXAIOU",[[-1,2374,"sheng"]],[2379,2379],[2374,2374]]],[1568619909099,["GJX@GJXAIOU",[[1,2374,"省略 get、set 方法以及 "]],[2374,2374],[2390,2390]]],[1568619911199,["GJX@GJXAIOU",[[-1,2389," "]],[2390,2390],[2389,2389]]],[1568619913259,["GJX@GJXAIOU",[[1,2389,"重新"]],[2389,2389],[2391,2391]]],[1568619914471,["GJX@GJXAIOU",[[-1,2389,"重新"]],[2391,2391],[2389,2389]]],[1568619921343,["GJX@GJXAIOU",[[1,2389,"重写 toString 方法"]],[2389,2389],[2403,2403]]],[1568619931638,["GJX@GJXAIOU",[[-1,2554,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n| \n\n`<?xml version=``\"1.0\"` `encoding=``\"UTF-8\"` `?>`\n\n`<!DOCTYPE mapper`\n\n`PUBLIC ``\"-//mybatis.org//DTD Mapper 3.0//EN\"`\n\n`\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"``>`\n\n`<mapper namespace=``\"com.ys.po.userMapper\"``>`\n\n`<!-- 根据 id 查询 user 表中的数据`\n\n`id:唯一标识符，此文件中的id值不能重复`\n\n`resultType:返回值类型，一条数据库记录也就对应实体类的一个对象`\n\n`parameterType:参数类型，也就是查询条件的类型`\n\n`-->`\n\n`<select id=``\"selectUserById\"`\n\n`resultType=``\"com.ys.po.User\"` `parameterType=``\"int\"``>`\n\n`<!-- 这里和普通的sql 查询语句差不多，对于只有一个参数，后面的 #{id}表示占位符，里面不一定要写id,写啥都可以，但是不要空着，如果有多个参数则必须写pojo类里面的属性 -->`\n\n`select * from user where id = #{id}`\n\n`</select>`\n\n`<!-- 查询 user 表的所有数据`\n\n`注意：因为是查询所有数据，所以返回的应该是一个集合,这个集合里面每个元素都是User类型`\n\n`-->`\n\n`<select id=``\"selectUserAll\"` `resultType=``\"com.ys.po.User\"``>`\n\n`select * from user`\n\n`</select>`\n\n`<!-- 模糊查询：根据 user 表的username字段`\n\n`下面两种写法都可以，但是要注意`\n\n`1``、${value}里面必须要写value，不然会报错`\n\n`2``、${}表示拼接 sql 字符串，将接收到的参数不加任何修饰拼接在sql语句中`\n\n`3``、使用${}会造成 sql 注入`\n\n`-->`\n\n`<select id=``\"selectLikeUserName\"` `resultType=``\"com.ys.po.User\"` `parameterType=``\"String\"``>`\n\n`select * from user where username like ``'%${value}%'`\n\n`<!-- select * from user where username like #{username} -->`\n\n`</select>`\n\n`<!-- 向 user 表插入一条数据 -->`\n\n`<insert id=``\"insertUser\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`insert into user(id,username,sex,birthday,address)`\n\n`value(#{id},#{username},#{sex},#{birthday},#{address})`\n\n`</insert>`\n\n`<!-- 根据 id 更新 user 表的数据 -->`\n\n`<update id=``\"updateUserById\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`update user set username=#{username} where id=#{id}`\n\n`</update>`\n\n`<!-- 根据 id 删除 user 表的数据 -->`\n\n`<delete id=``\"deleteUserById\"` `parameterType=``\"int\"``>`\n\n`delete from user where id=#{id}`\n\n`</delete>`\n\n`</mapper>`\n\n|\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)"]],[2554,4541],[2554,2554]]],[1568619937687,["GJX@GJXAIOU",[[-1,2715,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n| \n\n`<mappers>`\n\n`<!-- 注册userMapper.xml文件，`\n\n`userMapper.xml位于com.ys.mapper这个包下，所以resource写成com/ys/mapper/userMapper.xml-->`\n\n`<mapper resource=``\"com/ys/mapper/userMapper.xml\"``/>`\n\n`</mappers>`\n\n|\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n"]],[2715,2999],[2715,2715]]],[1568619948415,["GJX@GJXAIOU",[[-1,2734,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n| \n\n`package` `com.ys.test;`\n\n`import` `java.io.InputStream;`\n\n`import` `java.util.List;`\n\n`import` `org.apache.ibatis.session.SqlSession;`\n\n`import` `org.apache.ibatis.session.SqlSessionFactory;`\n\n`import` `org.apache.ibatis.session.SqlSessionFactoryBuilder;`\n\n`import` `org.junit.Before;`\n\n`import` `org.junit.Test;`\n\n`import` `com.ys.po.User;`\n\n`public` `class` `CRUDTest {`\n\n`//定义 SqlSession`\n\n`SqlSession session =``null``;`\n\n`@Before`\n\n`public` `void` `init(){`\n\n`//定义mybatis全局配置文件`\n\n`String resource = ``\"mybatis-configuration.xml\"``;`\n\n`//加载 mybatis 全局配置文件`\n\n`InputStream inputStream = CRUDTest.``class``.getClassLoader()`\n\n`.getResourceAsStream(resource);`\n\n`//构建sqlSession的工厂`\n\n`SqlSessionFactory sessionFactory = ``new` `SqlSessionFactoryBuilder().build(inputStream);`\n\n`//根据 sqlSessionFactory 产生 session`\n\n`session = sessionFactory.openSession();`\n\n`}`\n\n`//根据id查询user表数据`\n\n`@Test`\n\n`public` `void` `testSelectUserById(){`\n\n`/*这个字符串由 userMapper.xml 文件中 两个部分构成`\n\n`<mapper namespace=\"com.ys.po.userMapper\"> 的 namespace 的值`\n\n`<select id=\"selectUserById\" > id 值*/`\n\n`String statement = ``\"com.ys.po.userMapper.selectUserById\"``;`\n\n`User user = session.selectOne(statement, ``1``);`\n\n`System.out.println(user);`\n\n`session.close();`\n\n`}`\n\n`//查询所有user表所有数据`\n\n`@Test`\n\n`public` `void` `testSelectUserAll(){`\n\n`String statement = ``\"com.ys.po.userMapper.selectUserAll\"``;`\n\n`List<User> listUser = session.selectList(statement);`\n\n`for``(User user : listUser){`\n\n`System.out.println(user);`\n\n`}`\n\n`session.close();`\n\n`}`\n\n`//模糊查询：根据 user 表的username字段`\n\n`@Test`\n\n`public` `void` `testSelectLikeUserName(){`\n\n`String statement = ``\"com.ys.po.userMapper.selectLikeUserName\"``;`\n\n`List<User> listUser = session.selectList(statement, ``\"%t%\"``);`\n\n`for``(User user : listUser){`\n\n`System.out.println(user);`\n\n`}`\n\n`session.close();`\n\n`}`\n\n`//向 user 表中插入一条数据`\n\n`@Test`\n\n`public` `void` `testInsertUser(){`\n\n`String statement = ``\"com.ys.po.userMapper.insertUser\"``;`\n\n`User user = ``new` `User();`\n\n`user.setUsername(``\"Bob\"``);`\n\n`user.setSex(``\"女\"``);`\n\n`session.insert(statement, user);`\n\n`//提交插入的数据`\n\n`session.commit();`\n\n`session.close();`\n\n`}`\n\n`//根据 id 更新 user 表的数据`\n\n`@Test`\n\n`public` `void` `testUpdateUserById(){`\n\n`String statement = ``\"com.ys.po.userMapper.updateUserById\"``;`\n\n`//如果设置的 id不存在，那么数据库没有数据更改`\n\n`User user = ``new` `User();`\n\n`user.setId(``4``);`\n\n`user.setUsername(``\"jim\"``);`\n\n`session.update(statement, user);`\n\n`session.commit();`\n\n`session.close();`\n\n`}`\n\n`//根据 id 删除 user 表的数据`\n\n`@Test`\n\n`public` `void` `testDeleteUserById(){`\n\n`String statement = ``\"com.ys.po.userMapper.deleteUserById\"``;`\n\n`session.delete(statement,``4``);`\n\n`session.commit();`\n\n`session.close();`\n\n`}`\n\n`}`\n\n|\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n"]],[2734,5905],[2734,2734]]],[1568619952686,["GJX@GJXAIOU",[[-1,2799,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n| \n\n`<!-- 向 user 表插入一条数据 -->`\n\n`<insert id=``\"insertUser\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`<!-- 将插入的数据主键返回到 user 对象中`\n\n`keyProperty:将查询到的主键设置到parameterType 指定到对象的那个属性`\n\n`select LAST_INSERT_ID()：查询上一次执行insert 操作返回的主键id值，只适用于自增主键`\n\n`resultType:指定 select LAST_INSERT_ID() 的结果类型`\n\n`order:AFTER，相对于 select LAST_INSERT_ID()操作的顺序`\n\n`-->`\n\n`<selectKey keyProperty=``\"id\"` `resultType=``\"int\"` `order=``\"AFTER\"``>`\n\n`select LAST_INSERT_ID()`\n\n`</selectKey>`\n\n`insert into user(username,sex,birthday,address)`\n\n`value(#{username},#{sex},#{birthday},#{address})`\n\n`</insert>`\n\n|"]],[2799,3425],[2799,2799]]],[1568619956734,["GJX@GJXAIOU",[[-1,2806,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n| \n\n`//向 user 表中插入一条数据并获取主键值`\n\n`@Test`\n\n`public` `void` `testInsertUser(){`\n\n`String statement = ``\"com.ys.po.userMapper.insertUser\"``;`\n\n`User user = ``new` `User();`\n\n`user.setUsername(``\"Bob\"``);`\n\n`user.setSex(``\"女\"``);`\n\n`session.insert(statement, user);`\n\n`//提交插入的数据`\n\n`session.commit();`\n\n`//打印主键值`\n\n`System.out.println(user.getId());`\n\n`session.close();`\n\n`}`\n\n|"]],[2806,3227],[2806,2806]]],[1568619961286,["GJX@GJXAIOU",[[-1,2821,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n| \n\n`<!-- 向 user 表插入一条数据 -->`\n\n`<insert id=``\"insertUser\"` `parameterType=``\"com.ys.po.User\"``>`\n\n`<!-- 将插入的数据主键返回到 user 对象中`\n\n`流程是：首先通过 select UUID()得到主键值，然后设置到 user 对象的id中，在进行 insert 操作`\n\n`keyProperty:将查询到的主键设置到parameterType 指定到对象的那个属性`\n\n`select UUID()：得到主键的id值，注意这里是字符串`\n\n`resultType:指定 select UUID() 的结果类型`\n\n`order:BEFORE，相对于 select UUID()操作的顺序`\n\n`-->`\n\n`<selectKey keyProperty=``\"id\"` `resultType=``\"String\"` `order=``\"BEFORE\"``>`\n\n`select UUID()`\n\n`</selectKey>`\n\n`insert into user(id,username,sex,birthday,address)`\n\n`value(#{id},#{username},#{sex},#{birthday},#{address})`\n\n`</insert>`\n\n|\n\n[回到顶部](https://www.cnblogs.com/ysocean/p/7277545.html#_labelTop)\n"]],[2821,3539],[2821,2821]]],[1568619975135,["GJX@GJXAIOU",[[-1,2193," "]],[2194,2194],[2193,2193]]],[1568619975654,["GJX@GJXAIOU",[[-1,2193,"\n"]],[2193,2193],[2192,2192]]],[1568620004514,["GJX@GJXAIOU",[[-1,2454,"![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803002356303-1648947603.png)"]],[2454,2550],[2454,2454]]],[1568620015578,["GJX@GJXAIOU",[[1,2454,"![定义表的SQL映射文件]($resource/%E5%AE%9A%E4%B9%89%E8%A1%A8%E7%9A%84SQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.png)"]],[2454,2454],[2560,2560]]],[1568620040026,["GJX@GJXAIOU",[[-1,2413,"#"]],[2413,2413],[2412,2412]]],[1568620485925,["GJX@GJXAIOU",[[1,2562,"\n"]],[2559,2559],[2560,2560]]],[1568620486686,["GJX@GJXAIOU",[[1,2560,"·"]],[2560,2560],[2561,2561]]],[1568620487453,["GJX@GJXAIOU",[[-1,2560,"·"]],[2561,2561],[2560,2560]]],[1568620488621,["GJX@GJXAIOU",[[1,2560,"```"]],[2560,2560],[2563,2563]]],[1568620488649,["GJX@GJXAIOU",[[1,2563,"language\n```\n"]],[2563,2563],[2563,2571]]],[1568620492038,["GJX@GJXAIOU",[[-1,2563,"language"],[1,2571,"U"]],[2563,2571],[2564,2564]]],[1568620493400,["GJX@GJXAIOU",[[1,2564,"ser"]],[2564,2564],[2567,2567]]],[1568620497333,["GJX@GJXAIOU",[[-1,2564,"ser"]],[2567,2567],[2564,2564]]],[1568620502918,["GJX@GJXAIOU",[[1,2563,"userMapper_xml"]],[2563,2563],[2577,2577]]],[1568620503542,["GJX@GJXAIOU",[[1,2578,"\n"]],[2577,2577],[2578,2578]]],[1568620508438,["GJX@GJXAIOU",[[1,2578,"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.ys.po.userMapper\">\n \n    <!-- 根据 id 查询 user 表中的数据\n       id:唯一标识符，此文件中的id值不能重复\n       resultType:返回值类型，一条数据库记录也就对应实体类的一个对象\n       parameterType:参数类型，也就是查询条件的类型\n    -->\n    <select id=\"selectUserById\"\n            resultType=\"com.ys.po.User\" parameterType=\"int\">\n        <!-- 这里和普通的sql 查询语句差不多，对于只有一个参数，后面的 #{id}表示占位符，里面不一定要写id,写啥都可以，但是不要空着，如果有多个参数则必须写pojo类里面的属性 -->\n        select * from user where id = #{id}\n    </select>\n   \n     \n    <!-- 查询 user 表的所有数据\n        注意：因为是查询所有数据，所以返回的应该是一个集合,这个集合里面每个元素都是User类型\n     -->\n    <select id=\"selectUserAll\" resultType=\"com.ys.po.User\">\n        select * from user\n    </select>\n     \n    <!-- 模糊查询：根据 user 表的username字段\n            下面两种写法都可以，但是要注意\n            1、${value}里面必须要写value，不然会报错\n            2、${}表示拼接 sql 字符串，将接收到的参数不加任何修饰拼接在sql语句中\n            3、使用${}会造成 sql 注入\n     -->\n    <select id=\"selectLikeUserName\" resultType=\"com.ys.po.User\" parameterType=\"String\">\n        select * from user where username like '%${value}%'\n        <!-- select * from user where username like #{username} -->\n    </select>\n     \n    <!-- 向 user 表插入一条数据 -->\n    <insert id=\"insertUser\" parameterType=\"com.ys.po.User\">\n        insert into user(id,username,sex,birthday,address)\n            value(#{id},#{username},#{sex},#{birthday},#{address})\n    </insert>\n     \n    <!-- 根据 id 更新 user 表的数据 -->\n    <update id=\"updateUserById\" parameterType=\"com.ys.po.User\">\n        update user set username=#{username} where id=#{id}\n    </update>\n     \n    <!-- 根据 id 删除 user 表的数据 -->\n    <delete id=\"deleteUserById\" parameterType=\"int\">\n        delete from user where id=#{id}\n    </delete>\n</mapper>"]],[2578,2578],[4368,4368]]],[1568620554198,["GJX@GJXAIOU",[[-1,2563,"u"]],[2564,2564],[2563,2563]]],[1568620554638,["GJX@GJXAIOU",[[1,2563,"U"]],[2563,2563],[2564,2564]]],[1568620557510,["GJX@GJXAIOU",[[-1,2435,"u"]],[2436,2436],[2435,2435]]],[1568620617739,[null,[[-1,2576,"U"],[1,2577,"\n"],[-1,4367,"\n"]],[2576,2576],[4367,4367]]],[1568620617739,[null,[[1,2576,"U"],[-1,2576,"\n"],[1,4367,"\n"]],[4367,4367],[2576,2576]]],[1568620557934,["GJX@GJXAIOU",[[1,2435,"U"]],[2435,2435],[2436,2436]]],[1568620557962,["GJX@GJXAIOU",[[1,2435," "]],[2436,2436],[2437,2437]]],[1568620737743,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4369,"\n"]],[2578,2578],[4369,4369]]],[1568620737743,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4369,"\n"]],[4369,4369],[2578,2578]]],[1568620682517,["GJX@GJXAIOU",[[1,2832,",keyi"]],[2832,2832],[2837,2837]]],[1568620683588,["GJX@GJXAIOU",[[-1,2833,"keyi"]],[2837,2837],[2833,2833]]],[1568620686258,["GJX@GJXAIOU",[[1,2833,"可以自定义"]],[2833,2833],[2838,2838]]],[1568620688153,["GJX@GJXAIOU",[[1,2833," "]],[2833,2833],[2834,2834]]],[1568620689815,["GJX@GJXAIOU",[[1,2827," "]],[2827,2827],[2828,2828]]],[1568620690559,["GJX@GJXAIOU",[[1,2825," "]],[2825,2825],[2826,2826]]],[1568620693333,["GJX@GJXAIOU",[[-1,2813,":"]],[2814,2814],[2813,2813]]],[1568620694078,["GJX@GJXAIOU",[[1,2813,"："]],[2813,2813],[2814,2814]]],[1568620698156,["GJX@GJXAIOU",[[-1,2859,":"]],[2860,2860],[2859,2859]]],[1568620698734,["GJX@GJXAIOU",[[1,2859,"："]],[2859,2859],[2860,2860]]],[1568620700613,["GJX@GJXAIOU",[[-1,2906,":"]],[2907,2907],[2906,2906]]],[1568620701105,["GJX@GJXAIOU",[[1,2906,"："]],[2906,2906],[2907,2907]]],[1568620703797,["GJX@GJXAIOU",[[1,2922,"；"]],[2922,2922],[2923,2923]]],[1568620706702,["GJX@GJXAIOU",[[1,2885,"；"]],[2885,2885],[2886,2886]]],[1568620708046,["GJX@GJXAIOU",[[1,2841,"；"]],[2841,2841],[2842,2842]]],[1568620712766,["GJX@GJXAIOU",[[1,3116," "]],[3116,3116],[3117,3117]]],[1568620713685,["GJX@GJXAIOU",[[1,3121," "]],[3121,3121],[3122,3122]]],[1568620716104,["GJX@GJXAIOU",[[1,3046," "]],[3046,3046],[3047,3047]]],[1568620717342,["GJX@GJXAIOU",[[1,3090," "]],[3090,3090],[3091,3091]]],[1568620718590,["GJX@GJXAIOU",[[1,3094," "]],[3094,3094],[3095,3095]]],[1568620797743,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4386,"\n"]],[2578,2578],[4386,4386]]],[1568620797743,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4386,"\n"]],[4386,4386],[2578,2578]]],[1568620751125,["GJX@GJXAIOU",[[1,4391,"parameterType 这个属性表示的是传入参数类型。\n注意：写的不是包路径，而是某个类的全类名，那么表示的是传入的参数类型是这个类的类型。所以不管是 int ，String 这样的数据类型，或者是全类名，都是表示参数类型，并不冲突。"]],[4391,4391],[4510,4510]]],[1568620780284,["GJX@GJXAIOU",[[-1,4574,"![](https://images2017.cnblogs.com/blog/1120165/201708/1120165-20170803002534725-1062751486.png)"]],[4574,4670],[4574,4574]]],[1568620788230,["GJX@GJXAIOU",[[1,4573," "]],[4573,4573],[4574,4574]]],[1568620789108,["GJX@GJXAIOU",[[-1,4573," "]],[4574,4574],[4573,4573]]],[1568620797638,["GJX@GJXAIOU",[[1,4573,"在configuration"]],[4573,4573],[4587,4587]]],[1568620797667,["GJX@GJXAIOU",[[1,4574," "]],[4587,4587],[4588,4588]]],[1568620857747,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4573,"\n"],[-1,4589,")"]],[2578,2578],[4589,4589]]],[1568620857747,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4572,"\n"],[1,4589,")"]],[4589,4589],[2578,2578]]],[1568620799561,["GJX@GJXAIOU",[[1,4588,"中"]],[4588,4588],[4589,4589]]],[1568620799590,["GJX@GJXAIOU",[[1,4588," "]],[4589,4589],[4590,4590]]],[1568620806485,["GJX@GJXAIOU",[[1,4590,"注册牌子"]],[4590,4590],[4594,4594]]],[1568620808886,["GJX@GJXAIOU",[[-1,4592,"牌子"]],[4594,4594],[4592,4592]]],[1568620811669,["GJX@GJXAIOU",[[1,4592,"配置文件："]],[4592,4592],[4597,4597]]],[1568620812693,["GJX@GJXAIOU",[[1,4601,"\n"]],[4597,4597],[4598,4598]]],[1568620814534,["GJX@GJXAIOU",[[1,4598,"```"]],[4598,4598],[4601,4601]]],[1568620814562,["GJX@GJXAIOU",[[1,4601,"language\n```\n"]],[4601,4601],[4601,4609]]],[1568620818334,["GJX@GJXAIOU",[[-1,4601,"language"],[1,4609,"U"]],[4601,4609],[4602,4602]]],[1568620819775,["GJX@GJXAIOU",[[-1,4601,"U"]],[4602,4602],[4601,4601]]],[1568620823374,["GJX@GJXAIOU",[[1,4601,"MyBatiso"]],[4601,4601],[4609,4609]]],[1568620824068,["GJX@GJXAIOU",[[-1,4608,"o"]],[4609,4609],[4608,4608]]],[1568620826646,["GJX@GJXAIOU",[[1,4608,"_xml"]],[4608,4608],[4612,4612]]],[1568620827582,["GJX@GJXAIOU",[[1,4613,"\n"]],[4612,4612],[4613,4613]]],[1568620831142,["GJX@GJXAIOU",[[1,4613,"<mappers>\n       <!-- 注册userMapper.xml文件，\n       userMapper.xml位于com.ys.mapper这个包下，所以resource写成com/ys/mapper/userMapper.xml-->\n       <mapper resource=\"com/ys/mapper/userMapper.xml\"/>\n</mappers>"]],[4613,4613],[4807,4807]]],[1568620977747,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4573,"\n"],[-1,4812,")"]],[2578,2578],[4812,4812]]],[1568620977747,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4572,"\n"],[1,4812,")"]],[4812,4812],[2578,2578]]],[1568620922207,["GJX@GJXAIOU",[[1,4833,"··"]],[4833,4833],[4835,4835]]],[1568620923107,["GJX@GJXAIOU",[[-1,4833,"··"]],[4835,4835],[4833,4833]]],[1568620924318,["GJX@GJXAIOU",[[1,4833,"```"]],[4833,4833],[4836,4836]]],[1568620924347,["GJX@GJXAIOU",[[1,4836,"language\n```\n"]],[4836,4836],[4836,4844]]],[1568620932566,["GJX@GJXAIOU",[[-1,4836,"language"],[1,4844,"C"]],[4836,4844],[4837,4837]]],[1568620935792,["GJX@GJXAIOU",[[1,4837,"RUDTset"]],[4837,4837],[4844,4844]]],[1568620936828,["GJX@GJXAIOU",[[-1,4841,"set"]],[4844,4844],[4841,4841]]],[1568620939077,["GJX@GJXAIOU",[[1,4841,"est_java"]],[4841,4841],[4849,4849]]],[1568620939628,["GJX@GJXAIOU",[[1,4850,"\n"]],[4849,4849],[4850,4850]]],[1568620948384,["GJX@GJXAIOU",[[1,4850,"package com.ys.test;\n \nimport java.io.InputStream;\nimport java.util.List;\n \nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.Before;\nimport org.junit.Test;\n \nimport com.ys.po.User;\n \npublic class CRUDTest {\n    //定义 SqlSession\n    SqlSession session =null;\n     \n    @Before\n    public void init(){\n        //定义mybatis全局配置文件\n        String resource = \"mybatis-configuration.xml\";\n        //加载 mybatis 全局配置文件\n        InputStream inputStream = CRUDTest.class.getClassLoader()\n                                    .getResourceAsStream(resource);\n        //构建sqlSession的工厂\n        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        //根据 sqlSessionFactory 产生 session\n        session = sessionFactory.openSession();\n    }\n     \n    //根据id查询user表数据\n    @Test\n    public void testSelectUserById(){\n        /*这个字符串由 userMapper.xml 文件中 两个部分构成\n            <mapper namespace=\"com.ys.po.userMapper\"> 的 namespace 的值\n            <select id=\"selectUserById\" > id 值*/\n        String statement = \"com.ys.po.userMapper.selectUserById\";\n        User user = session.selectOne(statement, 1);\n        System.out.println(user);\n        session.close();\n    }\n     \n    //查询所有user表所有数据\n    @Test\n    public void testSelectUserAll(){\n        String statement = \"com.ys.po.userMapper.selectUserAll\";\n        List<User> listUser = session.selectList(statement);\n        for(User user : listUser){\n            System.out.println(user);\n        }\n        session.close();\n    }\n     \n    //模糊查询：根据 user 表的username字段\n    @Test\n    public void testSelectLikeUserName(){\n        String statement = \"com.ys.po.userMapper.selectLikeUserName\";\n        List<User> listUser = session.selectList(statement, \"%t%\");\n        for(User user : listUser){\n            System.out.println(user);\n        }\n        session.close();\n         \n    }\n    //向 user 表中插入一条数据\n    @Test\n    public void testInsertUser(){\n        String statement = \"com.ys.po.userMapper.insertUser\";\n        User user = new User();\n        user.setUsername(\"Bob\");\n        user.setSex(\"女\");\n        session.insert(statement, user);\n        //提交插入的数据\n        session.commit();\n        session.close();\n    }\n     \n    //根据 id 更新 user 表的数据\n    @Test\n    public void testUpdateUserById(){\n        String statement = \"com.ys.po.userMapper.updateUserById\";\n        //如果设置的 id不存在，那么数据库没有数据更改\n        User user = new User();\n        user.setId(4);\n        user.setUsername(\"jim\");\n        session.update(statement, user);\n        session.commit();\n        session.close();\n    }\n     \n \n    //根据 id 删除 user 表的数据\n    @Test\n    public void testDeleteUserById(){\n        String statement = \"com.ys.po.userMapper.deleteUserById\";\n        session.delete(statement,4);\n        session.commit();\n        session.close();\n    }\n}"]],[4850,4850],[7758,7758]]],[1568621157757,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4573,"\n"],[-1,4812,")"],[1,4833,"\n"],[-1,7762,"\n"]],[2578,2578],[7762,7762]]],[1568621157757,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4572,"\n"],[1,4812,")"],[-1,4832,"\n"],[1,7762,"\n"]],[7762,7762],[2578,2578]]],[1568621147934,["GJX@GJXAIOU",[[-1,4818,"#"]],[4819,4819],[4818,4818]]],[1568621149186,["GJX@GJXAIOU",[[-1,4820,"**"]],[4822,4822],[4820,4820]]],[1568621150043,["GJX@GJXAIOU",[[-1,4827,"**"]],[4829,4829],[4827,4827]]],[1568621154332,["GJX@GJXAIOU",[[-1,4515,"#"]],[4516,4516],[4515,4515]]],[1568621397760,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4572,"\n"],[-1,4811,")"],[-1,4819,"*"],[1,4820," "],[-1,4826,"*"],[1,4827,"类\n"],[-1,7756,"\n"]],[2578,2578],[7756,7756]]],[1568621397760,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4571,"\n"],[1,4811,")"],[1,4818,"*"],[-1,4818," "],[1,4825,"*"],[-1,4825,"类\n"],[1,7756,"\n"]],[7756,7756],[2578,2578]]],[1568621339604,["GJX@GJXAIOU",[[-1,4814,"\n"]],[4813,4813],[4812,4812]]],[1568621339755,["GJX@GJXAIOU",[[-1,4813,"\n"]],[4812,4812],[4811,4811]]],[1568621577767,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4572,"\n"],[-1,4811,")"],[-1,4817,"*"],[1,4818," "],[-1,4824,"*"],[1,4825,"类\n"],[-1,7754,"\n"]],[2578,2578],[7754,7754]]],[1568621577767,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4571,"\n"],[1,4811,")"],[1,4816,"*"],[-1,4816," "],[1,4823,"*"],[-1,4823,"类\n"],[1,7754,"\n"]],[7754,7754],[2578,2578]]],[1568621550038,["GJX@GJXAIOU",[[1,7820,"···"]],[7820,7820],[7823,7823]]],[1568621551559,["GJX@GJXAIOU",[[-1,7820,"···"]],[7823,7823],[7820,7820]]],[1568621552389,["GJX@GJXAIOU",[[1,7820,"```"]],[7820,7820],[7823,7823]]],[1568621552421,["GJX@GJXAIOU",[[1,7823,"language\n```\n"]],[7823,7823],[7823,7831]]],[1568621554902,["GJX@GJXAIOU",[[-1,7823,"language"],[1,7831,"U"]],[7823,7831],[7824,7824]]],[1568621562325,["GJX@GJXAIOU",[[1,7824,"serMapper_xml"]],[7824,7824],[7837,7837]]],[1568621562652,["GJX@GJXAIOU",[[1,7838,"\n"]],[7837,7837],[7838,7838]]],[1568621565653,["GJX@GJXAIOU",[[1,7838,"<!-- 向 user 表插入一条数据 -->\n    <insert id=\"insertUser\" parameterType=\"com.ys.po.User\">\n        <!-- 将插入的数据主键返回到 user 对象中\n             keyProperty:将查询到的主键设置到parameterType 指定到对象的那个属性\n             select LAST_INSERT_ID()：查询上一次执行insert 操作返回的主键id值，只适用于自增主键\n             resultType:指定 select LAST_INSERT_ID() 的结果类型\n             order:AFTER，相对于 select LAST_INSERT_ID()操作的顺序\n         -->\n        <selectKey keyProperty=\"id\" resultType=\"int\" order=\"AFTER\">\n            select LAST_INSERT_ID()\n        </selectKey>\n        insert into user(username,sex,birthday,address)\n            value(#{username},#{sex},#{birthday},#{address})\n    </insert>"]],[7838,7838],[8470,8470]]],[1568621568643,["GJX@GJXAIOU",[[-1,7797,"\n"]],[7797,7797],[7796,7796]]],[1568621570840,["GJX@GJXAIOU",[[1,7781,"- "]],[7781,7781],[7783,7783]]],[1568621637768,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4572,"\n"],[-1,4811,")"],[-1,4817,"*"],[1,4818," "],[-1,4824,"*"],[1,4825,"类\n"],[-1,7757,"\n"],[1,7781,"\n"],[-1,7783,"\n"],[1,7821,"\n"],[-1,8475,"\n"],[1,8476,""]],[2578,2578],[8476,8476]]],[1568621637768,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4571,"\n"],[1,4811,")"],[1,4816,"*"],[-1,4816," "],[1,4823,"*"],[-1,4823,"类\n"],[1,7757,"\n"],[-1,7780,"\n"],[1,7783,"\n"],[-1,7820,"\n"],[1,8475,"\n"],[-1,8475,""]],[8476,8476],[2578,2578]]],[1568621580541,["GJX@GJXAIOU",[[-1,8478,"\n"]],[8478,8478],[8477,8477]]],[1568621580700,["GJX@GJXAIOU",[[-1,8477,"\n"]],[8477,8477],[8476,8476]]],[1568621582733,["GJX@GJXAIOU",[[1,8481,"···"]],[8481,8481],[8484,8484]]],[1568621584123,["GJX@GJXAIOU",[[-1,8481,"···"]],[8484,8484],[8481,8481]]],[1568621584935,["GJX@GJXAIOU",[[1,8481,"```"]],[8481,8481],[8484,8484]]],[1568621584968,["GJX@GJXAIOU",[[1,8484,"language\n```\n"]],[8484,8484],[8484,8492]]],[1568621591086,["GJX@GJXAIOU",[[-1,8484,"language"],[1,8492,"I"]],[8484,8492],[8485,8485]]],[1568621598118,["GJX@GJXAIOU",[[1,8485,"nsertTest_java"]],[8485,8485],[8499,8499]]],[1568621598234,["GJX@GJXAIOU",[[1,8500,"\n"]],[8499,8499],[8500,8500]]],[1568621606603,["GJX@GJXAIOU",[[1,8500,"//向 user 表中插入一条数据并获取主键值\n    @Test\n    public void testInsertUser(){\n        String statement = \"com.ys.po.userMapper.insertUser\";\n        User user = new User();\n        user.setUsername(\"Bob\");\n        user.setSex(\"女\");\n        session.insert(statement, user);\n        //提交插入的数据\n        session.commit();\n        //打印主键值\n        System.out.println(user.getId());\n        session.close();\n    }"]],[8500,8500],[8894,8894]]],[1568621610262,["GJX@GJXAIOU",[[1,8490,"User"]],[8490,8490],[8494,8494]]],[1568621615588,["GJX@GJXAIOU",[[-1,8554,"test"]],[8558,8558],[8554,8554]]],[1568621619388,["GJX@GJXAIOU",[[1,8564,"Test"]],[8564,8564],[8568,8568]]],[1568621634906,["GJX@GJXAIOU",[[-1,8905,"\n"]],[8905,8905],[8904,8904]]],[1568621635019,["GJX@GJXAIOU",[[-1,8904,"\n"]],[8904,8904],[8903,8903]]],[1568621637559,["GJX@GJXAIOU",[[1,8904,"- "]],[8904,8904],[8906,8906]]],[1568621697769,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4572,"\n"],[-1,4811,")"],[-1,4817,"*"],[1,4818," "],[-1,4824,"*"],[1,4825,"类\n"],[-1,7757,"\n"],[1,7781,"\n"],[-1,7783,"\n"],[1,7821,"\n"],[-1,8477,"\n"],[1,8481,"\n"],[-1,8906,"\n"],[1,8907,""]],[2578,2578],[8907,8907]]],[1568621697769,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4571,"\n"],[1,4811,")"],[1,4816,"*"],[-1,4816," "],[1,4823,"*"],[-1,4823,"类\n"],[1,7757,"\n"],[-1,7780,"\n"],[1,7783,"\n"],[-1,7820,"\n"],[1,8477,"\n"],[-1,8480,"\n"],[1,8906,"\n"],[-1,8906,""]],[8907,8907],[2578,2578]]],[1568621641445,["GJX@GJXAIOU",[[1,8918,"·"]],[8918,8918],[8919,8919]]],[1568621642417,["GJX@GJXAIOU",[[-1,8918,"·"]],[8919,8919],[8918,8918]]],[1568621643325,["GJX@GJXAIOU",[[1,8918,"```"]],[8918,8918],[8921,8921]]],[1568621643359,["GJX@GJXAIOU",[[1,8921,"language\n```\n"]],[8921,8921],[8921,8929]]],[1568621655348,["GJX@GJXAIOU",[[-1,8921,"language"],[1,8929,"U"]],[8921,8929],[8922,8922]]],[1568621659548,["GJX@GJXAIOU",[[1,8922,"serMapper_xml"]],[8922,8922],[8935,8935]]],[1568621659803,["GJX@GJXAIOU",[[1,8936,"\n"]],[8935,8935],[8936,8936]]],[1568621662639,["GJX@GJXAIOU",[[1,8936,"<!-- 向 user 表插入一条数据 -->\n    <insert id=\"insertUser\" parameterType=\"com.ys.po.User\">\n        <!-- 将插入的数据主键返回到 user 对象中\n        流程是：首先通过 select UUID()得到主键值，然后设置到 user 对象的id中，在进行 insert 操作\n             keyProperty:将查询到的主键设置到parameterType 指定到对象的那个属性\n             select UUID()：得到主键的id值，注意这里是字符串\n             resultType:指定 select UUID() 的结果类型\n             order:BEFORE，相对于 select UUID()操作的顺序\n         -->\n        <selectKey keyProperty=\"id\" resultType=\"String\" order=\"BEFORE\">\n            select UUID()\n        </selectKey>\n        insert into user(id,username,sex,birthday,address)\n            value(#{id},#{username},#{sex},#{birthday},#{address})\n    </insert>"]],[8936,8936],[9594,9594]]],[1568621669130,["GJX@GJXAIOU",[[-1,9636,"\n"]],[9636,9636],[9635,9635]]],[1568621757769,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4572,"\n"],[-1,4811,")"],[-1,4817,"*"],[1,4818," "],[-1,4824,"*"],[1,4825,"类\n"],[-1,7757,"\n"],[1,7781,"\n"],[-1,7783,"\n"],[1,7821,"\n"],[-1,8477,"\n"],[1,8481,"\n"],[-1,8906,"\n"],[1,8918,"\n"],[-1,9598,"\n"],[1,9599,""]],[2578,2578],[9599,9599]]],[1568621757769,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4571,"\n"],[1,4811,")"],[1,4816,"*"],[-1,4816," "],[1,4823,"*"],[-1,4823,"类\n"],[1,7757,"\n"],[-1,7780,"\n"],[1,7783,"\n"],[-1,7820,"\n"],[1,8477,"\n"],[-1,8480,"\n"],[1,8906,"\n"],[-1,8917,"\n"],[1,9598,"\n"],[-1,9598,""]],[9599,9599],[2578,2578]]],[1568621699099,["GJX@GJXAIOU",[[-1,9859,"\n"]],[9859,9859],[9858,9858]]],[1568621700572,["GJX@GJXAIOU",[[-1,9893,"\n"]],[9893,9893],[9892,9892]]],[1568621701435,["GJX@GJXAIOU",[[-1,9917,"\n"]],[9917,9917],[9916,9916]]],[1568621702563,["GJX@GJXAIOU",[[-1,9771,"\n"]],[9771,9771],[9770,9770]]],[1568621703435,["GJX@GJXAIOU",[[-1,9740,"\n"]],[9740,9740],[9739,9739]]],[1568621705908,["GJX@GJXAIOU",[[1,9636,"\n"]],[9636,9636],[9637,9637]]],[1568621706854,["GJX@GJXAIOU",[[-1,9609,"\n"]],[9609,9609],[9608,9608]]],[1568621712076,["GJX@GJXAIOU",[[1,9826,"`"]],[9826,9826],[9827,9827]]],[1568621713901,["GJX@GJXAIOU",[[1,9830,"`"],[1,9831,"`"]],[9830,9831],[9830,9833]]],[1568621718514,["GJX@GJXAIOU",[[-1,9831,":`"]],[9833,9833],[9831,9831]]],[1568621720398,["GJX@GJXAIOU",[[1,9831,":"]],[9831,9831],[9832,9832]]],[1568621721396,["GJX@GJXAIOU",[[-1,9831,":"]],[9832,9832],[9831,9831]]],[1568621722200,["GJX@GJXAIOU",[[1,9831,"："]],[9831,9831],[9832,9832]]],[1568621724935,["GJX@GJXAIOU",[[1,9696,"·"]],[9696,9696],[9697,9697]]],[1568621727331,["GJX@GJXAIOU",[[-1,9696,"·"]],[9697,9697],[9696,9696]]],[1568621727974,["GJX@GJXAIOU",[[1,9696,"`"]],[9696,9696],[9697,9697]]],[1568621730005,["GJX@GJXAIOU",[[1,9700,"`"]],[9700,9700],[9701,9701]]],[1568621731355,["GJX@GJXAIOU",[[-1,9701,":"]],[9702,9702],[9701,9701]]],[1568621731998,["GJX@GJXAIOU",[[1,9701,":"]],[9701,9701],[9702,9702]]],[1568621732442,["GJX@GJXAIOU",[[-1,9701,":"]],[9702,9702],[9701,9701]]],[1568621733152,["GJX@GJXAIOU",[[1,9701,"："]],[9701,9701],[9702,9702]]],[1568621735908,["GJX@GJXAIOU",[[-1,9648,":"]],[9649,9649],[9648,9648]]],[1568621736429,["GJX@GJXAIOU",[[1,9648,"："]],[9648,9648],[9649,9649]]],[1568621739003,["GJX@GJXAIOU",[[-1,9624,":"]],[9625,9625],[9624,9624]]],[1568621739543,["GJX@GJXAIOU",[[1,9624,"："]],[9624,9624],[9625,9625]]],[1568621997768,[null,[[-1,2578,"U"],[1,2579,"\n"],[-1,4387,"\n"],[1,4391,"\n"],[-1,4513,"\n"],[1,4572,"\n"],[-1,4811,")"],[-1,4817,"*"],[1,4818," "],[-1,4824,"*"],[1,4825,"类\n"],[-1,7757,"\n"],[1,7781,"\n"],[-1,7783,"\n"],[1,7821,"\n"],[-1,8477,"\n"],[1,8481,"\n"],[-1,8906,"\n"],[1,8918,"\n"],[-1,9601,"\n"],[1,9624,"e"],[-1,9625,":"],[1,9648,"e"],[-1,9649,":"],[-1,9696,"`"],[1,9698,"`"],[1,9700,"}"],[-1,9702,":"],[-1,9828,"`"],[1,9830,"`"],[1,9832,"}"],[-1,9834,":"]],[2578,2578],[9834,9834]]],[1568621997768,[null,[[1,2578,"U"],[-1,2578,"\n"],[1,4387,"\n"],[-1,4390,"\n"],[1,4513,"\n"],[-1,4571,"\n"],[1,4811,")"],[1,4816,"*"],[-1,4816," "],[1,4823,"*"],[-1,4823,"类\n"],[1,7757,"\n"],[-1,7780,"\n"],[1,7783,"\n"],[-1,7820,"\n"],[1,8477,"\n"],[-1,8480,"\n"],[1,8906,"\n"],[-1,8917,"\n"],[1,9601,"\n"],[-1,9623,"e"],[1,9625,":"],[-1,9647,"e"],[1,9649,":"],[1,9695,"`"],[-1,9696,"`"],[-1,9699,"}"],[1,9702,":"],[1,9827,"`"],[-1,9828,"`"],[-1,9831,"}"],[1,9834,":"]],[9834,9834],[2578,2578]]],[1568621949108,["GJX@GJXAIOU",[[1,20,"\n"]],[20,20],[21,21]]],[1568621949338,["GJX@GJXAIOU",[[1,21,"\n"]],[21,21],[22,22]]],[1568621950276,["GJX@GJXAIOU",[[-1,21,"\n"]],[22,22],[21,21]]],[1568621950561,["GJX@GJXAIOU",[[-1,20,"\n"]],[21,21],[20,20]]],[1568621952292,["GJX@GJXAIOU",[[-1,18,"---"]],[20,20],[17,17]]]],null,"GJX@GJXAIOU"]]}