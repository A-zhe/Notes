{"compress":true,"commitItems":[["2dfc0f6a-c4eb-4c95-96bd-0025582fa7b7",1566366985960,"导读：我们每天都与代码打交道，但当被问道什么是好的代码时，很多人可能会先愣一下，然后给出的回答要么比较空泛，要么比较散，没办法简单明了地概括出来。显然，这个问题并没有唯一的标准答案，谁都可以谈论自己的理解，今天谈谈我对于好代码的理解。\n\n一句话概括\n\n> 衡量代码质量的唯一有效标准：WTF/min —— Robert C. Martin\n\n![](https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibGJqPnYuKRU1D9yoltx6VPpxMnzkicnR3QO7lOuQ2pD2g9FcctvNhic64V5WtsnNXSku4MqB4JKbnw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\nBob大叔对于好代码的理解非常有趣，对我也有很大的启发。我们编写的代码，除了用于机器执行产生我们预期的效果以外，更多的时候是给人读的，这个读代码的可能是后来的维护人员，更多时候是一段时间后的作者本人。\n\n我敢打赌每个人都遇到过这样的情况：过几周或者几个月之后，再看到自己写的代码，感觉一团糟，不禁怀疑人生。\n\n我们自己写的代码，一段时间后自己看尚且如此，更别提拿给别人看了。\n\n> 任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。—— Martin Fowler\n\n所以，谈到好代码，首先跳入自己脑子里的一个词就是：**整洁**。\n\n好的代码一定是整洁的，给阅读的人一种如沐春风，赏心悦目的感觉。\n\n> 整洁的代码如同优美的散文。—— Grady Booch\n\n好代码的特性\n\n很难给好的代码下一个定义，相信很多人跟我一样不会认为整洁的代码就一定是好代码，但好代码一定是整洁的，整洁是好代码的必要条件。整洁的代码一定是高内聚低耦合的，也一定是可读性强、易维护的。\n\n### 高内聚低耦合\n\n高内聚低耦合几乎是每个程序员员都会挂在嘴边的，但这个词太过于宽泛，太过于正确，所以聪明的编程人员们提出了若干面向对象设计原则来衡量代码的优劣：\n\n*   开闭原则 OCP (The Open-Close Principle)\n\n*   单一职责原则 SRP (Single Responsibility Principle)\n\n*   依赖倒置原则 DIP (Dependence Inversion Principle)\n\n*   最少知识原则 LKP (Least Knowledge Principle)) / 迪米特法则 (Law Of Demeter)\n\n*   里氏替换原则 LSP (Liskov Substitution Principle)\n\n*   接口隔离原则 ISP (Interface Segregation Principle)\n\n*   组合/聚合复用原则 CARP (Composite/Aggregate Reuse Principle)\n\n这些原则想必大家都很熟悉了，是我们编写代码时的指导方针，按照这些原则开发的代码具有高内聚低耦合的特性。换句话说，我们可以用这些原则来衡量代码的优劣。\n\n但这些原则并不是死板的教条，我们也经常会因为其他的权衡（例如可读性、复杂度等）违背或者放弃一些原则。比如子类拥有特性的方法时，我们很可能打破里氏替换原则。再比如，单一职责原则跟接口隔离原则有时候是冲突的，我们通常会舍弃接口隔离原则，保持单一职责。只要打破原则的理由足够充分，也并不见得是坏的代码。\n\n### 可读性\n\n代码只要具有了高内聚和低耦合就足够好了吗？并不见得，我认为代码还必须是易读的。好的代码无论是风格、结构还是设计上都应该是可读性很强的。可以从以下几个方面考虑整洁代码，提高可读性。\n\n#### 命名\n\n大到项目名、包名、类名，小到方法名、变量名、参数名，甚至是一个临时变量的名称，其命名都是很严肃的事，好的名字需要斟酌。\n\n**► 名副其实**\n\n好的名称一定是名副其实的，不需要注释解释即可明白其含义的。\n\n2.  `/**`\n\n4.  `* 创建后的天数`\n\n6.  `**/`\n\n8.  `int d;`\n\n int daysSinceCreation;\n\n后者比前者的命名要好很多，阅读者一下子就明白了变量的意思。\n\n**► 容易区分**\n\n我们很容易就会写下非常相近的方法名，仅从名称无法区分两者到底有啥区别（eg. `getAccount()`与`getAccountInfo()`），这样在调用时也很难抉择要用哪个，需要去看实现的代码才能确定。\n\n**► 可读的**\n\n名称一定是可读的，易读的，最好不要用自创的缩写，或者中英文混写。\n\n**► 足够短**\n\n名称当然不是越长越好，应该在足够表达其含义的情况下越短越好。\n\n#### 格式\n\n良好的代码格式也是提高可读性非常重要的一环，分为垂直格式和水平格式。\n\n**► 垂直格式**\n\n通常一行只写一个表达式或者子句。一组代码代表一个完整的思路，不同组的代码中间用空行间隔。\n\n3.  public class Demo {\n\n4.  @Resource\n\n5.  private List<Handler> handlerList;\n\n6.  private Map<TypeEnum, Handler> handlerMap = new ConcurrentHashMap<>();\n\n8.  @PostConstruct\n\n9.  private void init() {\n\n10.  if (!CollectionUtils.isEmpty(handlerList)) {\n\n11.  for (Handler handler : handlerList) {\n\n12.  handlerMap.put(handler.getType(), handler);\n\n13.  }\n\n14.  }\n\n15.  }\n\n17.  publicResult<Map<String, Object>> query(Long id, TypeEnum typeEnum) {\n\n18.  Handler handler = handlerMap.get(typeEnum);\n\n19.  if (null == handler) {\n\n20.  return Result.returnFailed(ErrorCode.CAN_NOT_HANDLE);\n\n21.  }\n\n22.  return handler.query(id);\n\n23.  }\n\n24.  }\n\n如果去掉了空行，可读性大大降低。\n\n public class Demo {\n\n @Resource\n\n private List<Handler> handlerList;\n\n private Map<TypeEnum, Handler> handlerMap = new ConcurrentHashMap<>();\n\n @PostConstruct\n\n private void init() {\n\n if (!CollectionUtils.isEmpty(handlerList)) {\n\n for (Handler handler : handlerList) {\n\n handlerMap.put(handler.getType(), handler); } } }\n\n public Result<Map<String, Object>> query(Long id, TypeEnum typeEnum) {\n\nHandler handler = handlerMap.get(typeEnum);\n\n if (null == handler) {\n\n return Result.returnFailed(ErrorCode.CAN_NOT_HANDLE);\n\n          }\n\n return handler.query(id); }\n\n }\n\n类静态变量、实体变量应定义在类的顶部。类内方法定义顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter 方法。\n\n**► 水平格式**\n\n要有适当的缩进和空格。\n\n**► 团队统一**\n\n通常，同一个团队的风格尽量保持一致。集团对于 Java 开发进行了非常详细的规范。（可点击下方阅读原文，了解更多内容）\n\n#### 类与函数\n\n**► 类和函数应短小，更短小**\n\n类和函数都不应该过长（集团要求函数长度最多不能超过 80 行），过长的函数可读性一定差，往往也包含了大量重复的代码。\n\n**► 函数只做一件事（同一层次的事）**\n\n同一个函数的每条执行语句应该是统一层次的抽象。例如，我们经常会写一个函数需要给某个 DTO 赋值，然后再调用接口，接着返回结果。那么这个函数应该包含三步：DTO 赋值，调用接口，处理结果。如果函数中还包含了 DTO 赋值的具体操作，那么说明此函数的执行语句并不是在同一层次的抽象。\n\n**► 参数越少越好**\n\n参数越多的函数，调用时越麻烦。尽量保持参数数量足够少，最好是没有。\n\n#### 注释\n\n**► 别给糟糕的代码加注释，重构他**\n\n注释不能美化糟糕的代码。当企图使用注释前，先考虑是否可以通过调整结构，命名等操作，消除写注释的必要，往往这样做之后注释就多余了。\n\n**► 好的注释提供信息、表达意图、阐释、警告**\n\n我们经常遇到这样的情况：注释写的代码执行逻辑与实际代码的逻辑并不符合。大多数时候都是因为代码变化了，而注释并没有跟进变化。所以，注释最好提供一些代码没有的额外信息，展示自己的设计意图，而不是写具体如何实现。 \n\n**► 删除掉注释的代码**\n\ngit等版本控制已经帮我们记录了代码的变更历史，没必要继续留着过时的代码，注释的代码也会对阅读等造成干扰。\n\n#### 错误处理\n\n**► 错误处理很重要，但他不能搞乱代码逻辑**\n\n错误处理应该集中在同一层处理，并且错误处理的函数最好不包含其他的业务逻辑代码，只需要处理错误信息即可。\n\n**► 抛出异常时提供足够多的环境和说明，方便排查问题**\n\n异常抛出时最好将执行的类名，关键数据，环境信息等均抛出，此时自定义的异常类就派上用场了，通过统一的一层处理异常，可以方便快速地定位到问题。\n\n**► 特例模型可消除异常控制或者 null 判断**\n\n大多数的异常都是来源于NPE，有时候这个可以通过 Null Object 来消除掉。\n\n► **尽量不要返回 null ，不要传 null 参数**\n\n不返回 null 和不传 null 也是为了尽量降低 NPE 的可能性。\n\n如何判断不是好的代码\n\n讨论了好代码的必要条件，我们再来看看好代码的否定条件：什么不是好的代码。Kent Beck 使用味道来形容重构的时机，我认为当代码有坏味道的时候，也代表了其并不是好的代码。\n\n### 代码的坏味道\n\n**► 重复**\n\n> 重复可能是软件中一切邪恶的根源。—— Robert C.Martin\n\nMartin Fowler 也认为坏味道中首当其冲的就是重复代码。\n\n很多时候，当我们消除了重复代码之后，发现代码就已经比原来整洁多了。\n\n**► 函数过长、类过大、参数过长**\n\n过长的函数解释能力、共享能力、选择能力都较差，也不易维护。\n\n过大的类代表了类做了很多事情，也常常有过多的重复代码。\n\n参数过长，不易理解，调用时也容易出错。\n\n**► 发散式变化、霰弹式修改、依恋情结**\n\n如果一个类不是单一职责的，则不同的变化可能都需要修改这个类，说明存在发散式变化，应考虑将不同的变化分离开。\n\n如果某个变化需要修改多个类的方法，则说明存在霰弹式修改，应考虑将这些需要修改的方法放入同一个类。\n\n如果函数对于某个类的兴趣高于了自己所处的类，说明存在依恋情结，应考虑将函数转移到他应有的类中。\n\n**► 数据泥团**\n\n有时候会发现三四个相同的字段，在多个类和函数中均出现，这时候说明有必要给这一组字段建立一个类，将其封装起来。\n\n**► 过多的 if...else 或者使用 switch**\n\n过多的 if...else 或者 switch ，都应该考虑用多态来替换掉。甚至有些人认为除个别情况外，代码中就不应该存在 if...else 。\n\n总结\n\n本文首先一句话概括了我认为的好代码的必要条件：整洁，接着具体分析了整洁代码的特点，又分析了好代码的否定条件：什么样的代码不是好的代码。仅是本人的一些见解，希望对各位以后的编程有些许的帮助。\n\n我认为仅仅编写出可运行的代码是远远不够的，还要时刻注意代码的整洁度，留下一些漂亮的代码，希望写的代码都能保留并运行 102 年！\n\n后续增加一些实际的例子来说明好的和坏的代码；分享下如何编写整洁代码——自己认为有用的一些编程技巧。\n\n参考：\n\n《重构——改善既有代码的设计》Martin Fowler\n\n《代码整洁之道》 Robert C. Martin\n\n《Java开发规约中文版 》阿里巴巴集团约码项目组",[[1566366941016,["GJX@GJXAIOU",[[-1,126,">"]],[127,127],[126,126]]],[1566366955578,["GJX@GJXAIOU",[[1,127,"**"],[1,168,"**"]],[127,168],[127,172]]],[1566366964689,["GJX@GJXAIOU",[[1,119,"## "]],[119,119],[127,127]]],[1566366988000,["GJX@GJXAIOU",[[-1,544,">"]],[544,545],[544,544]]],[1566366992913,["GJX@GJXAIOU",[[1,544,"**"],[1,605,"**"]],[544,605],[544,609]]],[1566366995177,["GJX@GJXAIOU",[[-1,546," "]],[547,547],[546,546]]],[1566367002305,["GJX@GJXAIOU",[[-1,677,"> "]],[677,679],[677,677]]],[1566367005484,["GJX@GJXAIOU",[[1,677,"**"],[1,704,"**"]],[677,704],[677,708]]],[1566367008124,["GJX@GJXAIOU",[[1,710,"## "]],[710,710],[719,719]]],[1566367062139,["GJX@GJXAIOU",[[-1,940,"\n"]],[940,940],[939,939]]],[1566367063145,["GJX@GJXAIOU",[[-1,899,"\n"]],[899,899],[898,898]]],[1566367063874,["GJX@GJXAIOU",[[-1,988,"\n"]],[988,988],[987,987]]],[1566367064545,["GJX@GJXAIOU",[[-1,1036,"\n"]],[1036,1036],[1035,1035]]],[1566367065369,["GJX@GJXAIOU",[[-1,1105,"\n"]],[1105,1105],[1104,1104]]],[1566367066763,["GJX@GJXAIOU",[[-1,1152,"\n"]],[1152,1152],[1151,1151]]],[1566367067713,["GJX@GJXAIOU",[[-1,1201,"\n"]],[1201,1201],[1200,1200]]],[1566367135424,["GJX@GJXAIOU",[[-1,1698,"2.  `/**`\n\n4.  `* 创建后的天数`\n\n6.  `**/`\n\n8.  `int d;`\n\n int daysSinceCreation;"]],[1698,1773],[1698,1698]]],[1566367135763,["GJX@GJXAIOU",[[-1,1658," "],[1,1659," "],[-1,1698,""],[1,1698,"·"],[-1,1734," "],[1,1735," "],[-1,1781," "],[1,1782," "],[-1,1852," "],[1,1853," "],[-1,1897," "],[1,1898," "],[-1,1985," "],[1,1986," "],[-1,3224,"       "],[1,3231,"       "],[-1,3343," "],[1,3344," "],[-1,3368," "],[1,3369," "],[-1,3452," "],[1,3453," "],[-1,3531," "],[1,3532," "],[-1,3696," "],[1,3697," "],[-1,3754," "],[1,3755," "],[-1,3842," "],[1,3843," "],[-1,3969," "],[1,3970," "],[-1,3975," "],[1,3976," "],[-1,4057," "],[1,4058," "],[-1,4136," "],[1,4137," "],[-1,4238," "],[1,4239," "],[-1,4309," "],[1,4310," "],[-1,4493," "],[1,4494," "],[-1,4611," "],[1,4612," "],[-1,4713," "],[1,4714," "],[-1,4891," "],[1,4892," "],[-1,4959," "],[1,4960," "]],[1698,1698],[1699,1699]]],[1566367136222,["GJX@GJXAIOU",[[1,1699,"··"]],[1699,1699],[1701,1701]]],[1566367137404,["GJX@GJXAIOU",[[-1,1698,"···"]],[1701,1701],[1698,1698]]],[1566367137801,["GJX@GJXAIOU",[[-1,1699,"\n"]],[1698,1698],[1697,1697]]],[1566367139715,["GJX@GJXAIOU",[[1,1697,"```"]],[1697,1697],[1700,1700]]],[1566367139746,["GJX@GJXAIOU",[[1,1700,"language\n```\n"]],[1700,1700],[1700,1708]]],[1566367141010,["GJX@GJXAIOU",[[-1,1700,"language"],[1,1708,"j"]],[1700,1708],[1701,1701]]],[1566367141469,["GJX@GJXAIOU",[[1,1701,"ava"]],[1701,1701],[1704,1704]]],[1566367141672,["GJX@GJXAIOU",[[1,1705,"\n"]],[1704,1704],[1705,1705]]],[1566367144510,["GJX@GJXAIOU",[[1,1705,"`"]],[1705,1705],[1706,1706]]],[1566367146483,["GJX@GJXAIOU",[[-1,1705,"`"]],[1705,1706],[1705,1705]]],[1566367155273,["GJX@GJXAIOU",[[1,1705,"/**\n\n\n\n  * 创建后的天数\n\n\n\n  **/\n\n\n\n  int d;\n\n\n\n\n\n\n\n  int daysSinceCreation;"]],[1705,1705],[1775,1775]]],[1566367157418,["GJX@GJXAIOU",[[-1,1725,"\n"]],[1724,1724],[1723,1723]]],[1566367157827,["GJX@GJXAIOU",[[-1,1724,"\n"]],[1723,1723],[1722,1722]]],[1566367158687,["GJX@GJXAIOU",[[-1,1711,"\n"]],[1711,1711],[1710,1710]]],[1566367158984,["GJX@GJXAIOU",[[-1,1710,"\n"]],[1710,1710],[1709,1709]]],[1566367159376,["GJX@GJXAIOU",[[-1,1709,"\n"]],[1709,1709],[1708,1708]]],[1566367160171,["GJX@GJXAIOU",[[-1,1720,"\n"]],[1720,1720],[1719,1719]]],[1566367161305,["GJX@GJXAIOU",[[-1,1728,"\n"]],[1728,1728],[1727,1727]]],[1566367161521,["GJX@GJXAIOU",[[-1,1727,"\n"]],[1727,1727],[1726,1726]]],[1566367161858,["GJX@GJXAIOU",[[-1,1726,"\n"]],[1726,1726],[1725,1725]]],[1566367162827,["GJX@GJXAIOU",[[-1,1741,"\n"]],[1741,1741],[1740,1740]]],[1566367163057,["GJX@GJXAIOU",[[-1,1740,"\n"]],[1740,1740],[1739,1739]]],[1566367163320,["GJX@GJXAIOU",[[-1,1739,"\n"]],[1739,1739],[1738,1738]]],[1566367163811,["GJX@GJXAIOU",[[-1,1738,"\n"]],[1738,1738],[1737,1737]]],[1566367164315,["GJX@GJXAIOU",[[-1,1737,"\n"]],[1737,1737],[1736,1736]]],[1566367164553,["GJX@GJXAIOU",[[-1,1736,"\n"]],[1736,1736],[1735,1735]]],[1566367168353,["GJX@GJXAIOU",[[-1,1766,"\n"]],[1766,1766],[1765,1765]]],[1566367169033,["GJX@GJXAIOU",[[-1,1765,"\n"]],[1765,1765],[1764,1764]]],[1566367203800,["GJX@GJXAIOU",[[-1,1924,"\n"]],[1924,1924],[1923,1923]]],[1566367204768,["GJX@GJXAIOU",[[-1,1807,"\n"]],[1807,1807],[1806,1806]]],[1566367220018,["GJX@GJXAIOU",[[-1,1967,"\n"]],[1967,1967],[1966,1966]]],[1566367221688,["GJX@GJXAIOU",[[-1,2007,"\n"]],[2007,2007],[2006,2006]]],[1566367223257,["GJX@GJXAIOU",[[1,2007,"\n"]],[2006,2006],[2007,2007]]],[1566367231376,["GJX@GJXAIOU",[[-1,2055,"\n"]],[2055,2055],[2054,2054]]],[1566367235393,["GJX@GJXAIOU",[[1,2071,"**"],[1,2084,"**"]],[2071,2084],[2071,2088]]],[1566367252384,["GJX@GJXAIOU",[[-1,2105,"3.  public class Demo {\n\n4.  @Resource\n\n5.  private List<Handler> handlerList;\n\n6.  private Map<TypeEnum, Handler> handlerMap = new ConcurrentHashMap<>();\n\n8.  @PostConstruct\n\n9.  private void init() {\n\n10.  if (!CollectionUtils.isEmpty(handlerList)) {\n\n11.  for (Handler handler : handlerList) {\n\n12.  handlerMap.put(handler.getType(), handler);\n\n13.  }\n\n14.  }\n\n15.  }\n\n17.  publicResult<Map<String, Object>> query(Long id, TypeEnum typeEnum) {\n\n18.  Handler handler = handlerMap.get(typeEnum);\n\n19.  if (null == handler) {\n\n20.  return Result.returnFailed(ErrorCode.CAN_NOT_HANDLE);\n\n21.  }\n\n22.  return handler.query(id);\n\n23.  }\n\n24.  }"]],[2105,2746],[2105,2105]]],[1566367255517,["GJX@GJXAIOU",[[1,2104,"```"]],[2104,2104],[2107,2107]]],[1566367255547,["GJX@GJXAIOU",[[1,2107,"language\n```\n"]],[2107,2107],[2107,2115]]],[1566367256387,["GJX@GJXAIOU",[[-1,2107,"language"],[1,2115,"j"]],[2107,2115],[2108,2108]]],[1566367256770,["GJX@GJXAIOU",[[1,2108,"ava"]],[2108,2108],[2111,2111]]],[1566367257889,["GJX@GJXAIOU",[[1,2112,"\n"]],[2111,2111],[2112,2112]]],[1566367261147,["GJX@GJXAIOU",[[1,2112,"1.  public class Demo {\n\n2.  @Resource\n\n3.  private List<Handler> handlerList;\n\n4.  private Map<TypeEnum, Handler> handlerMap = new ConcurrentHashMap<>();\n\n6.  @PostConstruct\n\n7.  private void init() {\n\n8.  if (!CollectionUtils.isEmpty(handlerList)) {\n\n9.  for (Handler handler : handlerList) {\n\n10.  handlerMap.put(handler.getType(), handler);\n\n11.  }\n\n12.  }\n\n13.  }\n\n15.  publicResult<Map<String, Object>> query(Long id, TypeEnum typeEnum) {\n\n16.  Handler handler = handlerMap.get(typeEnum);\n\n17.  if (null == handler) {\n\n18.  return Result.returnFailed(ErrorCode.CAN_NOT_HANDLE);\n\n19.  }\n\n20.  return handler.query(id);\n\n21.  }\n\n22.  }"]],[2112,2112],[2751,2751]]],[1566367262988,["GJX@GJXAIOU",[[-1,2112,"1.  public class Demo {\n\n2.  @Resource\n\n3.  private List<Handler> handlerList;\n\n4.  private Map<TypeEnum, Handler> handlerMap = new ConcurrentHashMap<>();\n\n6.  @PostConstruct\n\n7.  private void init() {\n\n8.  if (!CollectionUtils.isEmpty(handlerList)) {\n\n9.  for (Handler handler : handlerList) {\n\n10.  handlerMap.put(handler.getType(), handler);\n\n11.  }\n\n12.  }\n\n13.  }\n\n15.  publicResult<Map<String, Object>> query(Long id, TypeEnum typeEnum) {\n\n16.  Handler handler = handlerMap.get(typeEnum);\n\n17.  if (null == handler) {\n\n18.  return Result.returnFailed(ErrorCode.CAN_NOT_HANDLE);\n\n19.  }\n\n20.  return handler.query(id);\n\n21.  }\n\n22.  }"]],[2751,2751],[2112,2112]]],[1566367264995,["GJX@GJXAIOU",[[1,2112,"public class Demo {\n\n    @Resource\n\n    private List<Handler> handlerList;\n\n    private Map<TypeEnum, Handler> handlerMap = new ConcurrentHashMap<>();\n\n\n\n    @PostConstruct\n\n    private void init() {\n\n        if (!CollectionUtils.isEmpty(handlerList)) {\n\n            for (Handler handler : handlerList) {\n\n                handlerMap.put(handler.getType(), handler);\n\n            }\n\n        }\n\n    }\n\n\n\n    publicResult<Map<String, Object>> query(Long id, TypeEnum typeEnum) {\n\n        Handler handler = handlerMap.get(typeEnum);\n\n        if (null == handler) {\n\n            return Result.returnFailed(ErrorCode.CAN_NOT_HANDLE);\n\n        }\n\n        return handler.query(id);\n\n    }\n\n}"]],[2112,2112],[2795,2795]]],[1566367266800,["GJX@GJXAIOU",[[-1,2132,"\n"]],[2132,2132],[2131,2131]]],[1566367268106,["GJX@GJXAIOU",[[-1,2146,"\n"]],[2146,2146],[2145,2145]]],[1566367272736,["GJX@GJXAIOU",[[-1,2185,"\n"]],[2185,2185],[2184,2184]]],[1566367274704,["GJX@GJXAIOU",[[-1,2262,"\n"]],[2262,2262],[2261,2261]]],[1566367275080,["GJX@GJXAIOU",[[-1,2261,"\n"]],[2261,2261],[2260,2260]]],[1566367275681,["GJX@GJXAIOU",[[-1,2260,"\n"]],[2260,2260],[2259,2259]]],[1566367278564,["GJX@GJXAIOU",[[1,2264,"\n    "]],[2259,2259],[2264,2264]]],[1566367279578,["GJX@GJXAIOU",[[-1,2284,"\n"]],[2284,2284],[2283,2283]]],[1566367280728,["GJX@GJXAIOU",[[-1,2310,"\n"]],[2310,2310],[2309,2309]]],[1566367283665,["GJX@GJXAIOU",[[-1,2363,"\n"]],[2363,2363],[2362,2362]]],[1566367284992,["GJX@GJXAIOU",[[-1,2413,"\n"]],[2413,2413],[2412,2412]]],[1566367286305,["GJX@GJXAIOU",[[-1,2473,"\n"]],[2473,2473],[2472,2472]]],[1566367287985,["GJX@GJXAIOU",[[-1,2487,"\n"]],[2487,2487],[2486,2486]]],[1566367289095,["GJX@GJXAIOU",[[-1,2497,"\n"]],[2497,2497],[2496,2496]]],[1566367291936,["GJX@GJXAIOU",[[-1,2505,"\n"]],[2504,2504],[2503,2503]]],[1566367292337,["GJX@GJXAIOU",[[-1,2504,"\n"]],[2503,2503],[2502,2502]]],[1566367293705,["GJX@GJXAIOU",[[-1,2503,"\n"]],[2503,2503],[2502,2502]]],[1566367294417,["GJX@GJXAIOU",[[1,2507,"\n    "]],[2502,2502],[2507,2507]]],[1566367295993,["GJX@GJXAIOU",[[-1,2582,"\n"]],[2582,2582],[2581,2581]]],[1566367298257,["GJX@GJXAIOU",[[-1,2634,"\n"]],[2634,2634],[2633,2633]]],[1566367299192,["GJX@GJXAIOU",[[-1,2665,"\n"]],[2665,2665],[2664,2664]]],[1566367300728,["GJX@GJXAIOU",[[-1,2731,"\n"]],[2731,2731],[2730,2730]]],[1566367301881,["GJX@GJXAIOU",[[-1,2741,"\n"]],[2741,2741],[2740,2740]]],[1566367302752,["GJX@GJXAIOU",[[-1,2775,"\n"]],[2775,2775],[2774,2774]]],[1566367303881,["GJX@GJXAIOU",[[-1,2781,"\n"]],[2781,2781],[2780,2780]]],[1566367323767,["GJX@GJXAIOU",[[-1,2809,"public class Demo {\n\n @Resource\n\n private List<Handler> handlerList;\n\n private Map<TypeEnum, Handler> handlerMap = new ConcurrentHashMap<>();\n\n @PostConstruct\n\n private void init() {\n\n if (!CollectionUtils.isEmpty(handlerList)) {\n\n for (Handler handler : handlerList) {\n\n handlerMap.put(handler.getType(), handler); } } }\n\n public Result<Map<String, Object>> query(Long id, TypeEnum typeEnum) {\n\nHandler handler = handlerMap.get(typeEnum);\n\n if (null == handler) {\n\n return Result.returnFailed(ErrorCode.CAN_NOT_HANDLE);\n\n          }\n\n return handler.query(id); }\n\n }"]],[2809,3376],[2809,2809]]],[1566367327272,["GJX@GJXAIOU",[[-1,2789,"\n"]],[2789,2789],[2788,2788]]],[1566367327531,["GJX@GJXAIOU",[[-1,2788,"\n"]],[2788,2788],[2787,2787]]],[1566367327913,["GJX@GJXAIOU",[[-1,2787,"\n"]],[2787,2787],[2786,2786]]],[1566367328729,["GJX@GJXAIOU",[[-1,2807,"\n"]],[2807,2807],[2806,2806]]],[1566367328976,["GJX@GJXAIOU",[[-1,2805," "]],[2806,2806],[2805,2805]]],[1566367338327,["GJX@GJXAIOU",[[1,2806,"**"],[1,2873,"**"]],[2806,2873],[2806,2877]]],[1566367340897,["GJX@GJXAIOU",[[-1,2805,"\n"]],[2805,2805],[2804,2804]]],[1566367366392,["GJX@GJXAIOU",[[-1,2889,"\n"]],[2889,2889],[2888,2888]]],[1566367367664,["GJX@GJXAIOU",[[-1,2913,"\n"]],[2913,2913],[2912,2912]]],[1566367392344,["GJX@GJXAIOU",[[-1,3003,"\n"]],[3003,3003],[3002,3002]]],[1566367407049,["GJX@GJXAIOU",[[-1,3085,"\n"]],[3085,3085],[3084,3084]]],[1566367412257,["GJX@GJXAIOU",[[-1,3240,"\n"]],[3240,3240],[3239,3239]]],[1566367415515,["GJX@GJXAIOU",[[-1,3283,"\n"]],[3283,3283],[3282,3282]]],[1566367416552,["GJX@GJXAIOU",[[1,3283,"\n"]],[3282,3282],[3283,3283]]],[1566367422968,["GJX@GJXAIOU",[[-1,3305,"\n"]],[3305,3305],[3304,3304]]],[1566367431353,["GJX@GJXAIOU",[[-1,3397,"\n"]],[3397,3397],[3396,3396]]],[1566367448017,["GJX@GJXAIOU",[[1,3461,"**"],[1,3499,"**"]],[3461,3499],[3461,3503]]],[1566367452225,["GJX@GJXAIOU",[[-1,3522,"\n"]],[3522,3522],[3521,3521]]],[1566367471337,["GJX@GJXAIOU",[[-1,3613,"\n"]],[3613,3613],[3612,3612]]],[1566367475456,["GJX@GJXAIOU",[[1,3613,"**"],[1,3664,"**"]],[3613,3664],[3613,3668]]],[1566367481107,["GJX@GJXAIOU",[[-1,3700,"\n"]],[3700,3700],[3699,3699]]],[1566367490896,["GJX@GJXAIOU",[[1,3700,"**"],[1,3727,"**"]],[3700,3727],[3700,3731]]],[1566367507801,["GJX@GJXAIOU",[[1,3918,"## "]],[3918,3918],[3931,3931]]]],null,"GJX@GJXAIOU"]]}